// BEGIN  Generated code -- do not edit
// Generated by x86-asmtest.py
#ifdef _LP64
    __ subl(r8, r10);                                                           //    {load}sub r8d, r10d    IID0
    __ addl(r8, r10);                                                           //    {load}add r8d, r10d    IID1
    __ andl(r8, r10);                                                           //    {load}and r8d, r10d    IID2
    __ eaddl(r8, r8, r10, false);                                               //    {load}add r8d, r10d    IID3
    __ eaddl(r8, r8, r10, true);                                                //    {load}{NF}add r8d, r8d, r10d    IID4
    __ eandl(r8, r8, r10, false);                                               //    {load}and r8d, r10d    IID5
    __ eandl(r8, r8, r10, true);                                                //    {load}{NF}and r8d, r8d, r10d    IID6
    __ eimull(r8, r8, r10, false);                                              //    {load}imul r8d, r10d    IID7
    __ eimull(r8, r8, r10, true);                                               //    {load}{NF}imul r8d, r8d, r10d    IID8
    __ eorl(r8, r8, r10, false);                                                //    {load}or r8d, r10d    IID9
    __ eorl(r8, r8, r10, true);                                                 //    {load}{NF}or r8d, r8d, r10d    IID10
    __ eshldl(r8, r8, r10, false);                                              //    {load}shld r8d, r10d, cl    IID11
    __ eshldl(r8, r8, r10, true);                                               //    {load}{NF}shld r8d, r8d, r10d, cl    IID12
    __ eshrdl(r8, r8, r10, false);                                              //    {load}shrd r8d, r10d, cl    IID13
    __ eshrdl(r8, r8, r10, true);                                               //    {load}{NF}shrd r8d, r8d, r10d, cl    IID14
    __ esubl(r8, r8, r10, false);                                               //    {load}sub r8d, r10d    IID15
    __ esubl(r8, r8, r10, true);                                                //    {load}{NF}sub r8d, r8d, r10d    IID16
    __ exorl(r8, r8, r10, false);                                               //    {load}xor r8d, r10d    IID17
    __ exorl(r8, r8, r10, true);                                                //    {load}{NF}xor r8d, r8d, r10d    IID18
#endif // _LP64
#ifdef _LP64
    __ adcq(r8, r10);                                                           //    {load}adc r8, r10    IID19
    __ cmpq(r8, r10);                                                           //    {load}cmp r8, r10    IID20
    __ imulq(r8, r10);                                                          //    {load}imul r8, r10    IID21
    __ popcntq(r8, r10);                                                        //    {load}popcnt r8, r10    IID22
    __ sbbq(r8, r10);                                                           //    {load}sbb r8, r10    IID23
    __ subq(r8, r10);                                                           //    {load}sub r8, r10    IID24
    __ tzcntq(r8, r10);                                                         //    {load}tzcnt r8, r10    IID25
    __ lzcntq(r8, r10);                                                         //    {load}lzcnt r8, r10    IID26
    __ addq(r8, r10);                                                           //    {load}add r8, r10    IID27
    __ andq(r8, r10);                                                           //    {load}and r8, r10    IID28
    __ orq(r8, r10);                                                            //    {load}or r8, r10    IID29
    __ xorq(r8, r10);                                                           //    {load}xor r8, r10    IID30
    __ movq(r8, r10);                                                           //    {load}mov r8, r10    IID31
    __ bsfq(r8, r10);                                                           //    {load}bsf r8, r10    IID32
    __ bsrq(r8, r10);                                                           //    {load}bsr r8, r10    IID33
    __ btq(r8, r10);                                                            //    {load}bt r8, r10    IID34
    __ xchgq(r8, r10);                                                          //    {load}xchg r8, r10    IID35
    __ testq(r8, r10);                                                          //    {load}test r8, r10    IID36
    __ addq(Address(r22, r21, (Address::ScaleFactor)1, -0x60d5db3d), r12);      //    add qword ptr [r22+r21*2-0x60d5db3d], r12    IID37
    __ andq(Address(r16, rcx, (Address::ScaleFactor)0, +0x66115bca), r8);       //    and qword ptr [r16+rcx*1+0x66115bca], r8    IID38
    __ cmpq(Address(r30, rbx, (Address::ScaleFactor)0, -0x62330d69), r14);      //    cmp qword ptr [r30+rbx*1-0x62330d69], r14    IID39
    __ orq(Address(r26, r18, (Address::ScaleFactor)2, +0xb4e8e1e), r15);        //    or qword ptr [r26+r18*4+0xb4e8e1e], r15    IID40
    __ xorq(Address(r20, r29, (Address::ScaleFactor)0, +0x6f3ca568), r17);      //    xor qword ptr [r20+r29*1+0x6f3ca568], r17    IID41
    __ subq(Address(r21, r11, (Address::ScaleFactor)2, +0x6100ff6d), r24);      //    sub qword ptr [r21+r11*4+0x6100ff6d], r24    IID42
    __ movq(Address(rbx, -0x950b199), r14);                                     //    mov qword ptr [rbx-0x950b199], r14    IID43
    __ xaddq(Address(r20, r30, (Address::ScaleFactor)0, +0x32d8d976), r11);     //    xadd qword ptr [r20+r30*1+0x32d8d976], r11    IID44
    __ andq(Address(r14, -0x3caddbe1), 256);                                    //    and qword ptr [r14-0x3caddbe1], 256    IID45
    __ addq(Address(rcx, r30, (Address::ScaleFactor)1, -0x78b1f32a), 1048576);  //    add qword ptr [rcx+r30*2-0x78b1f32a], 1048576    IID46
    __ cmpq(Address(r14, r23, (Address::ScaleFactor)3, -0x147b5338), 256);      //    cmp qword ptr [r14+r23*8-0x147b5338], 256    IID47
    __ sarq(Address(r13, r15, (Address::ScaleFactor)2, -0x2006120c), 4);        //    sar qword ptr [r13+r15*4-0x2006120c], 4    IID48
    __ salq(Address(rcx, r11, (Address::ScaleFactor)3, +0xab498c3), 2);         //    sal qword ptr [rcx+r11*8+0xab498c3], 2    IID49
    __ sbbq(Address(r23, r30, (Address::ScaleFactor)0, +0x4d806ea0), 268435456); //    sbb qword ptr [r23+r30*1+0x4d806ea0], 268435456    IID50
    __ shrq(Address(r12, r9, (Address::ScaleFactor)3, -0x2bf5b0e9), 1);         //    shr qword ptr [r12+r9*8-0x2bf5b0e9], 1    IID51
    __ subq(Address(r16, r16, (Address::ScaleFactor)1, -0x2a7d9754), 268435456); //    sub qword ptr [r16+r16*2-0x2a7d9754], 268435456    IID52
    __ xorq(Address(r29, r30, (Address::ScaleFactor)2, -0x55a7da9d), 1048576);  //    xor qword ptr [r29+r30*4-0x55a7da9d], 1048576    IID53
    __ orq(Address(r13, r26, (Address::ScaleFactor)1, -0x5c442d70), 1048576);   //    or qword ptr [r13+r26*2-0x5c442d70], 1048576    IID54
    __ movq(Address(r9, r8, (Address::ScaleFactor)0, -0x35b475e4), 268435456);  //    mov qword ptr [r9+r8*1-0x35b475e4], 268435456    IID55
    __ testq(Address(r14, r8, (Address::ScaleFactor)2, -0x269e7e5c), -256);     //    test qword ptr [r14+r8*4-0x269e7e5c], -256    IID56
    __ addq(r17, Address(r16, r23, (Address::ScaleFactor)1, -0x6ba450dc));      //    add r17, qword ptr [r16+r23*2-0x6ba450dc]    IID57
    __ andq(r29, Address(r11, r27, (Address::ScaleFactor)3, +0x5f6dea6b));      //    and r29, qword ptr [r11+r27*8+0x5f6dea6b]    IID58
    __ cmpq(r15, Address(r22, r29, (Address::ScaleFactor)0, -0x41d87b39));      //    cmp r15, qword ptr [r22+r29*1-0x41d87b39]    IID59
    __ lzcntq(r25, Address(r23, r23, (Address::ScaleFactor)1, +0x4d226b6b));    //    lzcnt r25, qword ptr [r23+r23*2+0x4d226b6b]    IID60
    __ orq(r30, Address(r9, r24, (Address::ScaleFactor)2, -0x597254e4));        //    or r30, qword ptr [r9+r24*4-0x597254e4]    IID61
    __ adcq(r29, Address(r12, r17, (Address::ScaleFactor)1, -0x2f70fe4b));      //    adc r29, qword ptr [r12+r17*2-0x2f70fe4b]    IID62
    __ imulq(r22, Address(r9, r18, (Address::ScaleFactor)1, +0x33be42b6));      //    imul r22, qword ptr [r9+r18*2+0x33be42b6]    IID63
    __ popcntq(r18, Address(r18, r28, (Address::ScaleFactor)2, +0x19b94ca2));   //    popcnt r18, qword ptr [r18+r28*4+0x19b94ca2]    IID64
    __ sbbq(r16, Address(r22, r17, (Address::ScaleFactor)1, +0x41a9f28a));      //    sbb r16, qword ptr [r22+r17*2+0x41a9f28a]    IID65
    __ subq(r28, Address(r10, r18, (Address::ScaleFactor)1, -0x2eb73c6));       //    sub r28, qword ptr [r10+r18*2-0x2eb73c6]    IID66
    __ tzcntq(r24, Address(rbx, +0x2931e964));                                  //    tzcnt r24, qword ptr [rbx+0x2931e964]    IID67
    __ xorq(rcx, Address(rcx, r12, (Address::ScaleFactor)1, +0xfb953d0));       //    xor rcx, qword ptr [rcx+r12*2+0xfb953d0]    IID68
    __ movq(r27, Address(r26, r29, (Address::ScaleFactor)0, +0x5e2d4573));      //    mov r27, qword ptr [r26+r29*1+0x5e2d4573]    IID69
    __ leaq(r9, Address(r28, -0x52e1de4a));                                     //    lea r9, qword ptr [r28-0x52e1de4a]    IID70
    __ cvttsd2siq(r20, Address(r15, r28, (Address::ScaleFactor)0, -0x50cbb6ab)); //    cvttsd2si r20, qword ptr [r15+r28*1-0x50cbb6ab]    IID71
    __ xchgq(rcx, Address(r17, r22, (Address::ScaleFactor)3, +0x4cede69d));     //    xchg rcx, qword ptr [r17+r22*8+0x4cede69d]    IID72
    __ testq(r19, Address(r30, -0x1a8d9f97));                                   //    test r19, qword ptr [r30-0x1a8d9f97]    IID73
    __ addq(r22, 16);                                                           //    add r22, 16    IID74
    __ andq(r11, 16777216);                                                     //    and r11, 16777216    IID75
    __ adcq(rdx, 1);                                                            //    adc rdx, 1    IID76
    __ cmpq(r21, 1048576);                                                      //    cmp r21, 1048576    IID77
    __ rclq(rcx, 8);                                                            //    rcl rcx, 8    IID78
    __ rcrq(rdx, 8);                                                            //    rcr rdx, 8    IID79
    __ rolq(r24, 8);                                                            //    rol r24, 8    IID80
    __ rorq(r16, 16);                                                           //    ror r16, 16    IID81
    __ sarq(rbx, 8);                                                            //    sar rbx, 8    IID82
    __ salq(r29, 1);                                                            //    sal r29, 1    IID83
    __ sbbq(r16, 16777216);                                                     //    sbb r16, 16777216    IID84
    __ shlq(r31, 4);                                                            //    shl r31, 4    IID85
    __ shrq(r21, 8);                                                            //    shr r21, 8    IID86
    __ subq(r8, 65536);                                                         //    sub r8, 65536    IID87
    __ xorq(r31, 4096);                                                         //    xor r31, 4096    IID88
    __ movq(r15, 268435456);                                                    //    mov r15, 268435456    IID89
    __ mov64(r22, 17179869184);                                                 //    mov r22, 17179869184    IID90
    __ btq(r8, 1);                                                              //    bt r8, 1    IID91
    __ testq(r20, -16);                                                         //    test r20, -16    IID92
    __ orq_imm32(r29, 65536);                                                   //    or r29, 65536    IID93
    __ subq_imm32(r9, 4194304);                                                 //    sub r9, 4194304    IID94
    __ cmovq(Assembler::Condition::overflow, r16, Address(r10, rcx, (Address::ScaleFactor)2, +0x2ec26eed)); //    cmovo r16, qword ptr [r10+rcx*4+0x2ec26eed]    IID95
    __ cmovq(Assembler::Condition::noOverflow, r14, Address(r10, rbx, (Address::ScaleFactor)2, -0x133fff6e)); //    cmovno r14, qword ptr [r10+rbx*4-0x133fff6e]    IID96
    __ cmovq(Assembler::Condition::below, r24, Address(r21, r22, (Address::ScaleFactor)0, -0x288426e1)); //    cmovb r24, qword ptr [r21+r22*1-0x288426e1]    IID97
    __ cmovq(Assembler::Condition::aboveEqual, r28, Address(r23, rcx, (Address::ScaleFactor)3, +0x1fdf4486)); //    cmovae r28, qword ptr [r23+rcx*8+0x1fdf4486]    IID98
    __ cmovq(Assembler::Condition::zero, r13, Address(r22, +0x5721c974));       //    cmovz r13, qword ptr [r22+0x5721c974]    IID99
    __ cmovq(Assembler::Condition::notZero, r21, Address(rbx, r24, (Address::ScaleFactor)1, -0x7efba0fe)); //    cmovnz r21, qword ptr [rbx+r24*2-0x7efba0fe]    IID100
    __ cmovq(Assembler::Condition::belowEqual, r10, Address(rdx, r14, (Address::ScaleFactor)0, +0x1f9fa862)); //    cmovbe r10, qword ptr [rdx+r14*1+0x1f9fa862]    IID101
    __ cmovq(Assembler::Condition::above, r12, Address(r11, r8, (Address::ScaleFactor)1, +0x3840466e)); //    cmova r12, qword ptr [r11+r8*2+0x3840466e]    IID102
    __ cmovq(Assembler::Condition::negative, r28, Address(r28, r11, (Address::ScaleFactor)0, +0x4aea6a91)); //    cmovs r28, qword ptr [r28+r11*1+0x4aea6a91]    IID103
    __ cmovq(Assembler::Condition::positive, r19, Address(r8, r27, (Address::ScaleFactor)3, -0x7d0eb0fa)); //    cmovns r19, qword ptr [r8+r27*8-0x7d0eb0fa]    IID104
    __ cmovq(Assembler::Condition::parity, rcx, Address(r17, +0x6dfb7df8));     //    cmovp rcx, qword ptr [r17+0x6dfb7df8]    IID105
    __ cmovq(Assembler::Condition::noParity, rdx, Address(r19, r22, (Address::ScaleFactor)0, +0x7e90f232)); //    cmovnp rdx, qword ptr [r19+r22*1+0x7e90f232]    IID106
    __ cmovq(Assembler::Condition::less, r17, Address(r16, -0x1bb206d4));       //    cmovl r17, qword ptr [r16-0x1bb206d4]    IID107
    __ cmovq(Assembler::Condition::greaterEqual, r16, Address(r27, r24, (Address::ScaleFactor)3, -0x64cf395e)); //    cmovge r16, qword ptr [r27+r24*8-0x64cf395e]    IID108
    __ cmovq(Assembler::Condition::lessEqual, r22, Address(r11, r29, (Address::ScaleFactor)3, -0x185b1ffd)); //    cmovle r22, qword ptr [r11+r29*8-0x185b1ffd]    IID109
    __ cmovq(Assembler::Condition::greater, r13, Address(r24, r27, (Address::ScaleFactor)0, -0x4d404400)); //    cmovg r13, qword ptr [r24+r27*1-0x4d404400]    IID110
    __ call(r14);                                                               //    call r14    IID111
    __ divq(rcx);                                                               //    div rcx    IID112
    __ idivq(r22);                                                              //    idiv r22    IID113
    __ imulq(r27);                                                              //    imul r27    IID114
    __ mulq(rdx);                                                               //    mul rdx    IID115
    __ negq(rbx);                                                               //    neg rbx    IID116
    __ notq(rcx);                                                               //    not rcx    IID117
    __ rolq(r13);                                                               //    rol r13, cl    IID118
    __ rorq(r27);                                                               //    ror r27, cl    IID119
    __ sarq(r22);                                                               //    sar r22, cl    IID120
    __ salq(r10);                                                               //    sal r10, cl    IID121
    __ shlq(r15);                                                               //    shl r15, cl    IID122
    __ shrq(r19);                                                               //    shr r19, cl    IID123
    __ incrementq(r18);                                                         //    inc r18    IID124
    __ decrementq(r27);                                                         //    dec r27    IID125
    __ pushp(r16);                                                              //    pushp r16    IID126
    __ popp(r8);                                                                //    popp r8    IID127
    __ call(Address(r28, rdx, (Address::ScaleFactor)1, +0x6322f812));           //    call qword ptr [r28+rdx*2+0x6322f812]    IID128
    __ mulq(Address(r27, +0x10494f9c));                                         //    mul qword ptr [r27+0x10494f9c]    IID129
    __ negq(Address(r11, r28, (Address::ScaleFactor)2, +0x782c36d));            //    neg qword ptr [r11+r28*4+0x782c36d]    IID130
    __ sarq(Address(r20, r26, (Address::ScaleFactor)0, +0x737a1fb7));           //    sar qword ptr [r20+r26*1+0x737a1fb7], cl    IID131
    __ salq(Address(rbx, r15, (Address::ScaleFactor)0, +0x77a02e0));            //    sal qword ptr [rbx+r15*1+0x77a02e0], cl    IID132
    __ shrq(Address(r23, +0x6669fd21));                                         //    shr qword ptr [r23+0x6669fd21], cl    IID133
    __ incrementq(Address(r31, r27, (Address::ScaleFactor)0, -0x73839307));     //    inc qword ptr [r31+r27*1-0x73839307]    IID134
    __ decrementq(Address(r17, r18, (Address::ScaleFactor)3, -0x51a412d0));     //    dec qword ptr [r17+r18*8-0x51a412d0]    IID135
    __ imulq(r17, Address(r25, r12, (Address::ScaleFactor)1, +0x3087419d), 256); //    imul r17, qword ptr [r25+r12*2+0x3087419d], 256    IID136
    __ imulq(r21, r19, 268435456);                                              //    imul r21, r19, 268435456    IID137
    __ shldq(r20, r22, 4);                                                      //    shld r20, r22, 4    IID138
    __ shrdq(r24, r8, 4);                                                       //    shrd r24, r8, 4    IID139
    __ pop2(r16, r27);                                                          //    {load}pop2 r27, r16    IID140
    __ pop2p(r24, r21);                                                         //    {load}pop2p r21, r24    IID141
    __ push2(r31, rdx);                                                         //    {load}push2 rdx, r31    IID142
    __ push2p(r9, r14);                                                         //    {load}push2p r14, r9    IID143
    __ movzbq(r11, Address(r30, rdx, (Address::ScaleFactor)1, -0xfc990ec));     //    movzx r11, byte ptr [r30+rdx*2-0xfc990ec]    IID144
    __ movzwq(rcx, Address(r10, rbx, (Address::ScaleFactor)1, -0x376d37c6));    //    movzx rcx, word ptr [r10+rbx*2-0x376d37c6]    IID145
    __ movsbq(r8, Address(rbx, +0x6909ad63));                                   //    movsx r8, byte ptr [rbx+0x6909ad63]    IID146
    __ movswq(r16, Address(r9, r17, (Address::ScaleFactor)2, -0x6dcba209));     //    movsx r16, word ptr [r9+r17*4-0x6dcba209]    IID147
    __ movzbq(r8, r10);                                                         //    movzx r8, r10b    IID148
    __ movzwq(r8, r10);                                                         //    movzx r8, r10w    IID149
    __ movsbq(r8, r10);                                                         //    movsx r8, r10b    IID150
    __ movswq(r8, r10);                                                         //    movsx r8, r10w    IID151
    __ cmpxchgq(r13, Address(r11, +0x955a68e));                                 //    cmpxchg qword ptr [r11+0x955a68e], r13    IID152
    __ eidivq(r17, false);                                                      //    {EVEX}idiv r17    IID153
    __ eidivq(r29, true);                                                       //    {NF}idiv r29    IID154
    __ edivq(r9, false);                                                        //    {EVEX}div r9    IID155
    __ edivq(r10, true);                                                        //    {NF}div r10    IID156
    __ eimulq(r9, false);                                                       //    {EVEX}imul r9    IID157
    __ eimulq(r13, true);                                                       //    {NF}imul r13    IID158
    __ emulq(r8, false);                                                        //    {EVEX}mul r8    IID159
    __ emulq(r21, true);                                                        //    {NF}mul r21    IID160
    __ emulq(Address(r30, r24, (Address::ScaleFactor)3, +0x75458301), false);   //    {EVEX}mul qword ptr [r30+r24*8+0x75458301]    IID161
    __ emulq(Address(r17, r22, (Address::ScaleFactor)2, -0x38020962), true);    //    {NF}mul qword ptr [r17+r22*4-0x38020962]    IID162
    __ eimulq(r8, r10, false);                                                  //    {EVEX}imul r8, r10    IID163
    __ eimulq(r8, r10, true);                                                   //    {NF}imul r8, r10    IID164
    __ elzcntq(r8, r10, false);                                                 //    {EVEX}lzcnt r8, r10    IID165
    __ elzcntq(r8, r10, true);                                                  //    {NF}lzcnt r8, r10    IID166
    __ enegq(r8, r10, false);                                                   //    {EVEX}neg r8, r10    IID167
    __ enegq(r8, r10, true);                                                    //    {NF}neg r8, r10    IID168
    __ epopcntq(r8, r10, false);                                                //    {EVEX}popcnt r8, r10    IID169
    __ epopcntq(r8, r10, true);                                                 //    {NF}popcnt r8, r10    IID170
    __ erolq(r8, r10, false);                                                   //    {EVEX}rol r8, r10, cl    IID171
    __ erolq(r8, r10, true);                                                    //    {NF}rol r8, r10, cl    IID172
    __ erorq(r8, r10, false);                                                   //    {EVEX}ror r8, r10, cl    IID173
    __ erorq(r8, r10, true);                                                    //    {NF}ror r8, r10, cl    IID174
    __ esalq(r8, r10, false);                                                   //    {EVEX}sal r8, r10, cl    IID175
    __ esalq(r8, r10, true);                                                    //    {NF}sal r8, r10, cl    IID176
    __ esarq(r8, r10, false);                                                   //    {EVEX}sar r8, r10, cl    IID177
    __ esarq(r8, r10, true);                                                    //    {NF}sar r8, r10, cl    IID178
    __ edecq(r8, r10, false);                                                   //    {EVEX}dec r8, r10    IID179
    __ edecq(r8, r10, true);                                                    //    {NF}dec r8, r10    IID180
    __ eincq(r8, r10, false);                                                   //    {EVEX}inc r8, r10    IID181
    __ eincq(r8, r10, true);                                                    //    {NF}inc r8, r10    IID182
    __ eshlq(r8, r10, false);                                                   //    {EVEX}shl r8, r10, cl    IID183
    __ eshlq(r8, r10, true);                                                    //    {NF}shl r8, r10, cl    IID184
    __ eshrq(r8, r10, false);                                                   //    {EVEX}shr r8, r10, cl    IID185
    __ eshrq(r8, r10, true);                                                    //    {NF}shr r8, r10, cl    IID186
    __ etzcntq(r8, r10, false);                                                 //    {EVEX}tzcnt r8, r10    IID187
    __ etzcntq(r8, r10, true);                                                  //    {NF}tzcnt r8, r10    IID188
    __ eimulq(r13, Address(rdx, r25, (Address::ScaleFactor)3, -0x116104c4), false); //    {EVEX}imul r13, qword ptr [rdx+r25*8-0x116104c4]    IID189
    __ eimulq(r10, Address(rbx, -0x57b5facc), true);                            //    {NF}imul r10, qword ptr [rbx-0x57b5facc]    IID190
    __ elzcntq(r28, Address(r28, -0x736423af), false);                          //    {EVEX}lzcnt r28, qword ptr [r28-0x736423af]    IID191
    __ elzcntq(r14, Address(r21, r27, (Address::ScaleFactor)1, -0x40f81cbc), true); //    {NF}lzcnt r14, qword ptr [r21+r27*2-0x40f81cbc]    IID192
    __ enegq(r9, Address(r17, +0x4535892), false);                              //    {EVEX}neg r9, qword ptr [r17+0x4535892]    IID193
    __ enegq(r22, Address(r14, -0x69a6ac4c), true);                             //    {NF}neg r22, qword ptr [r14-0x69a6ac4c]    IID194
    __ epopcntq(r25, Address(r24, r16, (Address::ScaleFactor)3, +0x60d63863), false); //    {EVEX}popcnt r25, qword ptr [r24+r16*8+0x60d63863]    IID195
    __ epopcntq(r11, Address(rcx, +0x4497f29), true);                           //    {NF}popcnt r11, qword ptr [rcx+0x4497f29]    IID196
    __ esalq(rcx, Address(r13, r17, (Address::ScaleFactor)3, +0x2a779b38), false); //    {EVEX}sal rcx, qword ptr [r13+r17*8+0x2a779b38], cl    IID197
    __ esalq(r22, Address(r27, r20, (Address::ScaleFactor)0, -0x72c1e2ea), true); //    {NF}sal r22, qword ptr [r27+r20*1-0x72c1e2ea], cl    IID198
    __ esarq(r9, Address(rcx, r15, (Address::ScaleFactor)2, +0x7d962028), false); //    {EVEX}sar r9, qword ptr [rcx+r15*4+0x7d962028], cl    IID199
    __ esarq(r28, Address(r20, -0x54b21089), true);                             //    {NF}sar r28, qword ptr [r20-0x54b21089], cl    IID200
    __ edecq(r23, Address(r22, r8, (Address::ScaleFactor)2, +0x199d009c), false); //    {EVEX}dec r23, qword ptr [r22+r8*4+0x199d009c]    IID201
    __ edecq(r11, Address(r9, r29, (Address::ScaleFactor)1, -0x7f781439), true); //    {NF}dec r11, qword ptr [r9+r29*2-0x7f781439]    IID202
    __ eincq(r24, Address(r22, r15, (Address::ScaleFactor)2, +0x29c9366b), false); //    {EVEX}inc r24, qword ptr [r22+r15*4+0x29c9366b]    IID203
    __ eincq(r31, Address(r11, r31, (Address::ScaleFactor)0, +0x5c1275a0), true); //    {NF}inc r31, qword ptr [r11+r31*1+0x5c1275a0]    IID204
    __ eshrq(r13, Address(r29, r20, (Address::ScaleFactor)1, +0x31881452), false); //    {EVEX}shr r13, qword ptr [r29+r20*2+0x31881452], cl    IID205
    __ eshrq(r14, Address(r15, r28, (Address::ScaleFactor)2, -0x40ea9e3), true); //    {NF}shr r14, qword ptr [r15+r28*4-0x40ea9e3], cl    IID206
    __ etzcntq(r14, Address(r17, r24, (Address::ScaleFactor)3, -0x2d71a800), false); //    {EVEX}tzcnt r14, qword ptr [r17+r24*8-0x2d71a800]    IID207
    __ etzcntq(r18, Address(r23, r31, (Address::ScaleFactor)1, -0x5833732b), true); //    {NF}tzcnt r18, qword ptr [r23+r31*2-0x5833732b]    IID208
    __ eaddq(r30, Address(rbx, r23, (Address::ScaleFactor)1, -0x5cb6670d), r24, false); //    {EVEX}add r30, qword ptr [rbx+r23*2-0x5cb6670d], r24    IID209
    __ eaddq(r20, Address(rcx, r16, (Address::ScaleFactor)1, +0x43e544fd), r11, true); //    {NF}add r20, qword ptr [rcx+r16*2+0x43e544fd], r11    IID210
    __ eandq(r24, Address(r16, -0xd721929), r21, false);                        //    {EVEX}and r24, qword ptr [r16-0xd721929], r21    IID211
    __ eandq(r8, Address(r14, r31, (Address::ScaleFactor)3, +0x1aa5948), r9, true); //    {NF}and r8, qword ptr [r14+r31*8+0x1aa5948], r9    IID212
    __ eorq(r13, Address(r29, r15, (Address::ScaleFactor)1, +0x2516c080), r12, false); //    {EVEX}or r13, qword ptr [r29+r15*2+0x2516c080], r12    IID213
    __ eorq(r27, Address(r9, r29, (Address::ScaleFactor)1, -0x3b18bb22), r27, true); //    {NF}or r27, qword ptr [r9+r29*2-0x3b18bb22], r27    IID214
    __ esubq(r15, Address(r25, r25, (Address::ScaleFactor)2, +0x3e3f816d), r19, false); //    {EVEX}sub r15, qword ptr [r25+r25*4+0x3e3f816d], r19    IID215
    __ esubq(r13, Address(r30, r12, (Address::ScaleFactor)2, -0x7e29829d), r17, true); //    {NF}sub r13, qword ptr [r30+r12*4-0x7e29829d], r17    IID216
    __ exorq(r23, Address(r25, r22, (Address::ScaleFactor)1, -0x3d379b56), r10, false); //    {EVEX}xor r23, qword ptr [r25+r22*2-0x3d379b56], r10    IID217
    __ exorq(r11, Address(r14, rcx, (Address::ScaleFactor)0, +0x55c49163), r25, true); //    {NF}xor r11, qword ptr [r14+rcx*1+0x55c49163], r25    IID218
    __ eaddq(r15, Address(r9, r16, (Address::ScaleFactor)3, +0x15c5eb04), 65536, false); //    {EVEX}add r15, qword ptr [r9+r16*8+0x15c5eb04], 65536    IID219
    __ eaddq(r16, Address(r11, -0x6f7ce950), 65536, true);                      //    {NF}add r16, qword ptr [r11-0x6f7ce950], 65536    IID220
    __ eandq(r29, Address(r15, r20, (Address::ScaleFactor)2, -0x477ef1d2), 65536, false); //    {EVEX}and r29, qword ptr [r15+r20*4-0x477ef1d2], 65536    IID221
    __ eandq(r23, Address(r27, r29, (Address::ScaleFactor)2, +0x3b16b63a), 16, true); //    {NF}and r23, qword ptr [r27+r29*4+0x3b16b63a], 16    IID222
    __ eimulq(r27, Address(rbx, r15, (Address::ScaleFactor)0, +0x233d212d), 16, false); //    {EVEX}imul r27, qword ptr [rbx+r15*1+0x233d212d], 16    IID223
    __ eimulq(r11, Address(r18, rdx, (Address::ScaleFactor)1, +0x1bb63faa), 16, true); //    {NF}imul r11, qword ptr [r18+rdx*2+0x1bb63faa], 16    IID224
    __ eorq(r26, Address(r28, rbx, (Address::ScaleFactor)1, -0x4712c68a), 1048576, false); //    {EVEX}or r26, qword ptr [r28+rbx*2-0x4712c68a], 1048576    IID225
    __ eorq(r9, Address(r31, r28, (Address::ScaleFactor)3, -0x30bf8b7f), 1048576, true); //    {NF}or r9, qword ptr [r31+r28*8-0x30bf8b7f], 1048576    IID226
    __ esalq(r25, Address(r9, -0x9c80fe2), 1, false);                           //    {EVEX}sal r25, qword ptr [r9-0x9c80fe2], 1    IID227
    __ esalq(r27, Address(r19, r18, (Address::ScaleFactor)3, -0x1c7c7f06), 16, true); //    {NF}sal r27, qword ptr [r19+r18*8-0x1c7c7f06], 16    IID228
    __ esarq(r28, Address(r13, r26, (Address::ScaleFactor)3, -0x602e1b3d), 4, false); //    {EVEX}sar r28, qword ptr [r13+r26*8-0x602e1b3d], 4    IID229
    __ esarq(r15, Address(r30, r18, (Address::ScaleFactor)3, -0x6821bb43), 16, true); //    {NF}sar r15, qword ptr [r30+r18*8-0x6821bb43], 16    IID230
    __ eshrq(r11, Address(r31, -0x2f9918f6), 16, false);                        //    {EVEX}shr r11, qword ptr [r31-0x2f9918f6], 16    IID231
    __ eshrq(r19, Address(r16, r30, (Address::ScaleFactor)1, -0x27b89e0d), 1, true); //    {NF}shr r19, qword ptr [r16+r30*2-0x27b89e0d], 1    IID232
    __ esubq(r31, Address(rbx, r28, (Address::ScaleFactor)1, +0x18051a68), 65536, false); //    {EVEX}sub r31, qword ptr [rbx+r28*2+0x18051a68], 65536    IID233
    __ esubq(r11, Address(r22, +0x765904a6), 4096, true);                       //    {NF}sub r11, qword ptr [r22+0x765904a6], 4096    IID234
    __ exorq(r17, Address(r13, +0x49377e09), 1, false);                         //    {EVEX}xor r17, qword ptr [r13+0x49377e09], 1    IID235
    __ exorq(r12, Address(r22, r12, (Address::ScaleFactor)1, +0x422adcae), 1, true); //    {NF}xor r12, qword ptr [r22+r12*2+0x422adcae], 1    IID236
    __ eaddq(r13, r13, 1048576, false);                                         //    {EVEX}add r13, r13, 1048576    IID237
    __ eaddq(rax, r20, 1048576, false);                                         //    {EVEX}add rax, r20, 1048576    IID238
    __ eaddq(r29, r14, 256, true);                                              //    {NF}add r29, r14, 256    IID239
    __ eaddq(rax, r25, 256, true);                                              //    {NF}add rax, r25, 256    IID240
    __ eandq(r19, rcx, 1048576, false);                                         //    {EVEX}and r19, rcx, 1048576    IID241
    __ eandq(rax, r26, 1048576, false);                                         //    {EVEX}and rax, r26, 1048576    IID242
    __ eandq(r19, r13, 65536, true);                                            //    {NF}and r19, r13, 65536    IID243
    __ eandq(rax, r16, 65536, true);                                            //    {NF}and rax, r16, 65536    IID244
    __ eimulq(r16, r22, 268435456, false);                                      //    {EVEX}imul r16, r22, 268435456    IID245
    __ eimulq(rax, r27, 268435456, false);                                      //    {EVEX}imul rax, r27, 268435456    IID246
    __ eimulq(rcx, r16, 16777216, true);                                        //    {NF}imul rcx, r16, 16777216    IID247
    __ eimulq(rax, r20, 16777216, true);                                        //    {NF}imul rax, r20, 16777216    IID248
    __ eorq(r21, r23, 1, false);                                                //    {EVEX}or r21, r23, 1    IID249
    __ eorq(rax, r10, 1, false);                                                //    {EVEX}or rax, r10, 1    IID250
    __ eorq(r21, r12, 1048576, true);                                           //    {NF}or r21, r12, 1048576    IID251
    __ eorq(rax, r10, 1048576, true);                                           //    {NF}or rax, r10, 1048576    IID252
    __ erolq(r8, r30, 16, false);                                               //    {EVEX}rol r8, r30, 16    IID253
    __ erolq(rax, r11, 16, false);                                              //    {EVEX}rol rax, r11, 16    IID254
    __ erolq(r13, r30, 2, true);                                                //    {NF}rol r13, r30, 2    IID255
    __ erolq(rax, r28, 2, true);                                                //    {NF}rol rax, r28, 2    IID256
    __ erorq(r23, r20, 1, false);                                               //    {EVEX}ror r23, r20, 1    IID257
    __ erorq(rax, r25, 1, false);                                               //    {EVEX}ror rax, r25, 1    IID258
    __ erorq(r27, r29, 1, true);                                                //    {NF}ror r27, r29, 1    IID259
    __ erorq(rax, r8, 1, true);                                                 //    {NF}ror rax, r8, 1    IID260
    __ esalq(r21, r27, 2, false);                                               //    {EVEX}sal r21, r27, 2    IID261
    __ esalq(rax, r27, 2, false);                                               //    {EVEX}sal rax, r27, 2    IID262
    __ esalq(r25, r9, 8, true);                                                 //    {NF}sal r25, r9, 8    IID263
    __ esalq(rax, r27, 8, true);                                                //    {NF}sal rax, r27, 8    IID264
    __ esarq(r16, rcx, 2, false);                                               //    {EVEX}sar r16, rcx, 2    IID265
    __ esarq(rax, r12, 2, false);                                               //    {EVEX}sar rax, r12, 2    IID266
    __ esarq(r25, rbx, 2, true);                                                //    {NF}sar r25, rbx, 2    IID267
    __ esarq(rax, r17, 2, true);                                                //    {NF}sar rax, r17, 2    IID268
    __ eshlq(r25, r12, 8, false);                                               //    {EVEX}shl r25, r12, 8    IID269
    __ eshlq(rax, r30, 8, false);                                               //    {EVEX}shl rax, r30, 8    IID270
    __ eshlq(rdx, r25, 1, true);                                                //    {NF}shl rdx, r25, 1    IID271
    __ eshlq(rax, r29, 1, true);                                                //    {NF}shl rax, r29, 1    IID272
    __ eshrq(r28, rcx, 4, false);                                               //    {EVEX}shr r28, rcx, 4    IID273
    __ eshrq(rax, r20, 4, false);                                               //    {EVEX}shr rax, r20, 4    IID274
    __ eshrq(r9, r30, 4, true);                                                 //    {NF}shr r9, r30, 4    IID275
    __ eshrq(rax, r8, 4, true);                                                 //    {NF}shr rax, r8, 4    IID276
    __ esubq(r12, r21, 1048576, false);                                         //    {EVEX}sub r12, r21, 1048576    IID277
    __ esubq(rax, r12, 1048576, false);                                         //    {EVEX}sub rax, r12, 1048576    IID278
    __ esubq(r16, r15, 4096, true);                                             //    {NF}sub r16, r15, 4096    IID279
    __ esubq(rax, r17, 4096, true);                                             //    {NF}sub rax, r17, 4096    IID280
    __ exorq(r8, rcx, 1048576, false);                                          //    {EVEX}xor r8, rcx, 1048576    IID281
    __ exorq(rax, rcx, 1048576, false);                                         //    {EVEX}xor rax, rcx, 1048576    IID282
    __ exorq(r28, r17, 4096, true);                                             //    {NF}xor r28, r17, 4096    IID283
    __ exorq(rax, r26, 4096, true);                                             //    {NF}xor rax, r26, 4096    IID284
    __ eorq_imm32(r25, r8, 268435456, false);                                   //    {EVEX}or r25, r8, 268435456    IID285
    __ eorq_imm32(rax, r10, 268435456, false);                                  //    {EVEX}or rax, r10, 268435456    IID286
    __ eorq_imm32(r8, r9, 1048576, false);                                      //    {EVEX}or r8, r9, 1048576    IID287
    __ eorq_imm32(rax, r13, 1048576, false);                                    //    {EVEX}or rax, r13, 1048576    IID288
    __ esubq_imm32(r31, r19, 1048576, false);                                   //    {EVEX}sub r31, r19, 1048576    IID289
    __ esubq_imm32(rax, r23, 1048576, false);                                   //    {EVEX}sub rax, r23, 1048576    IID290
    __ esubq_imm32(r22, r15, 262144, true);                                     //    {NF}sub r22, r15, 262144    IID291
    __ esubq_imm32(rax, r25, 262144, true);                                     //    {NF}sub rax, r25, 262144    IID292
    __ eaddq(r8, r8, r10, false);                                               //    {load}add r8, r10    IID293
    __ eaddq(r8, r8, r10, true);                                                //    {load}{NF}add r8, r8, r10    IID294
    __ eadcxq(r8, r8, r10);                                                     //    {load}adcx r8, r10    IID295
    __ eadoxq(r8, r8, r10);                                                     //    {load}adox r8, r10    IID296
    __ eandq(r8, r8, r10, false);                                               //    {load}and r8, r10    IID297
    __ eandq(r8, r8, r10, true);                                                //    {load}{NF}and r8, r8, r10    IID298
    __ eimulq(r8, r8, r10, false);                                              //    {load}imul r8, r10    IID299
    __ eimulq(r8, r8, r10, true);                                               //    {load}{NF}imul r8, r8, r10    IID300
    __ eorq(r8, r8, r10, false);                                                //    {load}or r8, r10    IID301
    __ eorq(r8, r8, r10, true);                                                 //    {load}{NF}or r8, r8, r10    IID302
    __ esubq(r8, r8, r10, false);                                               //    {load}sub r8, r10    IID303
    __ esubq(r8, r8, r10, true);                                                //    {load}{NF}sub r8, r8, r10    IID304
    __ exorq(r8, r8, r10, false);                                               //    {load}xor r8, r10    IID305
    __ exorq(r8, r8, r10, true);                                                //    {load}{NF}xor r8, r8, r10    IID306
#endif // _LP64

  static const uint8_t insns[] =
  {
#ifdef _LP64
    0x45, 0x2b, 0xc2,                                                                // IID0
    0x45, 0x03, 0xc2,                                                                // IID1
    0x45, 0x23, 0xc2,                                                                // IID2
    0x45, 0x03, 0xc2,                                                                // IID3
    0x62, 0x54, 0x3c, 0x1c, 0x03, 0xc2,                                              // IID4
    0x45, 0x23, 0xc2,                                                                // IID5
    0x62, 0x54, 0x3c, 0x1c, 0x23, 0xc2,                                              // IID6
    0x45, 0x0f, 0xaf, 0xc2,                                                          // IID7
    0x62, 0x54, 0x3c, 0x1c, 0xaf, 0xc2,                                              // IID8
    0x45, 0x0b, 0xc2,                                                                // IID9
    0x62, 0x54, 0x3c, 0x1c, 0x0b, 0xc2,                                              // IID10
    0x45, 0x0f, 0xa5, 0xd0,                                                          // IID11
    0x62, 0x54, 0x3c, 0x1c, 0xa5, 0xd0,                                              // IID12
    0x45, 0x0f, 0xad, 0xd0,                                                          // IID13
    0x62, 0x54, 0x3c, 0x1c, 0xad, 0xd0,                                              // IID14
    0x45, 0x2b, 0xc2,                                                                // IID15
    0x62, 0x54, 0x3c, 0x1c, 0x2b, 0xc2,                                              // IID16
    0x45, 0x33, 0xc2,                                                                // IID17
    0x62, 0x54, 0x3c, 0x1c, 0x33, 0xc2,                                              // IID18
    0x4d, 0x13, 0xc2,                                                                // IID19
    0x4d, 0x3b, 0xc2,                                                                // IID20
    0x4d, 0x0f, 0xaf, 0xc2,                                                          // IID21
    0xf3, 0x4d, 0x0f, 0xb8, 0xc2,                                                    // IID22
    0x4d, 0x1b, 0xc2,                                                                // IID23
    0x4d, 0x2b, 0xc2,                                                                // IID24
    0xf3, 0x4d, 0x0f, 0xbc, 0xc2,                                                    // IID25
    0xf3, 0x4d, 0x0f, 0xbd, 0xc2,                                                    // IID26
    0x4d, 0x03, 0xc2,                                                                // IID27
    0x4d, 0x23, 0xc2,                                                                // IID28
    0x4d, 0x0b, 0xc2,                                                                // IID29
    0x4d, 0x33, 0xc2,                                                                // IID30
    0x4d, 0x8b, 0xc2,                                                                // IID31
    0x4d, 0x0f, 0xbc, 0xc2,                                                          // IID32
    0x4d, 0x0f, 0xbd, 0xc2,                                                          // IID33
    0x4d, 0x0f, 0xa3, 0xd0,                                                          // IID34
    0x4d, 0x87, 0xc2,                                                                // IID35
    0x4d, 0x85, 0xc2,                                                                // IID36
    0xd5, 0x3c, 0x01, 0xa4, 0x6e, 0xc3, 0x24, 0x2a, 0x9f,                            // IID37
    0xd5, 0x1c, 0x21, 0x84, 0x08, 0xca, 0x5b, 0x11, 0x66,                            // IID38
    0xd5, 0x1d, 0x39, 0xb4, 0x1e, 0x97, 0xf2, 0xcc, 0x9d,                            // IID39
    0xd5, 0x3d, 0x09, 0xbc, 0x92, 0x1e, 0x8e, 0x4e, 0x0b,                            // IID40
    0xd5, 0x7a, 0x31, 0x8c, 0x2c, 0x68, 0xa5, 0x3c, 0x6f,                            // IID41
    0xd5, 0x5e, 0x29, 0x84, 0x9d, 0x6d, 0xff, 0x00, 0x61,                            // IID42
    0x4c, 0x89, 0xb3, 0x67, 0x4e, 0xaf, 0xf6,                                        // IID43
    0xd5, 0xbe, 0xc1, 0x9c, 0x34, 0x76, 0xd9, 0xd8, 0x32,                            // IID44
    0x49, 0x81, 0xa6, 0x1f, 0x24, 0x52, 0xc3, 0x00, 0x01, 0x00, 0x00,                // IID45
    0xd5, 0x2a, 0x81, 0x84, 0x71, 0xd6, 0x0c, 0x4e, 0x87, 0x00, 0x00, 0x10, 0x00,    // IID46
    0xd5, 0x29, 0x81, 0xbc, 0xfe, 0xc8, 0xac, 0x84, 0xeb, 0x00, 0x01, 0x00, 0x00,    // IID47
    0x4b, 0xc1, 0xbc, 0xbd, 0xf4, 0xed, 0xf9, 0xdf, 0x04,                            // IID48
    0x4a, 0xc1, 0xa4, 0xd9, 0xc3, 0x98, 0xb4, 0x0a, 0x02,                            // IID49
    0xd5, 0x3a, 0x81, 0x9c, 0x37, 0xa0, 0x6e, 0x80, 0x4d, 0x00, 0x00, 0x00, 0x10,    // IID50
    0x4b, 0xd1, 0xac, 0xcc, 0x17, 0x4f, 0x0a, 0xd4,                                  // IID51
    0xd5, 0x38, 0x81, 0xac, 0x40, 0xac, 0x68, 0x82, 0xd5, 0x00, 0x00, 0x00, 0x10,    // IID52
    0xd5, 0x3b, 0x81, 0xb4, 0xb5, 0x63, 0x25, 0x58, 0xaa, 0x00, 0x00, 0x10, 0x00,    // IID53
    0xd5, 0x2b, 0x81, 0x8c, 0x55, 0x90, 0xd2, 0xbb, 0xa3, 0x00, 0x00, 0x10, 0x00,    // IID54
    0x4b, 0xc7, 0x84, 0x01, 0x1c, 0x8a, 0x4b, 0xca, 0x00, 0x00, 0x00, 0x10,          // IID55
    0x4b, 0xf7, 0x84, 0x86, 0xa4, 0x81, 0x61, 0xd9, 0x00, 0xff, 0xff, 0xff,          // IID56
    0xd5, 0x78, 0x03, 0x8c, 0x78, 0x24, 0xaf, 0x5b, 0x94,                            // IID57
    0xd5, 0x6f, 0x23, 0xac, 0xdb, 0x6b, 0xea, 0x6d, 0x5f,                            // IID58
    0xd5, 0x3e, 0x3b, 0xbc, 0x2e, 0xc7, 0x84, 0x27, 0xbe,                            // IID59
    0xf3, 0xd5, 0xfc, 0xbd, 0x8c, 0x7f, 0x6b, 0x6b, 0x22, 0x4d,                      // IID60
    0xd5, 0x6f, 0x0b, 0xb4, 0x81, 0x1c, 0xab, 0x8d, 0xa6,                            // IID61
    0xd5, 0x6d, 0x13, 0xac, 0x4c, 0xb5, 0x01, 0x8f, 0xd0,                            // IID62
    0xd5, 0xe9, 0xaf, 0xb4, 0x51, 0xb6, 0x42, 0xbe, 0x33,                            // IID63
    0xf3, 0xd5, 0xfa, 0xb8, 0x94, 0xa2, 0xa2, 0x4c, 0xb9, 0x19,                      // IID64
    0xd5, 0x78, 0x1b, 0x84, 0x4e, 0x8a, 0xf2, 0xa9, 0x41,                            // IID65
    0xd5, 0x6d, 0x2b, 0xa4, 0x52, 0x3a, 0x8c, 0x14, 0xfd,                            // IID66
    0xf3, 0xd5, 0xcc, 0xbc, 0x83, 0x64, 0xe9, 0x31, 0x29,                            // IID67
    0x4a, 0x33, 0x8c, 0x61, 0xd0, 0x53, 0xb9, 0x0f,                                  // IID68
    0xd5, 0x7f, 0x8b, 0x9c, 0x2a, 0x73, 0x45, 0x2d, 0x5e,                            // IID69
    0xd5, 0x1d, 0x8d, 0x8c, 0x24, 0xb6, 0x21, 0x1e, 0xad,                            // IID70
    0xf2, 0xd5, 0xeb, 0x2c, 0xa4, 0x27, 0x55, 0x49, 0x34, 0xaf,                      // IID71
    0xd5, 0x38, 0x87, 0x8c, 0xf1, 0x9d, 0xe6, 0xed, 0x4c,                            // IID72
    0xd5, 0x59, 0x85, 0x9e, 0x69, 0x60, 0x72, 0xe5,                                  // IID73
    0xd5, 0x18, 0x83, 0xc6, 0x10,                                                    // IID74
    0x49, 0x81, 0xe3, 0x00, 0x00, 0x00, 0x01,                                        // IID75
    0x48, 0x83, 0xd2, 0x01,                                                          // IID76
    0xd5, 0x18, 0x81, 0xfd, 0x00, 0x00, 0x10, 0x00,                                  // IID77
    0x48, 0xc1, 0xd1, 0x08,                                                          // IID78
    0x48, 0xc1, 0xda, 0x08,                                                          // IID79
    0xd5, 0x19, 0xc1, 0xc0, 0x08,                                                    // IID80
    0xd5, 0x18, 0xc1, 0xc8, 0x10,                                                    // IID81
    0x48, 0xc1, 0xfb, 0x08,                                                          // IID82
    0xd5, 0x19, 0xd1, 0xe5,                                                          // IID83
    0xd5, 0x18, 0x81, 0xd8, 0x00, 0x00, 0x00, 0x01,                                  // IID84
    0xd5, 0x19, 0xc1, 0xe7, 0x04,                                                    // IID85
    0xd5, 0x18, 0xc1, 0xed, 0x08,                                                    // IID86
    0x49, 0x81, 0xe8, 0x00, 0x00, 0x01, 0x00,                                        // IID87
    0xd5, 0x19, 0x81, 0xf7, 0x00, 0x10, 0x00, 0x00,                                  // IID88
    0x49, 0xc7, 0xc7, 0x00, 0x00, 0x00, 0x10,                                        // IID89
    0xd5, 0x18, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,                // IID90
    0x49, 0x0f, 0xba, 0xe0, 0x01,                                                    // IID91
    0xd5, 0x18, 0xf7, 0xc4, 0xf0, 0xff, 0xff, 0xff,                                  // IID92
    0xd5, 0x19, 0x81, 0xcd, 0x00, 0x00, 0x01, 0x00,                                  // IID93
    0x49, 0x81, 0xe9, 0x00, 0x00, 0x40, 0x00,                                        // IID94
    0xd5, 0xc9, 0x40, 0x84, 0x8a, 0xed, 0x6e, 0xc2, 0x2e,                            // IID95
    0x4d, 0x0f, 0x41, 0xb4, 0x9a, 0x92, 0x00, 0xc0, 0xec,                            // IID96
    0xd5, 0xfc, 0x42, 0x84, 0x35, 0x1f, 0xd9, 0x7b, 0xd7,                            // IID97
    0xd5, 0xdc, 0x43, 0xa4, 0xcf, 0x86, 0x44, 0xdf, 0x1f,                            // IID98
    0xd5, 0x9c, 0x44, 0xae, 0x74, 0xc9, 0x21, 0x57,                                  // IID99
    0xd5, 0xea, 0x45, 0xac, 0x43, 0x02, 0x5f, 0x04, 0x81,                            // IID100
    0x4e, 0x0f, 0x46, 0x94, 0x32, 0x62, 0xa8, 0x9f, 0x1f,                            // IID101
    0x4f, 0x0f, 0x47, 0xa4, 0x43, 0x6e, 0x46, 0x40, 0x38,                            // IID102
    0xd5, 0xdf, 0x48, 0xa4, 0x1c, 0x91, 0x6a, 0xea, 0x4a,                            // IID103
    0xd5, 0xeb, 0x49, 0x9c, 0xd8, 0x06, 0x4f, 0xf1, 0x82,                            // IID104
    0xd5, 0x98, 0x4a, 0x89, 0xf8, 0x7d, 0xfb, 0x6d,                                  // IID105
    0xd5, 0xb8, 0x4b, 0x94, 0x33, 0x32, 0xf2, 0x90, 0x7e,                            // IID106
    0xd5, 0xd8, 0x4c, 0x88, 0x2c, 0xf9, 0x4d, 0xe4,                                  // IID107
    0xd5, 0xfb, 0x4d, 0x84, 0xc3, 0xa2, 0xc6, 0x30, 0x9b,                            // IID108
    0xd5, 0xeb, 0x4e, 0xb4, 0xeb, 0x03, 0xe0, 0xa4, 0xe7,                            // IID109
    0xd5, 0xbf, 0x4f, 0xac, 0x18, 0x00, 0xbc, 0xbf, 0xb2,                            // IID110
    0x41, 0xff, 0xd6,                                                                // IID111
    0x48, 0xf7, 0xf1,                                                                // IID112
    0xd5, 0x18, 0xf7, 0xfe,                                                          // IID113
    0xd5, 0x19, 0xf7, 0xeb,                                                          // IID114
    0x48, 0xf7, 0xe2,                                                                // IID115
    0x48, 0xf7, 0xdb,                                                                // IID116
    0x48, 0xf7, 0xd1,                                                                // IID117
    0x49, 0xd3, 0xc5,                                                                // IID118
    0xd5, 0x19, 0xd3, 0xcb,                                                          // IID119
    0xd5, 0x18, 0xd3, 0xfe,                                                          // IID120
    0x49, 0xd3, 0xe2,                                                                // IID121
    0x49, 0xd3, 0xe7,                                                                // IID122
    0xd5, 0x18, 0xd3, 0xeb,                                                          // IID123
    0xd5, 0x18, 0xff, 0xc2,                                                          // IID124
    0xd5, 0x19, 0xff, 0xcb,                                                          // IID125
    0xd5, 0x18, 0x50,                                                                // IID126
    0xd5, 0x09, 0x58,                                                                // IID127
    0xd5, 0x11, 0xff, 0x94, 0x54, 0x12, 0xf8, 0x22, 0x63,                            // IID128
    0xd5, 0x19, 0xf7, 0xa3, 0x9c, 0x4f, 0x49, 0x10,                                  // IID129
    0xd5, 0x2b, 0xf7, 0x9c, 0xa3, 0x6d, 0xc3, 0x82, 0x07,                            // IID130
    0xd5, 0x3a, 0xd3, 0xbc, 0x14, 0xb7, 0x1f, 0x7a, 0x73,                            // IID131
    0x4a, 0xd3, 0xa4, 0x3b, 0xe0, 0x02, 0x7a, 0x07,                                  // IID132
    0xd5, 0x18, 0xd3, 0xaf, 0x21, 0xfd, 0x69, 0x66,                                  // IID133
    0xd5, 0x3b, 0xff, 0x84, 0x1f, 0xf9, 0x6c, 0x7c, 0x8c,                            // IID134
    0xd5, 0x38, 0xff, 0x8c, 0xd1, 0x30, 0xed, 0x5b, 0xae,                            // IID135
    0xd5, 0x5b, 0x69, 0x8c, 0x61, 0x9d, 0x41, 0x87, 0x30, 0x00, 0x01, 0x00, 0x00,    // IID136
    0xd5, 0x58, 0x69, 0xeb, 0x00, 0x00, 0x00, 0x10,                                  // IID137
    0xd5, 0xd8, 0xa4, 0xf4, 0x04,                                                    // IID138
    0xd5, 0x9d, 0xac, 0xc0, 0x04,                                                    // IID139
    0x62, 0xfc, 0x24, 0x10, 0x8f, 0xc0,                                              // IID140
    0x62, 0xdc, 0xd4, 0x10, 0x8f, 0xc0,                                              // IID141
    0x62, 0xdc, 0x6c, 0x18, 0xff, 0xf7,                                              // IID142
    0x62, 0xd4, 0x8c, 0x18, 0xff, 0xf1,                                              // IID143
    0xd5, 0x9d, 0xb6, 0x9c, 0x56, 0x14, 0x6f, 0x36, 0xf0,                            // IID144
    0x49, 0x0f, 0xb7, 0x8c, 0x5a, 0x3a, 0xc8, 0x92, 0xc8,                            // IID145
    0x4c, 0x0f, 0xbe, 0x83, 0x63, 0xad, 0x09, 0x69,                                  // IID146
    0xd5, 0xe9, 0xbf, 0x84, 0x89, 0xf7, 0x5d, 0x34, 0x92,                            // IID147
    0x4d, 0x0f, 0xb6, 0xc2,                                                          // IID148
    0x4d, 0x0f, 0xb7, 0xc2,                                                          // IID149
    0x4d, 0x0f, 0xbe, 0xc2,                                                          // IID150
    0x4d, 0x0f, 0xbf, 0xc2,                                                          // IID151
    0x4d, 0x0f, 0xb1, 0xab, 0x8e, 0xa6, 0x55, 0x09,                                  // IID152
    0x62, 0xfc, 0xfc, 0x08, 0xf7, 0xf9,                                              // IID153
    0x62, 0xdc, 0xfc, 0x0c, 0xf7, 0xfd,                                              // IID154
    0x62, 0xd4, 0xfc, 0x08, 0xf7, 0xf1,                                              // IID155
    0x62, 0xd4, 0xfc, 0x0c, 0xf7, 0xf2,                                              // IID156
    0x62, 0xd4, 0xfc, 0x08, 0xf7, 0xe9,                                              // IID157
    0x62, 0xd4, 0xfc, 0x0c, 0xf7, 0xed,                                              // IID158
    0x62, 0xd4, 0xfc, 0x08, 0xf7, 0xe0,                                              // IID159
    0x62, 0xfc, 0xfc, 0x0c, 0xf7, 0xe5,                                              // IID160
    0x62, 0x9c, 0xf8, 0x08, 0xf7, 0xa4, 0xc6, 0x01, 0x83, 0x45, 0x75,                // IID161
    0x62, 0xfc, 0xf8, 0x0c, 0xf7, 0xa4, 0xb1, 0x9e, 0xf6, 0xfd, 0xc7,                // IID162
    0x62, 0x54, 0xfc, 0x08, 0xaf, 0xc2,                                              // IID163
    0x62, 0x54, 0xfc, 0x0c, 0xaf, 0xc2,                                              // IID164
    0x62, 0x54, 0xfc, 0x08, 0xf5, 0xc2,                                              // IID165
    0x62, 0x54, 0xfc, 0x0c, 0xf5, 0xc2,                                              // IID166
    0x62, 0xd4, 0xbc, 0x18, 0xf7, 0xda,                                              // IID167
    0x62, 0xd4, 0xbc, 0x1c, 0xf7, 0xda,                                              // IID168
    0x62, 0x54, 0xfc, 0x08, 0x88, 0xc2,                                              // IID169
    0x62, 0x54, 0xfc, 0x0c, 0x88, 0xc2,                                              // IID170
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xc2,                                              // IID171
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xc2,                                              // IID172
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xca,                                              // IID173
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xca,                                              // IID174
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xe2,                                              // IID175
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xe2,                                              // IID176
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xfa,                                              // IID177
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xfa,                                              // IID178
    0x62, 0xd4, 0xbc, 0x18, 0xff, 0xca,                                              // IID179
    0x62, 0xd4, 0xbc, 0x1c, 0xff, 0xca,                                              // IID180
    0x62, 0xd4, 0xbc, 0x18, 0xff, 0xc2,                                              // IID181
    0x62, 0xd4, 0xbc, 0x1c, 0xff, 0xc2,                                              // IID182
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xe2,                                              // IID183
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xe2,                                              // IID184
    0x62, 0xd4, 0xbc, 0x18, 0xd3, 0xea,                                              // IID185
    0x62, 0xd4, 0xbc, 0x1c, 0xd3, 0xea,                                              // IID186
    0x62, 0x54, 0xfc, 0x08, 0xf4, 0xc2,                                              // IID187
    0x62, 0x54, 0xfc, 0x0c, 0xf4, 0xc2,                                              // IID188
    0x62, 0x34, 0xf8, 0x08, 0xaf, 0xac, 0xca, 0x3c, 0xfb, 0x9e, 0xee,                // IID189
    0x62, 0x74, 0xfc, 0x0c, 0xaf, 0x93, 0x34, 0x05, 0x4a, 0xa8,                      // IID190
    0x62, 0x4c, 0xfc, 0x08, 0xf5, 0xa4, 0x24, 0x51, 0xdc, 0x9b, 0x8c,                // IID191
    0x62, 0x3c, 0xf8, 0x0c, 0xf5, 0xb4, 0x5d, 0x44, 0xe3, 0x07, 0xbf,                // IID192
    0x62, 0xfc, 0xb4, 0x18, 0xf7, 0x99, 0x92, 0x58, 0x53, 0x04,                      // IID193
    0x62, 0xd4, 0xcc, 0x14, 0xf7, 0x9e, 0xb4, 0x53, 0x59, 0x96,                      // IID194
    0x62, 0x4c, 0xf8, 0x08, 0x88, 0x8c, 0xc0, 0x63, 0x38, 0xd6, 0x60,                // IID195
    0x62, 0x74, 0xfc, 0x0c, 0x88, 0x99, 0x29, 0x7f, 0x49, 0x04,                      // IID196
    0x62, 0xd4, 0xf0, 0x18, 0xd3, 0xa4, 0xcd, 0x38, 0x9b, 0x77, 0x2a,                // IID197
    0x62, 0xdc, 0xc8, 0x14, 0xd3, 0xa4, 0x23, 0x16, 0x1d, 0x3e, 0x8d,                // IID198
    0x62, 0xb4, 0xb4, 0x18, 0xd3, 0xbc, 0xb9, 0x28, 0x20, 0x96, 0x7d,                // IID199
    0x62, 0xfc, 0x9c, 0x14, 0xd3, 0xbc, 0x24, 0x77, 0xef, 0x4d, 0xab,                // IID200
    0x62, 0xbc, 0xc4, 0x10, 0xff, 0x8c, 0x86, 0x9c, 0x00, 0x9d, 0x19,                // IID201
    0x62, 0x94, 0xa0, 0x1c, 0xff, 0x8c, 0x69, 0xc7, 0xeb, 0x87, 0x80,                // IID202
    0x62, 0xbc, 0xbc, 0x10, 0xff, 0x84, 0xbe, 0x6b, 0x36, 0xc9, 0x29,                // IID203
    0x62, 0x94, 0x80, 0x14, 0xff, 0x84, 0x3b, 0xa0, 0x75, 0x12, 0x5c,                // IID204
    0x62, 0xdc, 0x90, 0x18, 0xd3, 0xac, 0x65, 0x52, 0x14, 0x88, 0x31,                // IID205
    0x62, 0x94, 0x88, 0x1c, 0xd3, 0xac, 0xa7, 0x1d, 0x56, 0xf1, 0xfb,                // IID206
    0x62, 0x3c, 0xf8, 0x08, 0xf4, 0xb4, 0xc1, 0x00, 0x58, 0x8e, 0xd2,                // IID207
    0x62, 0xac, 0xf8, 0x0c, 0xf4, 0x94, 0x7f, 0xd5, 0x8c, 0xcc, 0xa7,                // IID208
    0x62, 0x64, 0x88, 0x10, 0x01, 0x84, 0x7b, 0xf3, 0x98, 0x49, 0xa3,                // IID209
    0x62, 0x74, 0xd8, 0x14, 0x01, 0x9c, 0x41, 0xfd, 0x44, 0xe5, 0x43,                // IID210
    0x62, 0xec, 0xbc, 0x10, 0x21, 0xa8, 0xd7, 0xe6, 0x8d, 0xf2,                      // IID211
    0x62, 0x14, 0xb8, 0x1c, 0x21, 0x8c, 0xfe, 0x48, 0x59, 0xaa, 0x01,                // IID212
    0x62, 0x1c, 0x94, 0x18, 0x09, 0xa4, 0x7d, 0x80, 0xc0, 0x16, 0x25,                // IID213
    0x62, 0x04, 0xa0, 0x14, 0x09, 0x9c, 0x69, 0xde, 0x44, 0xe7, 0xc4,                // IID214
    0x62, 0x8c, 0x80, 0x18, 0x29, 0x9c, 0x89, 0x6d, 0x81, 0x3f, 0x3e,                // IID215
    0x62, 0x8c, 0x94, 0x1c, 0x29, 0x8c, 0xa6, 0x63, 0x7d, 0xd6, 0x81,                // IID216
    0x62, 0x5c, 0xc0, 0x10, 0x31, 0x94, 0x71, 0xaa, 0x64, 0xc8, 0xc2,                // IID217
    0x62, 0x44, 0xa4, 0x1c, 0x31, 0x8c, 0x0e, 0x63, 0x91, 0xc4, 0x55,                // IID218
    0x62, 0xd4, 0x80, 0x18, 0x81, 0x84, 0xc1, 0x04, 0xeb, 0xc5, 0x15, 0x00, 0x00, 0x01, 0x00, // IID219
    0x62, 0xd4, 0xfc, 0x14, 0x81, 0x83, 0xb0, 0x16, 0x83, 0x90, 0x00, 0x00, 0x01, 0x00, // IID220
    0x62, 0xd4, 0x90, 0x10, 0x81, 0xa4, 0xa7, 0x2e, 0x0e, 0x81, 0xb8, 0x00, 0x00, 0x01, 0x00, // IID221
    0x62, 0x9c, 0xc0, 0x14, 0x83, 0xa4, 0xab, 0x3a, 0xb6, 0x16, 0x3b, 0x10,          // IID222
    0x62, 0x24, 0xfc, 0x08, 0x6b, 0x9c, 0x3b, 0x2d, 0x21, 0x3d, 0x23, 0x10,          // IID223
    0x62, 0x7c, 0xfc, 0x0c, 0x6b, 0x9c, 0x52, 0xaa, 0x3f, 0xb6, 0x1b, 0x10,          // IID224
    0x62, 0xdc, 0xac, 0x10, 0x81, 0x8c, 0x5c, 0x76, 0x39, 0xed, 0xb8, 0x00, 0x00, 0x10, 0x00, // IID225
    0x62, 0x9c, 0xb0, 0x1c, 0x81, 0x8c, 0xe7, 0x81, 0x74, 0x40, 0xcf, 0x00, 0x00, 0x10, 0x00, // IID226
    0x62, 0xd4, 0xb4, 0x10, 0xd1, 0xa1, 0x1e, 0xf0, 0x37, 0xf6,                      // IID227
    0x62, 0xfc, 0xa0, 0x14, 0xc1, 0xa4, 0xd3, 0xfa, 0x80, 0x83, 0xe3, 0x10,          // IID228
    0x62, 0x94, 0x98, 0x10, 0xc1, 0xbc, 0xd5, 0xc3, 0xe4, 0xd1, 0x9f, 0x04,          // IID229
    0x62, 0xdc, 0x80, 0x1c, 0xc1, 0xbc, 0xd6, 0xbd, 0x44, 0xde, 0x97, 0x10,          // IID230
    0x62, 0xdc, 0xa4, 0x18, 0xc1, 0xaf, 0x0a, 0xe7, 0x66, 0xd0, 0x10,                // IID231
    0x62, 0xbc, 0xe0, 0x14, 0xd1, 0xac, 0x70, 0xf3, 0x61, 0x47, 0xd8,                // IID232
    0x62, 0xb4, 0x80, 0x10, 0x81, 0xac, 0x63, 0x68, 0x1a, 0x05, 0x18, 0x00, 0x00, 0x01, 0x00, // IID233
    0x62, 0xfc, 0xa4, 0x1c, 0x81, 0xae, 0xa6, 0x04, 0x59, 0x76, 0x00, 0x10, 0x00, 0x00, // IID234
    0x62, 0xd4, 0xf4, 0x10, 0x83, 0xb5, 0x09, 0x7e, 0x37, 0x49, 0x01,                // IID235
    0x62, 0xbc, 0x9c, 0x1c, 0x83, 0xb4, 0x66, 0xae, 0xdc, 0x2a, 0x42, 0x01,          // IID236
    0x62, 0xd4, 0x94, 0x18, 0x81, 0xc5, 0x00, 0x00, 0x10, 0x00,                      // IID237
    0x62, 0xfc, 0xfc, 0x18, 0x81, 0xc4, 0x00, 0x00, 0x10, 0x00,                      // IID238
    0x62, 0xd4, 0x94, 0x14, 0x81, 0xc6, 0x00, 0x01, 0x00, 0x00,                      // IID239
    0x62, 0xdc, 0xfc, 0x1c, 0x81, 0xc1, 0x00, 0x01, 0x00, 0x00,                      // IID240
    0x62, 0xf4, 0xe4, 0x10, 0x81, 0xe1, 0x00, 0x00, 0x10, 0x00,                      // IID241
    0x62, 0xdc, 0xfc, 0x18, 0x81, 0xe2, 0x00, 0x00, 0x10, 0x00,                      // IID242
    0x62, 0xd4, 0xe4, 0x14, 0x81, 0xe5, 0x00, 0x00, 0x01, 0x00,                      // IID243
    0x62, 0xfc, 0xfc, 0x1c, 0x81, 0xe0, 0x00, 0x00, 0x01, 0x00,                      // IID244
    0x62, 0xec, 0xfc, 0x08, 0x69, 0xc6, 0x00, 0x00, 0x00, 0x10,                      // IID245
    0x62, 0xdc, 0xfc, 0x08, 0x69, 0xc3, 0x00, 0x00, 0x00, 0x10,                      // IID246
    0x62, 0xfc, 0xfc, 0x0c, 0x69, 0xc8, 0x00, 0x00, 0x00, 0x01,                      // IID247
    0x62, 0xfc, 0xfc, 0x0c, 0x69, 0xc4, 0x00, 0x00, 0x00, 0x01,                      // IID248
    0x62, 0xfc, 0xd4, 0x10, 0x83, 0xcf, 0x01,                                        // IID249
    0x62, 0xd4, 0xfc, 0x18, 0x83, 0xca, 0x01,                                        // IID250
    0x62, 0xd4, 0xd4, 0x14, 0x81, 0xcc, 0x00, 0x00, 0x10, 0x00,                      // IID251
    0x62, 0xd4, 0xfc, 0x1c, 0x81, 0xca, 0x00, 0x00, 0x10, 0x00,                      // IID252
    0x62, 0xdc, 0xbc, 0x18, 0xc1, 0xc6, 0x10,                                        // IID253
    0x62, 0xd4, 0xfc, 0x18, 0xc1, 0xc3, 0x10,                                        // IID254
    0x62, 0xdc, 0x94, 0x1c, 0xc1, 0xc6, 0x02,                                        // IID255
    0x62, 0xdc, 0xfc, 0x1c, 0xc1, 0xc4, 0x02,                                        // IID256
    0x62, 0xfc, 0xc4, 0x10, 0xd1, 0xcc,                                              // IID257
    0x62, 0xdc, 0xfc, 0x18, 0xd1, 0xc9,                                              // IID258
    0x62, 0xdc, 0xa4, 0x14, 0xd1, 0xcd,                                              // IID259
    0x62, 0xd4, 0xfc, 0x1c, 0xd1, 0xc8,                                              // IID260
    0x62, 0xdc, 0xd4, 0x10, 0xc1, 0xe3, 0x02,                                        // IID261
    0x62, 0xdc, 0xfc, 0x18, 0xc1, 0xe3, 0x02,                                        // IID262
    0x62, 0xd4, 0xb4, 0x14, 0xc1, 0xe1, 0x08,                                        // IID263
    0x62, 0xdc, 0xfc, 0x1c, 0xc1, 0xe3, 0x08,                                        // IID264
    0x62, 0xf4, 0xfc, 0x10, 0xc1, 0xf9, 0x02,                                        // IID265
    0x62, 0xd4, 0xfc, 0x18, 0xc1, 0xfc, 0x02,                                        // IID266
    0x62, 0xf4, 0xb4, 0x14, 0xc1, 0xfb, 0x02,                                        // IID267
    0x62, 0xfc, 0xfc, 0x1c, 0xc1, 0xf9, 0x02,                                        // IID268
    0x62, 0xd4, 0xb4, 0x10, 0xc1, 0xe4, 0x08,                                        // IID269
    0x62, 0xdc, 0xfc, 0x18, 0xc1, 0xe6, 0x08,                                        // IID270
    0x62, 0xdc, 0xec, 0x1c, 0xd1, 0xe1,                                              // IID271
    0x62, 0xdc, 0xfc, 0x1c, 0xd1, 0xe5,                                              // IID272
    0x62, 0xf4, 0x9c, 0x10, 0xc1, 0xe9, 0x04,                                        // IID273
    0x62, 0xfc, 0xfc, 0x18, 0xc1, 0xec, 0x04,                                        // IID274
    0x62, 0xdc, 0xb4, 0x1c, 0xc1, 0xee, 0x04,                                        // IID275
    0x62, 0xd4, 0xfc, 0x1c, 0xc1, 0xe8, 0x04,                                        // IID276
    0x62, 0xfc, 0x9c, 0x18, 0x81, 0xed, 0x00, 0x00, 0x10, 0x00,                      // IID277
    0x62, 0xd4, 0xfc, 0x18, 0x81, 0xec, 0x00, 0x00, 0x10, 0x00,                      // IID278
    0x62, 0xd4, 0xfc, 0x14, 0x81, 0xef, 0x00, 0x10, 0x00, 0x00,                      // IID279
    0x62, 0xfc, 0xfc, 0x1c, 0x81, 0xe9, 0x00, 0x10, 0x00, 0x00,                      // IID280
    0x62, 0xf4, 0xbc, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,                      // IID281
    0x62, 0xf4, 0xfc, 0x18, 0x81, 0xf1, 0x00, 0x00, 0x10, 0x00,                      // IID282
    0x62, 0xfc, 0x9c, 0x14, 0x81, 0xf1, 0x00, 0x10, 0x00, 0x00,                      // IID283
    0x62, 0xdc, 0xfc, 0x1c, 0x81, 0xf2, 0x00, 0x10, 0x00, 0x00,                      // IID284
    0x62, 0xd4, 0xb4, 0x10, 0x81, 0xc8, 0x00, 0x00, 0x00, 0x10,                      // IID285
    0x62, 0xd4, 0xfc, 0x18, 0x81, 0xca, 0x00, 0x00, 0x00, 0x10,                      // IID286
    0x62, 0xd4, 0xbc, 0x18, 0x81, 0xc9, 0x00, 0x00, 0x10, 0x00,                      // IID287
    0x62, 0xd4, 0xfc, 0x18, 0x81, 0xcd, 0x00, 0x00, 0x10, 0x00,                      // IID288
    0x62, 0xfc, 0x84, 0x10, 0x81, 0xeb, 0x00, 0x00, 0x10, 0x00,                      // IID289
    0x62, 0xfc, 0xfc, 0x18, 0x81, 0xef, 0x00, 0x00, 0x10, 0x00,                      // IID290
    0x62, 0xd4, 0xcc, 0x14, 0x81, 0xef, 0x00, 0x00, 0x04, 0x00,                      // IID291
    0x62, 0xdc, 0xfc, 0x1c, 0x81, 0xe9, 0x00, 0x00, 0x04, 0x00,                      // IID292
    0x4d, 0x03, 0xc2,                                                                // IID293
    0x62, 0x54, 0xbc, 0x1c, 0x03, 0xc2,                                              // IID294
    0x66, 0x4d, 0x0f, 0x38, 0xf6, 0xc2,                                              // IID295
    0xf3, 0x4d, 0x0f, 0x38, 0xf6, 0xc2,                                              // IID296
    0x4d, 0x23, 0xc2,                                                                // IID297
    0x62, 0x54, 0xbc, 0x1c, 0x23, 0xc2,                                              // IID298
    0x4d, 0x0f, 0xaf, 0xc2,                                                          // IID299
    0x62, 0x54, 0xbc, 0x1c, 0xaf, 0xc2,                                              // IID300
    0x4d, 0x0b, 0xc2,                                                                // IID301
    0x62, 0x54, 0xbc, 0x1c, 0x0b, 0xc2,                                              // IID302
    0x4d, 0x2b, 0xc2,                                                                // IID303
    0x62, 0x54, 0xbc, 0x1c, 0x2b, 0xc2,                                              // IID304
    0x4d, 0x33, 0xc2,                                                                // IID305
    0x62, 0x54, 0xbc, 0x1c, 0x33, 0xc2,                                              // IID306
#endif // _LP64
  };

  static const unsigned int insns_lens[] =
  {
#ifdef _LP64
    3,    // IID0
    3,    // IID1
    3,    // IID2
    3,    // IID3
    6,    // IID4
    3,    // IID5
    6,    // IID6
    4,    // IID7
    6,    // IID8
    3,    // IID9
    6,    // IID10
    4,    // IID11
    6,    // IID12
    4,    // IID13
    6,    // IID14
    3,    // IID15
    6,    // IID16
    3,    // IID17
    6,    // IID18
    3,    // IID19
    3,    // IID20
    4,    // IID21
    5,    // IID22
    3,    // IID23
    3,    // IID24
    5,    // IID25
    5,    // IID26
    3,    // IID27
    3,    // IID28
    3,    // IID29
    3,    // IID30
    3,    // IID31
    4,    // IID32
    4,    // IID33
    4,    // IID34
    3,    // IID35
    3,    // IID36
    9,    // IID37
    9,    // IID38
    9,    // IID39
    9,    // IID40
    9,    // IID41
    9,    // IID42
    7,    // IID43
    9,    // IID44
    11,   // IID45
    13,   // IID46
    13,   // IID47
    9,    // IID48
    9,    // IID49
    13,   // IID50
    8,    // IID51
    13,   // IID52
    13,   // IID53
    13,   // IID54
    12,   // IID55
    12,   // IID56
    9,    // IID57
    9,    // IID58
    9,    // IID59
    10,   // IID60
    9,    // IID61
    9,    // IID62
    9,    // IID63
    10,   // IID64
    9,    // IID65
    9,    // IID66
    9,    // IID67
    8,    // IID68
    9,    // IID69
    9,    // IID70
    10,   // IID71
    9,    // IID72
    8,    // IID73
    5,    // IID74
    7,    // IID75
    4,    // IID76
    8,    // IID77
    4,    // IID78
    4,    // IID79
    5,    // IID80
    5,    // IID81
    4,    // IID82
    4,    // IID83
    8,    // IID84
    5,    // IID85
    5,    // IID86
    7,    // IID87
    8,    // IID88
    7,    // IID89
    11,   // IID90
    5,    // IID91
    8,    // IID92
    8,    // IID93
    7,    // IID94
    9,    // IID95
    9,    // IID96
    9,    // IID97
    9,    // IID98
    8,    // IID99
    9,    // IID100
    9,    // IID101
    9,    // IID102
    9,    // IID103
    9,    // IID104
    8,    // IID105
    9,    // IID106
    8,    // IID107
    9,    // IID108
    9,    // IID109
    9,    // IID110
    3,    // IID111
    3,    // IID112
    4,    // IID113
    4,    // IID114
    3,    // IID115
    3,    // IID116
    3,    // IID117
    3,    // IID118
    4,    // IID119
    4,    // IID120
    3,    // IID121
    3,    // IID122
    4,    // IID123
    4,    // IID124
    4,    // IID125
    3,    // IID126
    3,    // IID127
    9,    // IID128
    8,    // IID129
    9,    // IID130
    9,    // IID131
    8,    // IID132
    8,    // IID133
    9,    // IID134
    9,    // IID135
    13,   // IID136
    8,    // IID137
    5,    // IID138
    5,    // IID139
    6,    // IID140
    6,    // IID141
    6,    // IID142
    6,    // IID143
    9,    // IID144
    9,    // IID145
    8,    // IID146
    9,    // IID147
    4,    // IID148
    4,    // IID149
    4,    // IID150
    4,    // IID151
    8,    // IID152
    6,    // IID153
    6,    // IID154
    6,    // IID155
    6,    // IID156
    6,    // IID157
    6,    // IID158
    6,    // IID159
    6,    // IID160
    11,   // IID161
    11,   // IID162
    6,    // IID163
    6,    // IID164
    6,    // IID165
    6,    // IID166
    6,    // IID167
    6,    // IID168
    6,    // IID169
    6,    // IID170
    6,    // IID171
    6,    // IID172
    6,    // IID173
    6,    // IID174
    6,    // IID175
    6,    // IID176
    6,    // IID177
    6,    // IID178
    6,    // IID179
    6,    // IID180
    6,    // IID181
    6,    // IID182
    6,    // IID183
    6,    // IID184
    6,    // IID185
    6,    // IID186
    6,    // IID187
    6,    // IID188
    11,   // IID189
    10,   // IID190
    11,   // IID191
    11,   // IID192
    10,   // IID193
    10,   // IID194
    11,   // IID195
    10,   // IID196
    11,   // IID197
    11,   // IID198
    11,   // IID199
    11,   // IID200
    11,   // IID201
    11,   // IID202
    11,   // IID203
    11,   // IID204
    11,   // IID205
    11,   // IID206
    11,   // IID207
    11,   // IID208
    11,   // IID209
    11,   // IID210
    10,   // IID211
    11,   // IID212
    11,   // IID213
    11,   // IID214
    11,   // IID215
    11,   // IID216
    11,   // IID217
    11,   // IID218
    15,   // IID219
    14,   // IID220
    15,   // IID221
    12,   // IID222
    12,   // IID223
    12,   // IID224
    15,   // IID225
    15,   // IID226
    10,   // IID227
    12,   // IID228
    12,   // IID229
    12,   // IID230
    11,   // IID231
    11,   // IID232
    15,   // IID233
    14,   // IID234
    11,   // IID235
    12,   // IID236
    10,   // IID237
    10,   // IID238
    10,   // IID239
    10,   // IID240
    10,   // IID241
    10,   // IID242
    10,   // IID243
    10,   // IID244
    10,   // IID245
    10,   // IID246
    10,   // IID247
    10,   // IID248
    7,    // IID249
    7,    // IID250
    10,   // IID251
    10,   // IID252
    7,    // IID253
    7,    // IID254
    7,    // IID255
    7,    // IID256
    6,    // IID257
    6,    // IID258
    6,    // IID259
    6,    // IID260
    7,    // IID261
    7,    // IID262
    7,    // IID263
    7,    // IID264
    7,    // IID265
    7,    // IID266
    7,    // IID267
    7,    // IID268
    7,    // IID269
    7,    // IID270
    6,    // IID271
    6,    // IID272
    7,    // IID273
    7,    // IID274
    7,    // IID275
    7,    // IID276
    10,   // IID277
    10,   // IID278
    10,   // IID279
    10,   // IID280
    10,   // IID281
    10,   // IID282
    10,   // IID283
    10,   // IID284
    10,   // IID285
    10,   // IID286
    10,   // IID287
    10,   // IID288
    10,   // IID289
    10,   // IID290
    10,   // IID291
    10,   // IID292
    3,    // IID293
    6,    // IID294
    6,    // IID295
    6,    // IID296
    3,    // IID297
    6,    // IID298
    4,    // IID299
    6,    // IID300
    3,    // IID301
    6,    // IID302
    3,    // IID303
    6,    // IID304
    3,    // IID305
    6,    // IID306
#endif // _LP64
  };

  static const char* insns_strs[] =
  {
#ifdef _LP64
    "__ subl(r8, r10);",                                                                  // IID0
    "__ addl(r8, r10);",                                                                  // IID1
    "__ andl(r8, r10);",                                                                  // IID2
    "__ eaddl(r8, r8, r10, false);",                                                      // IID3
    "__ eaddl(r8, r8, r10, true);",                                                       // IID4
    "__ eandl(r8, r8, r10, false);",                                                      // IID5
    "__ eandl(r8, r8, r10, true);",                                                       // IID6
    "__ eimull(r8, r8, r10, false);",                                                     // IID7
    "__ eimull(r8, r8, r10, true);",                                                      // IID8
    "__ eorl(r8, r8, r10, false);",                                                       // IID9
    "__ eorl(r8, r8, r10, true);",                                                        // IID10
    "__ eshldl(r8, r8, r10, false);",                                                     // IID11
    "__ eshldl(r8, r8, r10, true);",                                                      // IID12
    "__ eshrdl(r8, r8, r10, false);",                                                     // IID13
    "__ eshrdl(r8, r8, r10, true);",                                                      // IID14
    "__ esubl(r8, r8, r10, false);",                                                      // IID15
    "__ esubl(r8, r8, r10, true);",                                                       // IID16
    "__ exorl(r8, r8, r10, false);",                                                      // IID17
    "__ exorl(r8, r8, r10, true);",                                                       // IID18
    "__ adcq(r8, r10);",                                                                  // IID19
    "__ cmpq(r8, r10);",                                                                  // IID20
    "__ imulq(r8, r10);",                                                                 // IID21
    "__ popcntq(r8, r10);",                                                               // IID22
    "__ sbbq(r8, r10);",                                                                  // IID23
    "__ subq(r8, r10);",                                                                  // IID24
    "__ tzcntq(r8, r10);",                                                                // IID25
    "__ lzcntq(r8, r10);",                                                                // IID26
    "__ addq(r8, r10);",                                                                  // IID27
    "__ andq(r8, r10);",                                                                  // IID28
    "__ orq(r8, r10);",                                                                   // IID29
    "__ xorq(r8, r10);",                                                                  // IID30
    "__ movq(r8, r10);",                                                                  // IID31
    "__ bsfq(r8, r10);",                                                                  // IID32
    "__ bsrq(r8, r10);",                                                                  // IID33
    "__ btq(r8, r10);",                                                                   // IID34
    "__ xchgq(r8, r10);",                                                                 // IID35
    "__ testq(r8, r10);",                                                                 // IID36
    "__ addq(Address(r22, r21, (Address::ScaleFactor)1, -0x60d5db3d), r12);",             // IID37
    "__ andq(Address(r16, rcx, (Address::ScaleFactor)0, +0x66115bca), r8);",              // IID38
    "__ cmpq(Address(r30, rbx, (Address::ScaleFactor)0, -0x62330d69), r14);",             // IID39
    "__ orq(Address(r26, r18, (Address::ScaleFactor)2, +0xb4e8e1e), r15);",               // IID40
    "__ xorq(Address(r20, r29, (Address::ScaleFactor)0, +0x6f3ca568), r17);",             // IID41
    "__ subq(Address(r21, r11, (Address::ScaleFactor)2, +0x6100ff6d), r24);",             // IID42
    "__ movq(Address(rbx, -0x950b199), r14);",                                            // IID43
    "__ xaddq(Address(r20, r30, (Address::ScaleFactor)0, +0x32d8d976), r11);",            // IID44
    "__ andq(Address(r14, -0x3caddbe1), 256);",                                           // IID45
    "__ addq(Address(rcx, r30, (Address::ScaleFactor)1, -0x78b1f32a), 1048576);",         // IID46
    "__ cmpq(Address(r14, r23, (Address::ScaleFactor)3, -0x147b5338), 256);",             // IID47
    "__ sarq(Address(r13, r15, (Address::ScaleFactor)2, -0x2006120c), 4);",               // IID48
    "__ salq(Address(rcx, r11, (Address::ScaleFactor)3, +0xab498c3), 2);",                // IID49
    "__ sbbq(Address(r23, r30, (Address::ScaleFactor)0, +0x4d806ea0), 268435456);",       // IID50
    "__ shrq(Address(r12, r9, (Address::ScaleFactor)3, -0x2bf5b0e9), 1);",                // IID51
    "__ subq(Address(r16, r16, (Address::ScaleFactor)1, -0x2a7d9754), 268435456);",       // IID52
    "__ xorq(Address(r29, r30, (Address::ScaleFactor)2, -0x55a7da9d), 1048576);",         // IID53
    "__ orq(Address(r13, r26, (Address::ScaleFactor)1, -0x5c442d70), 1048576);",          // IID54
    "__ movq(Address(r9, r8, (Address::ScaleFactor)0, -0x35b475e4), 268435456);",         // IID55
    "__ testq(Address(r14, r8, (Address::ScaleFactor)2, -0x269e7e5c), -256);",            // IID56
    "__ addq(r17, Address(r16, r23, (Address::ScaleFactor)1, -0x6ba450dc));",             // IID57
    "__ andq(r29, Address(r11, r27, (Address::ScaleFactor)3, +0x5f6dea6b));",             // IID58
    "__ cmpq(r15, Address(r22, r29, (Address::ScaleFactor)0, -0x41d87b39));",             // IID59
    "__ lzcntq(r25, Address(r23, r23, (Address::ScaleFactor)1, +0x4d226b6b));",           // IID60
    "__ orq(r30, Address(r9, r24, (Address::ScaleFactor)2, -0x597254e4));",               // IID61
    "__ adcq(r29, Address(r12, r17, (Address::ScaleFactor)1, -0x2f70fe4b));",             // IID62
    "__ imulq(r22, Address(r9, r18, (Address::ScaleFactor)1, +0x33be42b6));",             // IID63
    "__ popcntq(r18, Address(r18, r28, (Address::ScaleFactor)2, +0x19b94ca2));",          // IID64
    "__ sbbq(r16, Address(r22, r17, (Address::ScaleFactor)1, +0x41a9f28a));",             // IID65
    "__ subq(r28, Address(r10, r18, (Address::ScaleFactor)1, -0x2eb73c6));",              // IID66
    "__ tzcntq(r24, Address(rbx, +0x2931e964));",                                         // IID67
    "__ xorq(rcx, Address(rcx, r12, (Address::ScaleFactor)1, +0xfb953d0));",              // IID68
    "__ movq(r27, Address(r26, r29, (Address::ScaleFactor)0, +0x5e2d4573));",             // IID69
    "__ leaq(r9, Address(r28, -0x52e1de4a));",                                            // IID70
    "__ cvttsd2siq(r20, Address(r15, r28, (Address::ScaleFactor)0, -0x50cbb6ab));",       // IID71
    "__ xchgq(rcx, Address(r17, r22, (Address::ScaleFactor)3, +0x4cede69d));",            // IID72
    "__ testq(r19, Address(r30, -0x1a8d9f97));",                                          // IID73
    "__ addq(r22, 16);",                                                                  // IID74
    "__ andq(r11, 16777216);",                                                            // IID75
    "__ adcq(rdx, 1);",                                                                   // IID76
    "__ cmpq(r21, 1048576);",                                                             // IID77
    "__ rclq(rcx, 8);",                                                                   // IID78
    "__ rcrq(rdx, 8);",                                                                   // IID79
    "__ rolq(r24, 8);",                                                                   // IID80
    "__ rorq(r16, 16);",                                                                  // IID81
    "__ sarq(rbx, 8);",                                                                   // IID82
    "__ salq(r29, 1);",                                                                   // IID83
    "__ sbbq(r16, 16777216);",                                                            // IID84
    "__ shlq(r31, 4);",                                                                   // IID85
    "__ shrq(r21, 8);",                                                                   // IID86
    "__ subq(r8, 65536);",                                                                // IID87
    "__ xorq(r31, 4096);",                                                                // IID88
    "__ movq(r15, 268435456);",                                                           // IID89
    "__ mov64(r22, 17179869184);",                                                        // IID90
    "__ btq(r8, 1);",                                                                     // IID91
    "__ testq(r20, -16);",                                                                // IID92
    "__ orq_imm32(r29, 65536);",                                                          // IID93
    "__ subq_imm32(r9, 4194304);",                                                        // IID94
    "__ cmovq(Assembler::Condition::overflow, r16, Address(r10, rcx, (Address::ScaleFactor)2, +0x2ec26eed));", // IID95
    "__ cmovq(Assembler::Condition::noOverflow, r14, Address(r10, rbx, (Address::ScaleFactor)2, -0x133fff6e));", // IID96
    "__ cmovq(Assembler::Condition::below, r24, Address(r21, r22, (Address::ScaleFactor)0, -0x288426e1));", // IID97
    "__ cmovq(Assembler::Condition::aboveEqual, r28, Address(r23, rcx, (Address::ScaleFactor)3, +0x1fdf4486));", // IID98
    "__ cmovq(Assembler::Condition::zero, r13, Address(r22, +0x5721c974));",              // IID99
    "__ cmovq(Assembler::Condition::notZero, r21, Address(rbx, r24, (Address::ScaleFactor)1, -0x7efba0fe));", // IID100
    "__ cmovq(Assembler::Condition::belowEqual, r10, Address(rdx, r14, (Address::ScaleFactor)0, +0x1f9fa862));", // IID101
    "__ cmovq(Assembler::Condition::above, r12, Address(r11, r8, (Address::ScaleFactor)1, +0x3840466e));", // IID102
    "__ cmovq(Assembler::Condition::negative, r28, Address(r28, r11, (Address::ScaleFactor)0, +0x4aea6a91));", // IID103
    "__ cmovq(Assembler::Condition::positive, r19, Address(r8, r27, (Address::ScaleFactor)3, -0x7d0eb0fa));", // IID104
    "__ cmovq(Assembler::Condition::parity, rcx, Address(r17, +0x6dfb7df8));",            // IID105
    "__ cmovq(Assembler::Condition::noParity, rdx, Address(r19, r22, (Address::ScaleFactor)0, +0x7e90f232));", // IID106
    "__ cmovq(Assembler::Condition::less, r17, Address(r16, -0x1bb206d4));",              // IID107
    "__ cmovq(Assembler::Condition::greaterEqual, r16, Address(r27, r24, (Address::ScaleFactor)3, -0x64cf395e));", // IID108
    "__ cmovq(Assembler::Condition::lessEqual, r22, Address(r11, r29, (Address::ScaleFactor)3, -0x185b1ffd));", // IID109
    "__ cmovq(Assembler::Condition::greater, r13, Address(r24, r27, (Address::ScaleFactor)0, -0x4d404400));", // IID110
    "__ call(r14);",                                                                      // IID111
    "__ divq(rcx);",                                                                      // IID112
    "__ idivq(r22);",                                                                     // IID113
    "__ imulq(r27);",                                                                     // IID114
    "__ mulq(rdx);",                                                                      // IID115
    "__ negq(rbx);",                                                                      // IID116
    "__ notq(rcx);",                                                                      // IID117
    "__ rolq(r13);",                                                                      // IID118
    "__ rorq(r27);",                                                                      // IID119
    "__ sarq(r22);",                                                                      // IID120
    "__ salq(r10);",                                                                      // IID121
    "__ shlq(r15);",                                                                      // IID122
    "__ shrq(r19);",                                                                      // IID123
    "__ incrementq(r18);",                                                                // IID124
    "__ decrementq(r27);",                                                                // IID125
    "__ pushp(r16);",                                                                     // IID126
    "__ popp(r8);",                                                                       // IID127
    "__ call(Address(r28, rdx, (Address::ScaleFactor)1, +0x6322f812));",                  // IID128
    "__ mulq(Address(r27, +0x10494f9c));",                                                // IID129
    "__ negq(Address(r11, r28, (Address::ScaleFactor)2, +0x782c36d));",                   // IID130
    "__ sarq(Address(r20, r26, (Address::ScaleFactor)0, +0x737a1fb7));",                  // IID131
    "__ salq(Address(rbx, r15, (Address::ScaleFactor)0, +0x77a02e0));",                   // IID132
    "__ shrq(Address(r23, +0x6669fd21));",                                                // IID133
    "__ incrementq(Address(r31, r27, (Address::ScaleFactor)0, -0x73839307));",            // IID134
    "__ decrementq(Address(r17, r18, (Address::ScaleFactor)3, -0x51a412d0));",            // IID135
    "__ imulq(r17, Address(r25, r12, (Address::ScaleFactor)1, +0x3087419d), 256);",       // IID136
    "__ imulq(r21, r19, 268435456);",                                                     // IID137
    "__ shldq(r20, r22, 4);",                                                             // IID138
    "__ shrdq(r24, r8, 4);",                                                              // IID139
    "__ pop2(r16, r27);",                                                                 // IID140
    "__ pop2p(r24, r21);",                                                                // IID141
    "__ push2(r31, rdx);",                                                                // IID142
    "__ push2p(r9, r14);",                                                                // IID143
    "__ movzbq(r11, Address(r30, rdx, (Address::ScaleFactor)1, -0xfc990ec));",            // IID144
    "__ movzwq(rcx, Address(r10, rbx, (Address::ScaleFactor)1, -0x376d37c6));",           // IID145
    "__ movsbq(r8, Address(rbx, +0x6909ad63));",                                          // IID146
    "__ movswq(r16, Address(r9, r17, (Address::ScaleFactor)2, -0x6dcba209));",            // IID147
    "__ movzbq(r8, r10);",                                                                // IID148
    "__ movzwq(r8, r10);",                                                                // IID149
    "__ movsbq(r8, r10);",                                                                // IID150
    "__ movswq(r8, r10);",                                                                // IID151
    "__ cmpxchgq(r13, Address(r11, +0x955a68e));",                                        // IID152
    "__ eidivq(r17, false);",                                                             // IID153
    "__ eidivq(r29, true);",                                                              // IID154
    "__ edivq(r9, false);",                                                               // IID155
    "__ edivq(r10, true);",                                                               // IID156
    "__ eimulq(r9, false);",                                                              // IID157
    "__ eimulq(r13, true);",                                                              // IID158
    "__ emulq(r8, false);",                                                               // IID159
    "__ emulq(r21, true);",                                                               // IID160
    "__ emulq(Address(r30, r24, (Address::ScaleFactor)3, +0x75458301), false);",          // IID161
    "__ emulq(Address(r17, r22, (Address::ScaleFactor)2, -0x38020962), true);",           // IID162
    "__ eimulq(r8, r10, false);",                                                         // IID163
    "__ eimulq(r8, r10, true);",                                                          // IID164
    "__ elzcntq(r8, r10, false);",                                                        // IID165
    "__ elzcntq(r8, r10, true);",                                                         // IID166
    "__ enegq(r8, r10, false);",                                                          // IID167
    "__ enegq(r8, r10, true);",                                                           // IID168
    "__ epopcntq(r8, r10, false);",                                                       // IID169
    "__ epopcntq(r8, r10, true);",                                                        // IID170
    "__ erolq(r8, r10, false);",                                                          // IID171
    "__ erolq(r8, r10, true);",                                                           // IID172
    "__ erorq(r8, r10, false);",                                                          // IID173
    "__ erorq(r8, r10, true);",                                                           // IID174
    "__ esalq(r8, r10, false);",                                                          // IID175
    "__ esalq(r8, r10, true);",                                                           // IID176
    "__ esarq(r8, r10, false);",                                                          // IID177
    "__ esarq(r8, r10, true);",                                                           // IID178
    "__ edecq(r8, r10, false);",                                                          // IID179
    "__ edecq(r8, r10, true);",                                                           // IID180
    "__ eincq(r8, r10, false);",                                                          // IID181
    "__ eincq(r8, r10, true);",                                                           // IID182
    "__ eshlq(r8, r10, false);",                                                          // IID183
    "__ eshlq(r8, r10, true);",                                                           // IID184
    "__ eshrq(r8, r10, false);",                                                          // IID185
    "__ eshrq(r8, r10, true);",                                                           // IID186
    "__ etzcntq(r8, r10, false);",                                                        // IID187
    "__ etzcntq(r8, r10, true);",                                                         // IID188
    "__ eimulq(r13, Address(rdx, r25, (Address::ScaleFactor)3, -0x116104c4), false);",    // IID189
    "__ eimulq(r10, Address(rbx, -0x57b5facc), true);",                                   // IID190
    "__ elzcntq(r28, Address(r28, -0x736423af), false);",                                 // IID191
    "__ elzcntq(r14, Address(r21, r27, (Address::ScaleFactor)1, -0x40f81cbc), true);",    // IID192
    "__ enegq(r9, Address(r17, +0x4535892), false);",                                     // IID193
    "__ enegq(r22, Address(r14, -0x69a6ac4c), true);",                                    // IID194
    "__ epopcntq(r25, Address(r24, r16, (Address::ScaleFactor)3, +0x60d63863), false);",  // IID195
    "__ epopcntq(r11, Address(rcx, +0x4497f29), true);",                                  // IID196
    "__ esalq(rcx, Address(r13, r17, (Address::ScaleFactor)3, +0x2a779b38), false);",     // IID197
    "__ esalq(r22, Address(r27, r20, (Address::ScaleFactor)0, -0x72c1e2ea), true);",      // IID198
    "__ esarq(r9, Address(rcx, r15, (Address::ScaleFactor)2, +0x7d962028), false);",      // IID199
    "__ esarq(r28, Address(r20, -0x54b21089), true);",                                    // IID200
    "__ edecq(r23, Address(r22, r8, (Address::ScaleFactor)2, +0x199d009c), false);",      // IID201
    "__ edecq(r11, Address(r9, r29, (Address::ScaleFactor)1, -0x7f781439), true);",       // IID202
    "__ eincq(r24, Address(r22, r15, (Address::ScaleFactor)2, +0x29c9366b), false);",     // IID203
    "__ eincq(r31, Address(r11, r31, (Address::ScaleFactor)0, +0x5c1275a0), true);",      // IID204
    "__ eshrq(r13, Address(r29, r20, (Address::ScaleFactor)1, +0x31881452), false);",     // IID205
    "__ eshrq(r14, Address(r15, r28, (Address::ScaleFactor)2, -0x40ea9e3), true);",       // IID206
    "__ etzcntq(r14, Address(r17, r24, (Address::ScaleFactor)3, -0x2d71a800), false);",   // IID207
    "__ etzcntq(r18, Address(r23, r31, (Address::ScaleFactor)1, -0x5833732b), true);",    // IID208
    "__ eaddq(r30, Address(rbx, r23, (Address::ScaleFactor)1, -0x5cb6670d), r24, false);", // IID209
    "__ eaddq(r20, Address(rcx, r16, (Address::ScaleFactor)1, +0x43e544fd), r11, true);", // IID210
    "__ eandq(r24, Address(r16, -0xd721929), r21, false);",                               // IID211
    "__ eandq(r8, Address(r14, r31, (Address::ScaleFactor)3, +0x1aa5948), r9, true);",    // IID212
    "__ eorq(r13, Address(r29, r15, (Address::ScaleFactor)1, +0x2516c080), r12, false);", // IID213
    "__ eorq(r27, Address(r9, r29, (Address::ScaleFactor)1, -0x3b18bb22), r27, true);",   // IID214
    "__ esubq(r15, Address(r25, r25, (Address::ScaleFactor)2, +0x3e3f816d), r19, false);", // IID215
    "__ esubq(r13, Address(r30, r12, (Address::ScaleFactor)2, -0x7e29829d), r17, true);", // IID216
    "__ exorq(r23, Address(r25, r22, (Address::ScaleFactor)1, -0x3d379b56), r10, false);", // IID217
    "__ exorq(r11, Address(r14, rcx, (Address::ScaleFactor)0, +0x55c49163), r25, true);", // IID218
    "__ eaddq(r15, Address(r9, r16, (Address::ScaleFactor)3, +0x15c5eb04), 65536, false);", // IID219
    "__ eaddq(r16, Address(r11, -0x6f7ce950), 65536, true);",                             // IID220
    "__ eandq(r29, Address(r15, r20, (Address::ScaleFactor)2, -0x477ef1d2), 65536, false);", // IID221
    "__ eandq(r23, Address(r27, r29, (Address::ScaleFactor)2, +0x3b16b63a), 16, true);",  // IID222
    "__ eimulq(r27, Address(rbx, r15, (Address::ScaleFactor)0, +0x233d212d), 16, false);", // IID223
    "__ eimulq(r11, Address(r18, rdx, (Address::ScaleFactor)1, +0x1bb63faa), 16, true);", // IID224
    "__ eorq(r26, Address(r28, rbx, (Address::ScaleFactor)1, -0x4712c68a), 1048576, false);", // IID225
    "__ eorq(r9, Address(r31, r28, (Address::ScaleFactor)3, -0x30bf8b7f), 1048576, true);", // IID226
    "__ esalq(r25, Address(r9, -0x9c80fe2), 1, false);",                                  // IID227
    "__ esalq(r27, Address(r19, r18, (Address::ScaleFactor)3, -0x1c7c7f06), 16, true);",  // IID228
    "__ esarq(r28, Address(r13, r26, (Address::ScaleFactor)3, -0x602e1b3d), 4, false);",  // IID229
    "__ esarq(r15, Address(r30, r18, (Address::ScaleFactor)3, -0x6821bb43), 16, true);",  // IID230
    "__ eshrq(r11, Address(r31, -0x2f9918f6), 16, false);",                               // IID231
    "__ eshrq(r19, Address(r16, r30, (Address::ScaleFactor)1, -0x27b89e0d), 1, true);",   // IID232
    "__ esubq(r31, Address(rbx, r28, (Address::ScaleFactor)1, +0x18051a68), 65536, false);", // IID233
    "__ esubq(r11, Address(r22, +0x765904a6), 4096, true);",                              // IID234
    "__ exorq(r17, Address(r13, +0x49377e09), 1, false);",                                // IID235
    "__ exorq(r12, Address(r22, r12, (Address::ScaleFactor)1, +0x422adcae), 1, true);",   // IID236
    "__ eaddq(r13, r13, 1048576, false);",                                                // IID237
    "__ eaddq(rax, r20, 1048576, false);",                                                // IID238
    "__ eaddq(r29, r14, 256, true);",                                                     // IID239
    "__ eaddq(rax, r25, 256, true);",                                                     // IID240
    "__ eandq(r19, rcx, 1048576, false);",                                                // IID241
    "__ eandq(rax, r26, 1048576, false);",                                                // IID242
    "__ eandq(r19, r13, 65536, true);",                                                   // IID243
    "__ eandq(rax, r16, 65536, true);",                                                   // IID244
    "__ eimulq(r16, r22, 268435456, false);",                                             // IID245
    "__ eimulq(rax, r27, 268435456, false);",                                             // IID246
    "__ eimulq(rcx, r16, 16777216, true);",                                               // IID247
    "__ eimulq(rax, r20, 16777216, true);",                                               // IID248
    "__ eorq(r21, r23, 1, false);",                                                       // IID249
    "__ eorq(rax, r10, 1, false);",                                                       // IID250
    "__ eorq(r21, r12, 1048576, true);",                                                  // IID251
    "__ eorq(rax, r10, 1048576, true);",                                                  // IID252
    "__ erolq(r8, r30, 16, false);",                                                      // IID253
    "__ erolq(rax, r11, 16, false);",                                                     // IID254
    "__ erolq(r13, r30, 2, true);",                                                       // IID255
    "__ erolq(rax, r28, 2, true);",                                                       // IID256
    "__ erorq(r23, r20, 1, false);",                                                      // IID257
    "__ erorq(rax, r25, 1, false);",                                                      // IID258
    "__ erorq(r27, r29, 1, true);",                                                       // IID259
    "__ erorq(rax, r8, 1, true);",                                                        // IID260
    "__ esalq(r21, r27, 2, false);",                                                      // IID261
    "__ esalq(rax, r27, 2, false);",                                                      // IID262
    "__ esalq(r25, r9, 8, true);",                                                        // IID263
    "__ esalq(rax, r27, 8, true);",                                                       // IID264
    "__ esarq(r16, rcx, 2, false);",                                                      // IID265
    "__ esarq(rax, r12, 2, false);",                                                      // IID266
    "__ esarq(r25, rbx, 2, true);",                                                       // IID267
    "__ esarq(rax, r17, 2, true);",                                                       // IID268
    "__ eshlq(r25, r12, 8, false);",                                                      // IID269
    "__ eshlq(rax, r30, 8, false);",                                                      // IID270
    "__ eshlq(rdx, r25, 1, true);",                                                       // IID271
    "__ eshlq(rax, r29, 1, true);",                                                       // IID272
    "__ eshrq(r28, rcx, 4, false);",                                                      // IID273
    "__ eshrq(rax, r20, 4, false);",                                                      // IID274
    "__ eshrq(r9, r30, 4, true);",                                                        // IID275
    "__ eshrq(rax, r8, 4, true);",                                                        // IID276
    "__ esubq(r12, r21, 1048576, false);",                                                // IID277
    "__ esubq(rax, r12, 1048576, false);",                                                // IID278
    "__ esubq(r16, r15, 4096, true);",                                                    // IID279
    "__ esubq(rax, r17, 4096, true);",                                                    // IID280
    "__ exorq(r8, rcx, 1048576, false);",                                                 // IID281
    "__ exorq(rax, rcx, 1048576, false);",                                                // IID282
    "__ exorq(r28, r17, 4096, true);",                                                    // IID283
    "__ exorq(rax, r26, 4096, true);",                                                    // IID284
    "__ eorq_imm32(r25, r8, 268435456, false);",                                          // IID285
    "__ eorq_imm32(rax, r10, 268435456, false);",                                         // IID286
    "__ eorq_imm32(r8, r9, 1048576, false);",                                             // IID287
    "__ eorq_imm32(rax, r13, 1048576, false);",                                           // IID288
    "__ esubq_imm32(r31, r19, 1048576, false);",                                          // IID289
    "__ esubq_imm32(rax, r23, 1048576, false);",                                          // IID290
    "__ esubq_imm32(r22, r15, 262144, true);",                                            // IID291
    "__ esubq_imm32(rax, r25, 262144, true);",                                            // IID292
    "__ eaddq(r8, r8, r10, false);",                                                      // IID293
    "__ eaddq(r8, r8, r10, true);",                                                       // IID294
    "__ eadcxq(r8, r8, r10);",                                                            // IID295
    "__ eadoxq(r8, r8, r10);",                                                            // IID296
    "__ eandq(r8, r8, r10, false);",                                                      // IID297
    "__ eandq(r8, r8, r10, true);",                                                       // IID298
    "__ eimulq(r8, r8, r10, false);",                                                     // IID299
    "__ eimulq(r8, r8, r10, true);",                                                      // IID300
    "__ eorq(r8, r8, r10, false);",                                                       // IID301
    "__ eorq(r8, r8, r10, true);",                                                        // IID302
    "__ esubq(r8, r8, r10, false);",                                                      // IID303
    "__ esubq(r8, r8, r10, true);",                                                       // IID304
    "__ exorq(r8, r8, r10, false);",                                                      // IID305
    "__ exorq(r8, r8, r10, true);",                                                       // IID306
#endif // _LP64
  };
// END  Generated code -- do not edit
