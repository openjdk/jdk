#
# Copyright (c) 1999, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## tool

jar.description=クラスおよびリソースのアーカイブを作成し、個々のクラスまたはリソースをアーカイブから操作または復元します

error.multiple.main.operations=複数の'cuxtid'オプションを指定できません
error.cant.open={0}を開くことができません
error.illegal.option=不正なオプション: {0}
error.unrecognized.option=認識されないオプション: {0}
error.missing.arg=オプション{0}には引数が必要です。
error.bad.file.arg=ファイル引数の解析中にエラーが発生しました
error.bad.option=オプション-{ctxuid}または--validateのいずれかを指定する必要があります。
error.bad.cflag=フラグ'c'ではマニフェストまたは入力ファイルの指定が必要です。
error.bad.uflag=フラグ'u'ではマニフェストか'e'フラグ、または入力ファイルの指定が必要です。
error.bad.eflag='e'フラグと'Main-Class'属性を持つマニフェストは同時に\n指定できません。
error.bad.dflag='-d, --describe-module'オプションでは入力ファイルの指定は不要です
error.bad.reason=不正な理由: {0}、非推奨、削除予定の非推奨または実験的のいずれかである必要があります
error.nosuch.fileordir={0}というファイルまたはディレクトリはありません
error.write.file=既存jarファイルの書込み中にエラーが発生しました
error.create.dir=ディレクトリ{0}を作成できませんでした
error.incorrect.length={0}の処理中に不正な長さがありました
error.create.tempfile=一時ファイルを作成できませんでした
error.extract.multiple.dest.dir='-x'オプションでは複数の'-C'または'--dir'を指定できません
error.extract.pflag.not.allowed='-C'または'--dir'オプションでは'-Px'を指定できません
error.hash.dep=モジュール{0}依存性のハッシュでモジュール{1}がモジュール・パスに見つかりません
error.module.options.without.info=--module-versionまたは--hash-modulesのいずれかでmodule-info.classがありません
error.no.operative.descriptor=リリースの操作ディスクリプタはありません: {0}
error.no.root.descriptor=ルート・モジュールのディスクリプタがありません。--releaseを指定してください
error.unable.derive.automodule=次のモジュール・ディスクリプタを導出できません: {0}
error.unexpected.module-info=予期しないモジュール・ディスクリプタ{0}
error.module.descriptor.not.found=モジュール・ディスクリプタが見つかりません
error.invalid.versioned.module.attribute=モジュール・ディスクリプタ属性{0}が無効です
error.missing.provider=サービス・プロバイダが見つかりません: {0}
error.release.value.notnumber=リリース{0}は有効ではありません
error.release.value.toosmall=リリース{0}は有効ではありません。9以上である必要があります
error.release.unexpected.versioned.entry=リリース{1}で予期しないバージョニング済エントリ{0}
error.date.notvalid=日付{0}が、オプションのタイムゾーンを指定した、有効なISO-8601の拡張オフセットの日時ではありません
error.date.out.of.range=日付{0}が有効な範囲1980-01-01T00:00:02Z to 2099-12-31T23:59:59Zにありません
error.validator.jarfile.exception={0}を検証できません: {1}
error.validator.jarfile.invalid=無効なマルチリリースjarファイル{0}が削除されました
error.validator.bad.entry.name=エントリ名が不正です: {0}
error.validator.version.notnumber=エントリ名: {0}にバージョン番号がありません
error.validator.entryname.tooshort=エントリ名: {0}が短すぎます。ディレクトリではありません
error.validator.isolated.nested.class=エントリ: {0}は、分離型のネストされたクラスです
error.validator.new.public.class=エントリ: {0}には、ベース・エントリに存在しない新しいpublicクラスが含まれます
error.validator.incompatible.class.version=エントリ: {0}には、以前のバージョンと互換性のないクラス・バージョンが含まれます
error.validator.different.api=エントリ: {0}には、以前のバージョンとは異なるAPIを持つクラスが含まれます
error.validator.names.mismatch=エントリ: {0}には、内部名{1}を持つクラスが含まれますが、名前が一致しません
error.validator.info.name.notequal=バージョニングされたディレクトリのmodule-info.classに正しくない名前が含まれています
error.validator.info.requires.transitive=バージョニング・ディレクトリのmodule-info.classに追加の"requires transitive"が含まれています
error.validator.info.requires.added=バージョニングされたディレクトリのmodule-info.classに追加の"requires"が含まれています
error.validator.info.requires.dropped=バージョニングされたディレクトリのmodule-info.classに欠落している"requires"が含まれています
error.validator.info.exports.notequal=バージョニングされたディレクトリのmodule-info.classに異なる"exports"が含まれています
error.validator.info.opens.notequal=バージョニング・ディレクトリのmodule-info.classに異なる"opens"が含まれています
error.validator.info.provides.notequal=バージョニングされたディレクトリのmodule-info.classに異なる"provides"が含まれています
error.validator.info.version.notequal={0}: バージョニングされたディレクトリのmodule-info.classに異なる"version"が含まれています
error.validator.info.manclass.notequal={0}: バージョニングされたディレクトリのmodule-info.classに異なる"main-class"が含まれています
warn.validator.identical.entry=警告 : エントリ{0}には、jarにすでに存在する\nエントリと同じクラスが含まれます
warn.validator.resources.with.same.name=警告 : エントリ{0}、同じ名前を持つ複数のリソース
warn.validator.concealed.public.class=警告 : エントリ{0}は、隠しパッケージ内のpublicクラスです。\nクラスパスにこのjarを配置すると、互換性のない\npublicインタフェースが生成されます
warn.release.unexpected.versioned.entry=予期しないバージョニング済エントリ{0}
warn.index.is.ignored=JDK 18以降、JAR索引(META-INF/INDEX.LIST)は実行時に無視されます
warn.flag.is.deprecated=警告: {0}オプションは非推奨であり、今後のリリースで無視または削除される可能性があります\n
warn.option.is.ignored=警告: {0}オプションは、現在の使用状況では有効ではありません。無視されます。
out.added.manifest=マニフェストが追加されました
out.added.module-info=module-infoが追加されました: {0}
out.automodule=モジュール・ディスクリプタが見つかりません。自動モジュールが導出されました。
out.update.manifest=マニフェストが更新されました
out.update.module-info=module-infoが更新されました: {0}
out.ignore.entry=エントリ{0}を無視します
out.adding={0}を追加中です
out.deflated=({0}%収縮されました)
out.stored=(0%格納されました)
out.create=\  {0}が作成されました
out.extracted={0}が抽出されました
out.kept=\  スキップされました: {0}が存在します
out.inflated=\ {0}が展開されました
out.size=(入={0})(出={1})
out.extract.dir=ディレクトリに抽出しています: {0}

usage.compat=互換性インタフェース:\n使用方法: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files] ...\nオプション:\n    -c  アーカイブを新規作成する(欠落している親ディレクトリを含む)\n    -t  アーカイブの内容を一覧表示する\n    -x  指定の(またはすべての)ファイルをアーカイブから抽出する\n    -u  既存アーカイブを更新する\n    -v  標準出力に詳細な出力を生成する\n    -f  アーカイブ・ファイル名を指定する\n    -m  指定のマニフェスト・ファイルからマニフェスト情報を取り込む\n    -e  実行可能jarファイルにバンドルされたスタンドアロン・アプリケーションの \n        エントリ・ポイントを指定する\n    -0  格納のみ。ZIP圧縮を使用しない\n    -P  ファイル名の先頭の'/' (絶対パス)および".." (親ディレクトリ)コンポーネントを保持する\n    -M  エントリのマニフェスト・ファイルを作成しない\n    -i  指定のjarファイルの索引情報を生成する\n    -C  指定のディレクトリに変更し、次のファイルを取り込む\nファイルがディレクトリの場合は再帰的に処理されます。\n抽出モードで使用される場合、jarを指定のディレクトリに抽出します\nマニフェスト・ファイル名、アーカイブ・ファイル名およびエントリ・ポイント名は、\nフラグ'm'、'f'、'e'の指定と同じ順番で指定する必要があります。\n\n例1: 2つのクラス・ファイルをアーカイブclasses.jarに保存する: \n       jar cvf classes.jar Foo.class Bar.class \n例2: 既存のマニフェスト・ファイル'mymanifest'を使用し、foo/ディレクトリの\n           全ファイルを'classes.jar'にアーカイブする: \n       jar cvfm classes.jar mymanifest -C foo/ .\n

main.usage.summary=使用方法: jar [OPTION...] [ [--release VERSION] [-C dir] files] ...
main.usage.summary.try=詳細は、`jar --help'を実行してください。

main.help.preopt=使用方法: jar [OPTION...] [ [--release VERSION] [-C dir] files] ...\njarはクラスおよびリソースのアーカイブを作成し、アーカイブから個々のクラスまたは\nリソースを操作または復元できます。\n\n 例:\n # 2つのクラス・ファイルを含むclasses.jarというアーカイブを作成する:\n jar --create --file classes.jar Foo.class Bar.class\n # foo/のすべてのファイルを含む、既存のマニフェストを使用したアーカイブを作成する:\n jar --create --file classes.jar --manifest mymanifest -C foo/ .\n # モジュラjarアーカイブを作成する。モジュール・ディスクリプタはclasses/module-info.classに\n # ある:\n jar --create --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ classes resources\n # 既存の非モジュラjarをモジュラjarに更新する:\n jar --update --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ module-info.class\n # 複数リリースjarを作成し、一部のファイルをMETA-INF/versions/9ディレクトリに配置する:\n jar --create --file mr.jar -C foo classes --release 9 -C foo9 classes\n\njarコマンドを短縮または簡略化するには、個別のテキスト・ファイルで引数を指定し、\n記号(@)を接頭辞として使用してjarコマンドに渡します。\n\n 例:\n # 追加オプションおよびクラス・ファイルのリストをファイルclasses.listから読込みます\n jar --create --file my.jar @classes.list\n
main.help.opt.main=\ メイン操作モード:\n
main.help.opt.main.create=\  -c、--create               アーカイブを作成します。-fまたは--fileで指定された\n                             アーカイブ・ファイル名にパスが含まれている場合は、\n                             欠落している親ディレクトリも作成されます
main.help.opt.main.generate-index=\  -i, --generate-index=FILE  指定したjarアーカイブの索引情報を生成します。\n                             このオプションは非推奨であり、今後のリリースで\n                             削除される可能性があります。
main.help.opt.main.list=\  -t、--list                 アーカイブの内容を一覧表示します
main.help.opt.main.update=\  -u、--update               既存のjarアーカイブを更新します
main.help.opt.main.extract=\  -x、--extract              指定の(またはすべての)ファイルをアーカイブから抽出します。\n                             同じ名前のファイルがアーカイブに複数回出現する場合、\n                             各コピーが抽出され、後のコピーにより、前のコピーが\n                             上書き(置換)されます(-kが指定されている場合以外)。
main.help.opt.main.describe-module=\  -d, --describe-module      モジュール・ディスクリプタまたは自動モジュール名を出力します
main.help.opt.main.validate=\      --validate            jarアーカイブの内容を検証します。このオプションは\n                             複数リリースのjarアーカイブでエクスポートされたAPIが\n                             すべての異なるリリース・バージョンで一貫していることを\n                             検証します。
main.help.opt.any=\ どのモードでも有効な操作修飾子:\n\n  -C DIR                     指定のディレクトリに変更し、次のファイルを\n                             取り込みます。抽出モードで使用されている場合、jarを\n                             指定のディレクトリに抽出します
main.help.opt.any.file=\  -f、--file=FILE            アーカイブ・ファイル名。省略した場合、stdinまたは\n                             stdoutのいずれかが操作に基づいて使用されます\n      --release VERSION      次のすべてのファイルをjarのバージョニングされたディレクトリ\n                             (つまり、META-INF/versions/VERSION/)に配置します
main.help.opt.any.verbose=\  -v、--verbose              標準出力に詳細な出力を生成します
main.help.opt.create=\ 作成モードでのみ有効な操作修飾子:\n
main.help.opt.create.update=\ 作成または更新モードでのみ有効な操作修飾子:\n
main.help.opt.create.update.main-class=\  -e、--main-class=CLASSNAME モジュラまたは実行可能なjarアーカイブに\n                             バンドルされたスタンドアロン・アプリケーションの\n                             アプリケーション・エントリ・ポイント
main.help.opt.create.update.manifest=\  -m、--manifest=FILE        指定のマニフェスト・ファイルからマニフェスト情報を\n                             取り込みます
main.help.opt.create.update.no-manifest=\  -M、--no-manifest          エントリのマニフェスト・ファイルを作成しません
main.help.opt.create.update.module-version=\      --module-version=VERSION    モジュラjarの作成時または非モジュラjarの更新時の\n                             モジュール・バージョン
main.help.opt.create.update.hash-modules=\      --hash-modules=PATTERN モジュラjarの作成時または非モジュラjarの更新時に\n                             指定のパターンに一致し、直接または間接的に\n                             依存しているモジュールのハッシュを\n                             計算および記録します
main.help.opt.create.update.module-path=\  -p、--module-path          ハッシュを生成するモジュール依存性\n                             の場所
main.help.opt.create.update.do-not-resolve-by-default=\      --do-not-resolve-by-default  モジュールのデフォルトのルート設定から除外します
main.help.opt.create.update.warn-if-resolved=\      --warn-if-resolved     モジュールが解決されている場合は、警告を発行する\n                             ツールのヒント。非推奨、削除予定の非推奨または\n                             実験的のいずれか
main.help.opt.create.update.index=\ 作成、更新および索引生成モードでのみ有効な操作修飾子:\n
main.help.opt.create.update.index.no-compress=\  -0, --no-compress          格納のみ。ZIP圧縮を使用しません
main.help.opt.create.update.index.date=\      --date=TIMESTAMP       オプションのタイムゾーン形式を指定したISO-8601拡張オフセット\n                            の日時のタイムスタンプ。エントリのタイムスタンプの使用例は、\n                             "2022-02-12T12:30:00-05:00"です
main.help.opt.extract=\ 抽出モードでのみ有効な操作修飾子:\n
main.help.opt.extract.keep-old-files=\  -k、--keep-old-files       既存のファイルを上書きしません。\n                             同じ名前のJarファイル・エントリがターゲット・ディレクトリに\n                             存在する場合、既存のファイルは上書きされません。\n                             結果として、ファイルがアーカイブ内に複数回出現する場合、\n                             後のコピーによって前のコピーは上書きされません。\n                             また、一部のファイル・システムでは、大/小文字が区別される場合があることに注意してください。
main.help.opt.other=\ その他のオプション:\n
main.help.opt.other.help=\  -?、-h、--help[:compat]        これ(オプションで互換性)をhelpに指定します
main.help.opt.other.help-extra=\      --help-extra           追加オプションのヘルプを提供します
main.help.opt.other.version=\      --version              プログラム・バージョンを出力します
main.help.postopt=\ モジュール・ディスクリプタ'module-info.class'が指定のディレクトリのルートまたは\n jarアーカイブ自体のルートにある場合、アーカイブはモジュラjarです。\n 次の操作は、モジュラjarの作成時または既存の非モジュラjarの更新時に\n のみ有効です:  '--module-version'、\n '--hash-modules'および'--module-path'。\n\n ロング・オプションへの必須またはオプションの引数は、対応するショート・オプション\n に対しても必須またはオプションになります。
main.help.opt.extract=\ 抽出モードでのみ有効な操作修飾子:\n
main.help.opt.extract.dir=\  --dir                    jarが抽出されるディレクトリ
