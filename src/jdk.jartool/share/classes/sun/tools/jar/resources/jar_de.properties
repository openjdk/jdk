#
# Copyright (c) 1999, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## tool

jar.description=Archiv für Klassen und Ressourcen erstellen und individuelle Klassen oder Ressourcen aus einem Archiv ändern oder wiederherstellen

error.multiple.main.operations=Es ist nicht möglich, mehrere "-cuxtid"-Optionen anzugeben
error.cant.open=Öffnen nicht möglich: {0}
error.illegal.option=Unzulässige Option: {0}
error.unrecognized.option=Unbekannte Option: {0}
error.missing.arg=Für die Option {0} ist ein Argument erforderlich
error.bad.file.arg=Fehler beim Parsen der Dateiargumente
error.bad.option=Eine der Optionen -{ctxuid} oder --validate muss angegeben werden.
error.bad.cflag=Kennzeichen "c" erfordert Angabe von Manifest oder Eingabedateien.
error.bad.uflag=Kennzeichen "u" erfordert Angabe von Manifest, Kennzeichen "e" oder Eingabedateien.
error.bad.eflag=Kennzeichen "e" und Manifest mit dem Attribut "Main-Class" können nicht zusammen angegeben\nwerden.
error.bad.dflag=Für die Option "-d, --describe-module" müssen keine Eingabedateien angegeben werden
error.bad.reason=Schlechter Grund: {0}, Grund muss entweder "deprecated", "deprecated-for-removal" oder "incubating" sein
error.nosuch.fileordir={0}: Datei oder Verzeichnis nicht vorhanden
error.write.file=Fehler beim Schreiben in vorhandener JAR-Datei
error.create.dir={0}: Verzeichnis konnte nicht erstellt werden
error.incorrect.length=Falsche Länge bei der Verarbeitung: {0}
error.create.tempfile=Es konnte keine temporäre Datei erstellt werden
error.extract.multiple.dest.dir=Sie können die Option "-C" oder "--dir" nicht mehrmals mit der Option "-x" angeben
error.extract.pflag.not.allowed=Sie können nicht "-Px" mit der Option "-C" oder "--dir" angeben
error.hash.dep=Abhängigkeiten bei Hashing-Modul {0}. Modul {1} kann nicht im Modulpfad gefunden werden
error.module.options.without.info=--module-version oder --hash-modules ohne module-info.class
error.no.operative.descriptor=Kein operativer Deskriptor für Release: {0}
error.no.root.descriptor=Kein Root-Moduldeskriptor. Geben Sie --release an
error.unable.derive.automodule=Moduldeskriptor kann nicht abgeleitet werden für: {0}
error.unexpected.module-info=Unerwarteter Moduldeskriptor {0}
error.module.descriptor.not.found=Moduldeskriptor nicht gefunden
error.invalid.versioned.module.attribute=Ungültiges Moduldeskriptorattribut {0}
error.missing.provider=Serviceprovider nicht gefunden: {0}
error.release.value.notnumber=Release {0} nicht gültig
error.release.value.toosmall=Release {0} nicht gültig, muss >= 9 sein
error.release.unexpected.versioned.entry=Unerwarteter versionierte Eintrag {0} für Release {1}
error.date.notvalid=Datum {0} ist keine gültige erweiterte Datums-/Uhrzeitangabe mit Zeitunterschied und optionaler Zeitzone nach ISO-8601
error.date.out.of.range=Datum {0} liegt nicht im gültigen Bereich 1980-01-01T00:00:02Z bis 2099-12-31T23:59:59Z
error.validator.jarfile.exception={0} kann nicht validiert werden: {1}
error.validator.jarfile.invalid=ungültige Multi-Release-JAR-Datei {0} gelöscht
error.validator.bad.entry.name=Eintragsname hat das falsche Format, {0}
error.validator.version.notnumber=Eintragsname {0} hat keine Versionsnummer
error.validator.entryname.tooshort=Eintragsname {0} zu kurz, kein Verzeichnis
error.validator.isolated.nested.class=Eintrag {0} ist eine isolierte verschachtelte Klasse
error.validator.new.public.class=Eintrag {0} enthält eine neue öffentliche Klasse, die in Basiseinträgen nicht gefunden wird
error.validator.incompatible.class.version=Eintrag {0} weist eine Klassenversion auf, die mit einer früheren Version inkompatibel ist
error.validator.different.api=Eintrag {0} enthält eine Klasse mit einer anderen API als in der früheren Version
error.validator.names.mismatch=Eintrag {0} enthält eine Klasse mit dem internen Namen {1}, Namen stimmen nicht überein
error.validator.info.name.notequal=module-info.class in einem versionierten Verzeichnis enthält falschen Namen
error.validator.info.requires.transitive=module-info.class in einem versionierten Verzeichnis enthält zusätzlichen "requires transitive"
error.validator.info.requires.added=module-info.class in einem versionierten Verzeichnis enthält zusätzlichen "requires"
error.validator.info.requires.dropped=module-info.class in einem versionierten Verzeichnis enthält fehlenden "requires"
error.validator.info.exports.notequal=module-info.class in einem versionierten Verzeichnis enthält unterschiedliche "exports"
error.validator.info.opens.notequal=module-info.class in einem versionierten Verzeichnis enthält unterschiedliche "opens"
error.validator.info.provides.notequal=module-info.class in einem versionierten Verzeichnis enthält unterschiedliche "provides"
error.validator.info.version.notequal={0}: module-info.class in einem versionierten Verzeichnis enthält unterschiedlichen "version"-Wert
error.validator.info.manclass.notequal={0}: module-info.class in einem versionierten Verzeichnis enthält unterschiedlichen "main-class"-Wert
warn.validator.identical.entry=Warnung: Eintrag {0} enthält eine Klasse, die mit\neinem bereits in der JAR-Datei enthaltenen Eintrag identisch ist
warn.validator.resources.with.same.name=Warnung: Eintrag {0}, mehrere Ressourcen mit demselben Namen
warn.validator.concealed.public.class=Warnung: Eintrag {0} ist eine öffentliche Klasse\nin einem verdeckten Package. Wenn Sie diese JAR-Datei in den Classpath einfügen, kommt es\nzu nicht kompatiblen öffentlichen Schnittstellen
warn.release.unexpected.versioned.entry=Unerwarteter versionierter Eintrag {0}
warn.index.is.ignored=Der JAR-Index (META-INF/INDEX.LIST) wird seit JDK 18 zur Laufzeit ignoriert
warn.flag.is.deprecated=Warnung: Die Option {0} ist veraltet und wird möglicherweise ignoriert oder in einem zukünftigen Release entfernt\n
warn.option.is.ignored=Warnung: Die Option "{0}" ist mit der aktuellen Verwendung nicht gültig und wird ignoriert.
out.added.manifest=Manifest wurde hinzugefügt
out.added.module-info=module-info hinzugefügt: {0}
out.automodule=Kein Moduldeskriptor gefunden. Automatisches Modul wurde abgeleitet.
out.update.manifest=Manifest wurde aktualisiert
out.update.module-info=module-info aktualisiert: {0}
out.ignore.entry=Eintrag {0} wird ignoriert
out.adding={0} wird hinzugefügt
out.deflated=({0} % verkleinert)
out.stored=(0 % gespeichert)
out.create=\  erstellt: {0}
out.extracted=extrahiert: {0}
out.kept=\  übersprungen: {0} vorhanden
out.inflated=\ vergrößert: {0}
out.size=(ein = {0}) (aus = {1})
out.extract.dir=Extrahieren in Verzeichnis: {0}

usage.compat=Kompatibilitätsschnittstelle\nVerwendung: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files] ...\nOptionen:\n    -c erstellt ein neues Archiv (einschließlich fehlender übergeordneter Verzeichnisse)\n    -t listet das Inhaltsverzeichnis für das Archiv auf\n    -x extrahiert die benannten (oder alle) Dateien aus dem Archiv\n    -u aktualisiert ein vorhandenes Archiv\n    -v generiert Verbose-Ausgabe zur Standardausgabe\n    -f gibt den Archivdateinamen an\n    -m schließt Manifestinformationen aus der angegebenen Manifestdatei ein\n    -e gibt den Anwendungseinstiegspunkt für Standalone-Anwendungen an,\n        die in einer ausführbaren JAR-Datei gebündelt sind\n    -0 speichert nur, ohne ZIP-Komprimierung\n    -P behält die vorangestellten Komponenten "/" (absoluter Pfad) und ".." (übergeordnetes Verzeichnis) aus Dateinamen bei\n    -M generiert keine Manifestdatei für die Einträge\n    -i generiert Indexinformationen für die angegebenen JAR-Dateien\n    -C wechselt zum angegebenen Verzeichnis und schließt die folgende Datei ein\nDateien, die Verzeichnisse sind, werden rekursiv verarbeitet.\nBei Verwendung im Extraktionsmodus wird die JAR-Datei in das angegebene Verzeichnis extrahiert\nDie Namen der Manifestdatei, der Archivdatei und des Einstiegspunkts werden\nin der gleichen Reihenfolge wie die Kennzeichen "m", "f" und "e" angegeben.\n\nBeispiel 1: Zwei Klassendateien in einem Archiv namens classes.jar archivieren: \n       jar cvf classes.jar Foo.class Bar.class \nBeispiel 2: Die vorhandene Manifestdatei "mymanifest" verwenden und alle\n           Dateien im Verzeichnis "foo/" in "classes.jar" archivieren: \n       jar cvfm classes.jar mymanifest -C foo/ .\n

main.usage.summary=Verwendung: jar [OPTION...] [ [--release VERSION] [-C dir] Dateien] ...
main.usage.summary.try=Verwenden Sie "jar --help", um weitere Informationen anzuzeigen.

main.help.preopt=Verwendung: jar [OPTION...] [ [--release VERSION] [-C dir] files] ...\njar erstellt ein Archiv für Klassen und Ressourcen und kann individuelle\nKlassen oder Ressourcen aus einem Archiv bearbeiten oder wiederherstellen.\n\n Beispiele:\n # Ein Archiv namens classes.jar mit zwei Klassendateien erstellen:\n jar --create --file classes.jar Foo.class Bar.class\n # Ein Archiv mit einem vorhandenen Manifest mit allen Dateien in foo/ erstellen:\n jar --create --file classes.jar --manifest mymanifest -C foo/ .\n # Ein modulares JAR-Archiv erstellen, dessen Moduldeskriptor sich in\n # classes/module-info.class befindet:\n jar --create --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ classes resources\n # Ein vorhandenes nicht modulares JAR-Archiv in ein modulares JAR-Archiv aktualisieren:\n jar --update --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ module-info.class\n # Multi-Release-JAR-Datei erstellen, wobei einige Dateien im Verzeichnis META-INF/versions/9 gespeichert werden:\n jar --create --file mr.jar -C foo classes --release 9 -C foo9 classes\n\nUm den "jar"-Befehl zu kürzen oder zu vereinfachen, können Sie Argumente in einer separaten\nTextdatei angeben und diese mit dem @-Zeichen als Präfix an den "jar"-Befehl übergeben.\n\n Beispiele:\n # Zusätzliche Optionen und Liste der Klassendateien aus der Datei classes.list lesen\n jar --create --file my.jar @classes.list\n
main.help.opt.main=\ Hauptvorgangsmodus:\n
main.help.opt.main.create=\  -c, --create               Erstellt das Archiv. Wenn der mit\n                             -f oder --file angegebene Archivdateiname einen Pfad enthält, werden auch fehlende\n                             übergeordnete Verzeichnisse erstellt
main.help.opt.main.generate-index=\  -i, --generate-index=FILE  Generiert Indexinformationen für die angegebenen\n                             JAR-Archive. Diese Option ist veraltet und wird möglicherweise in \n                             einem zukünftigen Release entfernt.
main.help.opt.main.list=\  -t, --list                 Das Inhaltsverzeichnis für das Archiv auflisten
main.help.opt.main.update=\  -u, --update               Ein vorhandenes JAR-Archiv aktualisieren
main.help.opt.main.extract=\  -x, --extract              Extrahiert benannte (oder alle) Dateien aus dem Archiv.\n                             Wenn eine Datei mit demselben Namen mehrmals im\n                             Archiv enthalten ist, wird jede Kopie extrahiert. Dabei überschreiben (ersetzen) neuere Kopien\n                             ältere Kopien, es sei denn, "-k" ist angegeben.
main.help.opt.main.describe-module=\  -d, --describe-module      Gibt den Moduldeskriptor oder automatischen Modulnamen aus
main.help.opt.main.validate=\      --validate             Validiert den Inhalt des JAR-Archivs. Diese Option\n                             validiert, dass die von einem Multi-Release-JAR-Archiv\n                             exportierte API über die verschiedenen Releaseversionen\n                             hinweg konsistent ist.
main.help.opt.any=\ In jedem Modus gültige Vorgangsmodifikatoren:\n\n  -C DIR                     Zum angegebenen Verzeichnis wechseln und die folgende\n                             Datei aufnehmen. Bei Verwendung im Extraktionsmodus wird\n                             die JAR-Datei in das angegebene Verzeichnis extrahiert
main.help.opt.any.file=\  -f, --file=FILE            Der Name der Archivdatei. Wenn Sie dies auslassen, wird entweder stdin oder\n                             stdout verwendet, je nach Vorgang\n      --release VERSION      Speichert alle der folgenden Dateien in einem versionierten Verzeichnis\n                             der JAR-Datei (d.h. META-INF/versions/VERSION/)
main.help.opt.any.verbose=\  -v, --verbose              Verbose-Ausgabe bei Standardausgabe generieren
main.help.opt.create=\ Vorgangsmodifikatoren, die nur im Erstellungsmodus gültig sind:\n
main.help.opt.create.update=\ Vorgangsmodifikatoren, die nur im Erstellungs- und Aktualisierungsmodus gültig sind:\n
main.help.opt.create.update.main-class=\  -e, --main-class=CLASSNAME Der Anwendungseinstiegspunkt für Standalone-\n                             Anwendungen, die in einem modularen oder ausführbaren\n                             JAR-Archiv gebündelt sind
main.help.opt.create.update.manifest=\  -m, --manifest=FILE        Die Manifestinformationen aus der angegebenen\n                             Manifestdatei aufnehmen
main.help.opt.create.update.no-manifest=\  -M, --no-manifest          Keine Manifestdatei für die Einträge erstellen
main.help.opt.create.update.module-version=\      --module-version=VERSION    Die Modulversion beim Erstellen eines modularen\n                             JAR-Archivs oder Aktualisieren eines nicht modularen JAR-Archivs
main.help.opt.create.update.hash-modules=\      --hash-modules=PATTERN Berechnet und zeichnet die Hashes von Modulen auf, \n                             die mit einem bestimmten Muster übereinstimmen, und direkt oder\n                             indirekt von einem modularen JAR-Archiv abhängen, das erstellt\n                             wird, oder einem nicht-modularen JAR-Archiv, das aktualisiert wird
main.help.opt.create.update.module-path=\  -p, --module-path         Speicherort von Modulabhängigkeit zur Generierung\n                             von Hash
main.help.opt.create.update.do-not-resolve-by-default=\      --do-not-resolve-by-default  Wird aus der Standard-Root-Gruppe von Modulen ausgeschlossen
main.help.opt.create.update.warn-if-resolved=\      --warn-if-resolved     Hinweis für ein Tool, eine Warnung auszugeben,\n                             wenn das Modul aufgelöst wird, entweder "deprecated", "deprecated-for-removal"\n                             oder "incubating"
main.help.opt.create.update.index=\ Vorgangsmodifikatoren, die nur im Erstellungs-, Aktualisierungs- und Indexgenerierungsmodus gültig sind:\n
main.help.opt.create.update.index.no-compress=\  -0, --no-compress          Nur speichern, keine ZIP-Komprimierung verwenden
main.help.opt.create.update.index.date=\      --date=TIMESTAMP        Zeitstempel im erweiterten Datums-/Uhrzeitformat mit Zeitunterschied\n                             und optionaler Zeitzone nach ISO-8601, zur Verwendung für die Zeitstempel von\n                             Einträgen, z.B. "2022-02-12T12:30:00-05:00"
main.help.opt.extract=\ Vorgangsmodifikatoren, die nur im Extraktionsmodus gültig sind:\n
main.help.opt.extract.keep-old-files=\  -k, --keep-old-files       Vorhandene Dateien nicht überschreiben.\n                             Wenn bereits ein JAR-Dateieintrag mit demselben Namen im\n                             Zielverzeichnis vorhanden ist, wird die vorhandene Datei nicht überschrieben.\n                             Wenn eine Datei also mehrmals in einem\n                             Archiv enthalten ist, werden ältere Kopien nicht durch neuere Kopien überschrieben.\n                             Beachten Sie zudem, dass bei einigen Dateisystemen die Groß-/Kleinschreibung ignoriert wird.
main.help.opt.other=\ Weitere Optionen:\n
main.help.opt.other.help=\  -?, -h, --help[:compat]    Gibt diese Meldung oder optional die Kompatibilität, Hilfe an
main.help.opt.other.help-extra=\      --help-extra           Hilfe zu zusätzlichen Optionen
main.help.opt.other.version=\      --version              Programmversion ausgeben
main.help.postopt=\ Ein Archiv ist ein modulares JAR-Archiv, wenn der Moduldeskriptor "module-info.class"\n in der Root der angegebenen Verzeichnisse oder in der Root des JAR-Archivs selbst\n vorhanden ist. Die folgenden Vorgänge sind nur gültig, wenn Sie ein modulares JAR-Archiv\n erstellen oder ein vorhandenes nicht modulares JAR-Archiv aktualisieren: "--module-version",\n "--hash-modules" und "--modulepath".\n\n Obligatorische oder optionale Argumente zu langen Optionen sind auch für die jeweils\n zugehörigen kurzen Optionen obligatorisch oder optional.
main.help.opt.extract=\ Vorgangsmodifikatoren, die nur im Extraktionsmodus gültig sind:\n
main.help.opt.extract.dir=\  --dir                    Verzeichnis, in das die JAR-Datei extrahiert wird
