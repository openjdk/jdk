#
# Copyright (c) 1999, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

error.multiple.main.operations=No se puede especificar más de una opción '-cuxtid'
error.cant.open=no se puede abrir: {0}
error.illegal.option=Opción no permitida: {0}
error.unrecognized.option=opción no reconocida: {0}
error.missing.arg=la opción {0} necesita un argumento
error.bad.file.arg=Error al analizar los argumentos de archivo
error.bad.option=Se debe especificar una de las opciones -{ctxuid}.
error.bad.cflag=El indicador 'c' necesita la especificación de archivos de manifiesto o de entrada.
error.bad.uflag=El indicador 'u' necesita la especificación de archivos de manifiesto, de entrada o indicador 'e'.
error.bad.eflag=El indicador 'e' y el manifiesto con el atributo 'Main-Class' no pueden especificarse \na la vez.
error.bad.dflag=La opción '-d, --describe-module'  no requiere especificar archivos de entrada
error.bad.reason=Motivo erróneo: {0}, debe ser en desuso, en desuso para eliminación o incubando
error.nosuch.fileordir={0} : no existe tal archivo o directorio
error.write.file=Error al escribir un archivo jar existente
error.create.dir={0} : no se ha podido crear el directorio
error.incorrect.length=longitud incorrecta al procesar: {0}
error.create.tempfile=No se ha podido crear el archivo temporal
error.hash.dep=Aplicando hash a las dependencias del módulo {0}, no se ha encontrado el módulo {1} en la ruta del módulo
error.module.options.without.info=Uno de --module-version o -hash-modules sin module-info.class
error.no.operative.descriptor=No hay ningún descriptor operativo para la versión: {0}
error.no.root.descriptor=No hay ningún descriptor de módulo de raíz, especifique --release
error.unable.derive.automodule=No se ha podido derivar el descriptor de módulo para: {0}
error.unexpected.module-info=Descriptor de módulo inesperado {0}
error.module.descriptor.not.found=No se ha encontrado el descriptor de módulo
error.invalid.versioned.module.attribute=Atributo de descriptor de módulo no válido {0}
error.missing.provider=No se ha encontrado el proveedor de servicios: {0}
error.release.value.notnumber=versión {0} no válida
error.release.value.toosmall=versión {0} no válida, debe ser >= 9
error.release.unexpected.versioned.entry=Entrada versionada inesperada {0} para la versión {1}
error.validator.jarfile.exception=no puede validar {0}: {1}
error.validator.jarfile.invalid=se ha suprimido el archivo jar de varias versiones {0} no válido
error.validator.bad.entry.name=nombre de entrada con formato incorrecto, {0}
error.validator.version.notnumber=el nombre de entrada {0} no tiene un número de versión
error.validator.entryname.tooshort=el nombre de entrada {0} es demasiado corto, no es un directorio
error.validator.isolated.nested.class=la entrada {0} es una clase anidada aislada
error.validator.new.public.class=la entrada {0} contiene una nueva clase pública que no está en las entradas de base
error.validator.incompatible.class.version=la entrada {0} tiene una versión de clase no compatible con una versión anterior
error.validator.different.api=la entrada {0} contiene una clase con una api diferente de la versión anterior
error.validator.names.mismatch=la entrada {0} contiene una clase con un nombre interno {1}, los nombres no coinciden
error.validator.info.name.notequal=module-info.class en un directorio con versión contiene un nombre incorrecto
error.validator.info.requires.transitive=module-info.class en un directorio con versiones contiene "requires transitive" adicionales
error.validator.info.requires.added=module-info.class en un directorio con versión contiene "requires" adicionales
error.validator.info.requires.dropped=module-info.class en un directorio con versiones contiene "requires" que faltan
error.validator.info.exports.notequal=module-info.class en un directorio con versiones contiene "exports" diferentes
error.validator.info.opens.notequal=module-info.class en un directorio con versiones contiene "opens" diferentes
error.validator.info.provides.notequal=module-info.class en un directorio con versiones contiene "provides" diferentes
error.validator.info.version.notequal={0}: module-info.class en un directorio con versiones contiene una "version" diferente
error.validator.info.manclass.notequal={0}: module-info.class  en un directorio con versiones contiene una "main-class" diferente
warn.validator.identical.entry=Advertencia: la entrada {0} contiene una clase idéntica a una entrada que ya está en el archivo jar
warn.validator.resources.with.same.name=Advertencia: la entrada {0} tiene varios recursos con el mismo nombre
warn.validator.concealed.public.class=Advertencia: la entrada {0} es una clase pública\nen un paquete oculto. Colocar este archivo jar en la ruta de clase tendrá como resultado\ninterfaces públicas no compatibles
warn.release.unexpected.versioned.entry=entrada versionada inesperada {0}
out.added.manifest=manifiesto agregado
out.added.module-info=module-info agregado: {0}
out.automodule=No se ha encontrado ningún descriptor de módulo. Módulo automático derivado.
out.update.manifest=manifiesto actualizado
out.update.module-info=module-info actualizado: {0}
out.ignore.entry=ignorando entrada {0}
out.adding=agregando: {0}
out.deflated=(desinflado {0}%)
out.stored=(almacenado 0%)
out.create=\  creado: {0}
out.extracted=extraído: {0}
out.inflated=\ inflado: {0}
out.size=(entrada = {0}) (salida = {1})

usage.compat=Interfaz de compatibilidad:\nSintaxis: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files] ...Opciones: \n    -c  crear nuevo archivo\n    -t  mostrar la tabla de contenido del archivo\n    -x   extraer el archivo mencionado (o todos) del archivo\n    -u  actualizar archivo existente\n    -v  generar salida detallada de los datos de salida estándar\n    -f  especificar nombre del archivo de almacenamiento\n    -m  incluir información de manifiesto del archivo de manifiesto especificado n    -n  realizar la normalización Pack200 después de crear un archivo nuevo\n    -e  especificar punto de entrada de la aplicación para la aplicación autónoma \n        que se incluye dentro de un archivo jar ejecutable\n    -0  solo almacenar; no utilizar compresión ZIP\n    -P  conservar componentes iniciales '/' (ruta absoluta) y ".." (directorio principal) en los nombres de archivo\n    -M  no crear un archivo de manifiesto para las entradas\n    -i  generar información de índice para los archivos jar especificados\n    -C  cambiar al directorio especificado e incluir el archivo siguiente\nSi algún archivo es un directorio, se procesará de forma recurrente. \nEl nombre del archivo de manifiesto, el nombre del archivo de almacenamiento y el nombre del punto de entrada se\n especifican en el mismo orden que los indicadores 'm', 'f' y 'e'. \n\nEjemplo 1: para archivar archivos de dos clases en un archivo llamado classes.jar: \n       jar cvf classes.jar Foo.class Bar.class \nEjemplo 2: utilice un archivo de manifiesto existente 'mymanifest' y archive todos los\n           archivos del directorio foo/ en 'classes.jar': \n       jar cvfm classes.jar mymanifest -C foo/ .\n

main.usage.summary=Sintaxis: jar [OPTION...] [ [--release VERSION] [-C dir] archivos] ...
main.usage.summary.try=Intente `jar --help' para obtener más información.

main.help.preopt=Sintaxis: jar [OPTION...] [ [--release VERSION] [-C dir] files] ...\njar crea un archivo para las clases y recursos, y puede manipular o\nrestaurar clases individuales o recursos de un archivo.\n\n Ejemplos:\n # Crear un archivo denominado classes.jar con dos archivos de clase:\n jar --create --file classes.jar Foo.class Bar.class\n # Crear un archivo con un manifiesto existente, con todos los archivos en foo/:\n jar --create --file classes.jar --manifest mymanifest -C foo/ .\n # Crear un archivo jar modular, donde el descriptor de módulo está en\n # classes/module-info.class:\n jar --create --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ classes resources\n # Actualizar un jar no modular existente en un jar modular:\n jar --update --file foo.jar --main-class com.foo.Main --module-version 1.0\n     -C foo/ module-info.class\n # Crear un archivo jar de varias versiones y colocar algunos archivos en el directorio META-INF/versions/9:\n jar --create --file mr.jar -C foo classes --release 9 -C foo9 classes\n\nPara acortar o simplificar el comando jar, puede especificar argumentos en un archivo\nde texto separado y transmitirlos al comando jar con el símbolo de arroba (@) como prefijo.\n\n Ejemplos:\n # Leer opciones adicionales y mostrar los archivos de clases del archivo classes.list\n jar --create --file my.jar @classes.list\n
main.help.opt.main=\ Modo de operación principal:\n
main.help.opt.main.create=\  -c, --create               Crear el archivo
main.help.opt.main.generate-index=\  -i, --generate-index=FILE  Generar información de índice para los archivos jar\n                             especificados
main.help.opt.main.list=\  -t, --list                 Mostrar la tabla de contenido del archivo
main.help.opt.main.update=\  -u, --update               Actualizar un archivo jar existente
main.help.opt.main.extract=\  -x, --extract              Extraer determinados (o todos) los archivos del archivo
main.help.opt.main.describe-module=\  -d, --describe-module      Imprimir el descriptor de módulo, o un nombre de módulo automático
main.help.opt.any=\ Modificadores de operación válidos en cualquier modo:\n\n  -C DIR                     Cambiar al directorio especificado e incluir el\n                             siguiente archivo
main.help.opt.any.file=\  -f, --file=FILE            El nombre del archivo. Si se omite, se usa stdin o\n                             stdout en función de la operación\n      --release VERSION      Se colocan todos los archivos siguientes en un directorio con versión\n                             del archivo jar (es decir, META-INF/versions/VERSION/)
main.help.opt.any.verbose=\  -v, --verbose              Generar salida verbose en salida estándar
main.help.opt.create=\ Modificadores de operación válidos solo en el modo de creación:\n
main.help.opt.create.update=\ Modificadores de operación válidos solo en el modo de creación y de actualización:\n
main.help.opt.create.update.main-class=\  -e, --main-class=CLASSNAME Punto de entrada de la aplicación para aplicaciones\n                             autónomas agrupadas en un archivo jar modular o\n                             ejecutable
main.help.opt.create.update.manifest=\  -m, --manifest=FILE        Incluir la información de manifiesto del archivo\n                             de manifiesto proporcionado
main.help.opt.create.update.no-manifest=\  -M, --no-manifest          No crear ningún archivo de manifiesto para las entradas
main.help.opt.create.update.module-version=\      --module-version=VERSION    Versión del módulo, si se va a crear un archivo jar modular\n                             o actualizar un archivo jar no modular
main.help.opt.create.update.hash-modules=\      --hash-modules=PATTERN Calcular y registrar los hash de módulos\n                             que coinciden con el patrón proporcionado y que dependen\n                             directa o indirectamente de la creación de un archivo jar modular\n                             o de la actualización de un archivo jar no modular
main.help.opt.create.update.module-path=\  -p, --module-path          Ubicación de la dependencia de módulo para generar\n                             el hash
main.help.opt.create.update.do-not-resolve-by-default=\      --do-not-resolve-by-default  Excluir del conjunto de módulos raíz por defecto
main.help.opt.create.update.warn-if-resolved=\      --warn-if-resolved     Indicación para que una herramienta emita una advertencia si el módulo\n                             se ha resuelto. En desuso, en desuso para eliminación\n                             o incubando
main.help.opt.create.update.index=\ Modificadores de operación válidos solo en el modo de creación, actualización y generación de índice:\n
main.help.opt.create.update.index.no-compress=\  -0, --no-compress          Solo almacenar; no usar compresión ZIP
main.help.opt.other=\ Otras opciones:\n
main.help.opt.other.help=\  -h, --help[:compat]        Utilice este valor, u opcionalmente la compatibilidad, ayuda
main.help.opt.other.help-extra=\      --help-extra           Prestar ayuda en las opciones adicionales
main.help.opt.other.version=\      --version              Imprimir versión del programa
main.help.postopt=\ Un archivo es un jar modular si el descriptor de módulo, 'module-info.class', está\n en la raíz de los directorios proporcionados o en la raíz del archivo jar.\n Las siguientes operaciones solo son válidas si se va a crear un archivo jar modular\n o se va a actualizar un jar existente no modular: '--module-version',\n '--hash-modules' y '--module-path'.\n\n Los argumentos obligatorios u opcionales en las opciones largas también son obligatorios u opcionales\n en cualquiera de las opciones cortas.
