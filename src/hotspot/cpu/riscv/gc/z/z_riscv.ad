//
// Copyright (c) 2019, 2023, Oracle and/or its affiliates. All rights reserved.
// Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// This code is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License version 2 only, as
// published by the Free Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// version 2 for more details (a copy is included in the LICENSE file that
// accompanied this code).
//
// You should have received a copy of the GNU General Public License version
// 2 along with this work; if not, write to the Free Software Foundation,
// Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
//
// Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
// or visit www.oracle.com if you need additional information or have any
// questions.
//

source_hpp %{

#include "gc/shared/gc_globals.hpp"
#include "gc/z/c2/zBarrierSetC2.hpp"
#include "gc/z/zThreadLocalData.hpp"

%}

source %{
#include "gc/z/zBarrierSetAssembler.hpp"

static void z_color(MacroAssembler* masm, const MachNode* node, Register dst, Register src, Register tmp) {
  assert_different_registers(dst, tmp);

  __ relocate(barrier_Relocation::spec(), [&] {
    __ li16u(tmp, barrier_Relocation::unpatched);
  }, ZBarrierRelocationFormatStoreGoodBits);
  __ slli(dst, src, ZPointerLoadShift);
  __ orr(dst, dst, tmp);
}

static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {
  __ srli(ref, ref, ZPointerLoadShift);
}

static void check_color(MacroAssembler* masm, Register ref, bool on_non_strong, Register result) {
  int format = on_non_strong ? ZBarrierRelocationFormatMarkBadMask
                             : ZBarrierRelocationFormatLoadBadMask;
  __ relocate(barrier_Relocation::spec(), [&] {
    __ li16u(result, barrier_Relocation::unpatched);
  }, format);
  __ andr(result, ref, result);
}

static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {
  const bool on_non_strong =
      ((node->barrier_data() & ZBarrierWeak) != 0) ||
      ((node->barrier_data() & ZBarrierPhantom) != 0);

  if (node->barrier_data() == ZBarrierElided) {
    z_uncolor(masm, node, ref);
    return;
  }

  ZLoadBarrierStubC2* const stub = ZLoadBarrierStubC2::create(node, ref_addr, ref);
  Label good;
  check_color(masm, ref, on_non_strong, tmp);
  __ beqz(tmp, good);
  __ j(*stub->entry());

  __ bind(good);
  z_uncolor(masm, node, ref);
  __ bind(*stub->continuation());
}

static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {
  if (node->barrier_data() == ZBarrierElided) {
    z_color(masm, node, rnew_zpointer, rnew_zaddress, tmp);
  } else {
    bool is_native = (node->barrier_data() & ZBarrierNative) != 0;
    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, ref_addr, rnew_zaddress, rnew_zpointer, is_native, is_atomic);
    ZBarrierSetAssembler* bs_asm = ZBarrierSet::assembler();
    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true /* in_nmethod */, is_atomic, *stub->entry(), *stub->continuation());
  }
}
%}

// Load Pointer
instruct zLoadP(iRegPNoSp dst, memory mem, iRegPNoSp tmp)
%{
  match(Set dst (LoadP mem));
  predicate(UseZGC && ZGenerational && n->as_Load()->barrier_data() != 0);
  effect(TEMP dst, TEMP tmp);

  ins_cost(4 * DEFAULT_COST);

  format %{ "ld  $dst, $mem, #@zLoadP" %}

  ins_encode %{
    const Address ref_addr(as_Register($mem$$base), $mem$$disp);
    __ ld($dst$$Register, ref_addr);
    z_load_barrier(masm, this, ref_addr, $dst$$Register, $tmp$$Register);
  %}

  ins_pipe(iload_reg_mem);
%}

// Store Pointer
instruct zStoreP(memory mem, iRegP src, iRegPNoSp tmp1, iRegPNoSp tmp2)
%{
  predicate(UseZGC && ZGenerational && n->as_Store()->barrier_data() != 0);
  match(Set mem (StoreP mem src));
  effect(TEMP tmp1, TEMP tmp2);

  ins_cost(125); // XXX
  format %{ "sd    $mem, $src\t# ptr" %}
  ins_encode %{
    const Address ref_addr(as_Register($mem$$base), $mem$$disp);
    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp1$$Register, $tmp2$$Register, false /* is_atomic */);
    __ sd($tmp1$$Register, ref_addr);
  %}
  ins_pipe(pipe_serial);
%}

instruct zCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval,
                          iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{
  match(Set res (CompareAndSwapP mem (Binary oldval newval)));
  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));
  predicate(UseZGC && ZGenerational && !needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "cmpxchg $mem, $oldval, $newval, #@zCompareAndSwapP\n\t"
            "mv $res, $res == $oldval" %}

  ins_encode %{
    guarantee($mem$$disp == 0, "impossible encoding");
    Address ref_addr($mem$$Register);
    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);
    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true /* is_atomic */);
    __ cmpxchg($mem$$Register, $oldval_tmp$$Register, $newval_tmp$$Register, Assembler::int64, Assembler::relaxed /* acquire */, Assembler::rl /* release */, $res$$Register, true /* result_as_bool */);
  %}

  ins_pipe(pipe_slow);
%}

instruct zCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval,
                             iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{
  match(Set res (CompareAndSwapP mem (Binary oldval newval)));
  match(Set res (WeakCompareAndSwapP mem (Binary oldval newval)));
  predicate(UseZGC && ZGenerational && needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "cmpxchg $mem, $oldval, $newval, #@zCompareAndSwapPAcq\n\t"
            "mv $res, $res == $oldval" %}

  ins_encode %{
    guarantee($mem$$disp == 0, "impossible encoding");
    Address ref_addr($mem$$Register);
    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);
    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true /* is_atomic */);
    __ cmpxchg($mem$$Register, $oldval_tmp$$Register, $newval_tmp$$Register, Assembler::int64, Assembler::aq /* acquire */, Assembler::rl /* release */, $res$$Register, true /* result_as_bool */);
  %}

  ins_pipe(pipe_slow);
%}

instruct zCompareAndExchangeP(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval,
                              iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{
  match(Set res (CompareAndExchangeP mem (Binary oldval newval)));
  predicate(UseZGC && ZGenerational && !needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "cmpxchg $res = $mem, $oldval, $newval, #@zCompareAndExchangeP" %}

  ins_encode %{
    guarantee($mem$$disp == 0, "impossible encoding");
    Address ref_addr($mem$$Register);
    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);
    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true /* is_atomic */);
    __ cmpxchg($mem$$Register, $oldval_tmp$$Register, $newval_tmp$$Register, Assembler::int64, Assembler::relaxed /* acquire */, Assembler::rl /* release */, $res$$Register);
    z_uncolor(masm, this, $res$$Register);
  %}

  ins_pipe(pipe_slow);
%}

instruct zCompareAndExchangePAcq(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval,
                                 iRegPNoSp oldval_tmp, iRegPNoSp newval_tmp, iRegPNoSp tmp1) %{
  match(Set res (CompareAndExchangeP mem (Binary oldval newval)));
  predicate(UseZGC && ZGenerational && needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP oldval_tmp, TEMP newval_tmp, TEMP tmp1, TEMP_DEF res);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "cmpxchg $res = $mem, $oldval, $newval, #@zCompareAndExchangePAcq" %}

  ins_encode %{
    guarantee($mem$$disp == 0, "impossible encoding");
    Address ref_addr($mem$$Register);
    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);
    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true /* is_atomic */);
    __ cmpxchg($mem$$Register, $oldval_tmp$$Register, $newval_tmp$$Register, Assembler::int64, Assembler::aq /* acquire */, Assembler::rl /* release */, $res$$Register);
    z_uncolor(masm, this, $res$$Register);
  %}

  ins_pipe(pipe_slow);
%}

instruct zGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{
  match(Set prev (GetAndSetP mem newv));
  predicate(UseZGC && ZGenerational && !needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP_DEF prev, TEMP tmp);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "atomic_xchg  $prev, $newv, [$mem], #@zGetAndSetP" %}

  ins_encode %{
    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true /* is_atomic */);
    __ atomic_xchg($prev$$Register, $prev$$Register, $mem$$Register);
    z_uncolor(masm, this, $prev$$Register);
  %}

  ins_pipe(pipe_serial);
%}

instruct zGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, iRegPNoSp tmp) %{
  match(Set prev (GetAndSetP mem newv));
  predicate(UseZGC && ZGenerational && needs_acquiring_load_reserved(n) && n->as_LoadStore()->barrier_data() != 0);
  effect(TEMP_DEF prev, TEMP tmp);

  ins_cost(2 * VOLATILE_REF_COST);

  format %{ "atomic_xchg_acq  $prev, $newv, [$mem], #@zGetAndSetPAcq" %}

  ins_encode %{
    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true /* is_atomic */);
    __ atomic_xchgal($prev$$Register, $prev$$Register, $mem$$Register);
    z_uncolor(masm, this, $prev$$Register);
  %}
  ins_pipe(pipe_serial);
%}
