#
# Copyright (c) 2010, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

doclet.Generating_0=正在生成{0}...
doclet.MissingSerialTag=在类{0}中, 默认的可序列化字段{1}缺少 @serial 标记。
doclet.MissingSerialDataTag=在类{0}中, 方法{1}中缺少 @serialData 标记。
doclet.Serializable_no_customization=未声明 readObject 或 writeObject 方法。
doclet.Serialized_Form=序列化表格
doclet.Serialized_Form_methods=序列化方法
doclet.Serialized_Form_fields=序列化字段
doclet.Serialized_Form_class=序列化概览
doclet.Option_conflict=选项{0}与{1}冲突
doclet.Option_reuse=重复使用的选项: {0}
doclet.Option_invalid={1} 选项的 {0} 参数无效
doclet.Option_doclint_no_qualifiers=-Xdoclint 参数不允许使用访问限定符
doclet.Option_doclint_invalid_arg=-Xdoclint 选项的参数无效
doclet.Option_doclint_package_invalid_arg=-Xdoclint/package 选项的参数无效
doclet.error.initializing.dest.dir=初始化目标目录时出错: {0}
doclet.exception.read.file=读取文件时出错: {0}\n\t({1})
doclet.exception.write.file=写入文件时出错: {0}\n\t({1})
doclet.exception.read.resource=读取系统资源时出错: {0}\n\t({1})
doclet.internal.exception=出现内部异常错误。\n\t({0})
doclet.internal.report.bug=如果在 Bug Database (https://bugs.java.com) 中没有找到有关该错误的 javadoc 工具 Bug，\n请通过 Java Bug 报告页 (https://bugreport.java.com) 提交 javadoc 工具 Bug。\n请在报告中附上错误消息和以下诊断信息。谢谢。
doclet.File_not_found=找不到文件: {0}
doclet.snippet_file_not_found=在源路径或片段路径中找不到文件：{0}
doclet.Copy_Overwrite_warning=未将文件{0}复制到 {1}, 因为现有文件具有相同名称...
doclet.Copy_Ignored_warning=未复制文件 {0}：名称无效
doclet.Copy_to_clipboard=复制
doclet.Copied_to_clipboard=已复制！
doclet.Copy_url_to_clipboard=复制 URL
doclet.Copy_snippet_to_clipboard=复制片段
doclet.Copying_File_0_To_Dir_1=正在将文件{0}复制到目录 {1}...
doclet.Copying_File_0_To_File_1=正在将文件{0}复制到文件{1}...
doclet.No_Public_Classes_To_Document=找不到可以文档化的公共或受保护的类。
doclet.destination_directory_not_directory_0=目标目录不是目录: {0}
doclet.destination_directory_not_writable_0=目标目录不可写: {0}
doclet.Encoding_not_supported=不支持编码: {0}
doclet.Building_Tree=正在构建所有程序包和类的树...
doclet.Building_Index=正在构建所有程序包和类的索引...
doclet.Building_Index_For_All_Classes=正在构建所有类的索引...
doclet.sourcetab_warning=-sourcetab 的参数必须是大于 0 的整数。
doclet.JavaScript_in_comment=文档注释中发现 JavaScript。\n使用 --allow-script-in-comments 可允许使用 JavaScript。
doclet.JavaScript_in_option=选项 {0} 包含 JavaScript。\n使用 --allow-script-in-comments 可允许使用 JavaScript。
doclet.Link_icon=链接图标
doclet.Link_to_section=链接到此节
doclet.Packages=程序包
doclet.All_Packages=所有程序包
doclet.Modules=模块
doclet.All_Modules=全部模块
doclet.Other_Packages=其他程序包
doclet.Other_Modules=其他模块
doclet.Notice_taglet_registered=注册的 Taglet {0}...
doclet.Notice_taglet_unseen=注: 找不到的定制标记: {0}
doclet.Notice_taglet_overridden=注: 覆盖标准标记的定制标记: {0}
doclet.Notice_taglet_conflict_warn=注: 可能覆盖将来的标准标记的定制标记: {0}。为了避免出现可能的覆盖, 请在定制标记名称中至少使用一个句点字符 (.)。
doclet.Error_taglet_not_registered=错误 - 尝试注册 Taglet {1}时抛出异常错误{0}...
doclet.Error_invalid_custom_tag_argument=错误 - 对于 -tag 选项, {0}是无效参数...
doclet.taglet_could_not_set_location = 无法设置 taglet 路径：{0}
doclet.not_standard_file_manager = 无法设置 taglet 路径；文件管理器不是 StandardJavaFileManager
doclet.Author=作者:
doclet.DefaultValue=默认值:
doclet.PropertyDescription=属性说明:
doclet.PropertyGetterWithName=获取{0}属性的值。
doclet.PropertyGetterReturn={0} 属性的值
doclet.PropertySetterWithName=设置{0}属性的值。
doclet.PropertySetterParam={0} 属性的值
doclet.PropertyMethodReturn={0} 属性
doclet.Default=默认值:
doclet.Parameters=参数:
doclet.TypeParameters=类型参数:
doclet.RecordComponents=记录组件：
doclet.Parameters_warn=@param argument "{0}" 不是参数名称。
doclet.Parameters_dup_warn=多次对参数 "{0}" 进行文档化。
doclet.TypeParameters_warn=@param argument "{0}" 不是类型参数名称。
doclet.TypeParameters_dup_warn=多次对类型参数 "{0}" 进行文档化。
doclet.RecordComponents_warn=@param argument "{0}" 不是记录组件名称。
doclet.RecordComponents_dup_warn=多次对记录组件 "{0}" 进行文档化。
doclet.Returns=返回:
doclet.Returns_0=返回 {0}。
doclet.Return_tag_on_void_method=不能在返回类型为空的方法中使用 @return 标记。
doclet.See_Also=另请参阅:
doclet.SerialData=序列数据:
doclet.Services=服务
doclet.Since=从以下版本开始:
doclet.Throws=抛出:
doclet.Version=版本:
doclet.Factory=工厂:
doclet.UnknownTag=未知标记。已注销的定制标记？
doclet.UnknownTagWithHint=未知标记。@{0} 键入有误或为已注销的定制标记？
doclet.inheritDocBadSupertype=找不到被覆盖的方法
doclet.inheritDocWithinInappropriateTag=不能在此标记中使用 @inheritDoc
doclet.inheritDocNoDoc=被覆盖的方法不记录异常错误类型 {0}
doclet.throwsInheritDocUnsupported=不是由方法声明的异常错误类类型参数不支持 @inheritDoc；直接记录此类异常错误类型
doclet.noInheritedDoc=使用了 @inheritDoc, 但{0}未覆盖或实现任何方法。
doclet.tag_misuse=不能在{1}文档中使用标记{0}。只能在以下类型的文档中使用该标记: {2}。
doclet.Package_Summary=程序包概要
doclet.Requires_Summary=必需项
doclet.Indirect_Requires_Summary=间接必需项
doclet.Indirect_Exports_Summary=间接导出项
doclet.Indirect_Opens_Summary=间接打开项
doclet.Exported_Packages_Summary=导出项
doclet.Opened_Packages_Summary=打开项
doclet.Concealed_Packages_Summary=已隐藏
doclet.From=从
doclet.Uses_Summary=使用
doclet.Provides_Summary=提供
doclet.Nested_Class_Summary=嵌套类概要
doclet.Annotation_Type_Optional_Member_Summary=可选元素概要
doclet.Annotation_Type_Required_Member_Summary=必需元素概要
doclet.Field_Summary=字段概要
doclet.Property_Summary=属性概要
doclet.Enum_Constant_Summary=枚举常量概要
doclet.Constructor_Summary=构造器概要
doclet.Method_Summary=方法概要
doclet.Interfaces=接口
doclet.Enums=枚举
doclet.EnumClasses=枚举类
doclet.RecordClasses=记录类
doclet.Related_Packages=相关程序包
doclet.AnnotationTypes=批注类型
doclet.AnnotationInterfaces=批注接口
doclet.ExceptionClasses=异常错误类
doclet.Classes=类
doclet.All_Classes_And_Interfaces=所有类和接口
doclet.All_Superinterfaces=所有超级接口:
doclet.All_Implemented_Interfaces=所有已实现的接口:
doclet.Interface=接口
doclet.Class=类
doclet.AnnotationType=批注类型
doclet.AnnotationInterface=批注接口
doclet.annotationtype=批注类型
doclet.annotationinterface=批注接口
doclet.annotationtypes=批注类型
doclet.annotationinterfaces=批注接口
doclet.Enum=枚举
doclet.EnumClass=枚举类
doclet.enum=枚举
doclet.enumclass=枚举类
doclet.enums=枚举
doclet.enumclasses=枚举类
doclet.interface=接口
doclet.class=类
doclet.RecordClass=记录类
doclet.recordclass=记录类
doclet.ExceptionClass=异常错误类
doclet.exceptionclass=异常错误类
doclet.ExportedTo=已导出到模块
doclet.OpenedTo=已打开到模块
doclet.Package_private=(专用程序包)
doclet.Nested_Classes_Interfaces_Inherited_From_Class=从类继承的嵌套类/接口
doclet.Nested_Classes_Interfaces_Inherited_From_Interface=从接口继承的嵌套类/接口
doclet.Nested_Classes_Interfaces_Declared_In_Class=在类中声明的嵌套类/接口
doclet.Nested_Classes_Interfaces_Declared_In_Interface=在接口中声明的嵌套类/接口
doclet.Methods_Inherited_From_Class=从类继承的方法
doclet.Methods_Inherited_From_Interface=从接口继承的方法
doclet.Methods_Declared_In_Class=在类中声明的方法
doclet.Methods_Declared_In_Interface=在接口中声明的方法
doclet.Fields_Inherited_From_Class=从类继承的字段
doclet.Fields_Inherited_From_Interface=从接口继承的字段
doclet.Fields_Declared_In_Class=在类中声明的字段
doclet.Fields_Declared_In_Interface=在接口中声明的字段
doclet.Properties_Inherited_From_Class=从类继承的属性
doclet.Properties_Inherited_From_Interface=从接口继承的属性
doclet.Properties_Declared_In_Class=在类中声明的属性
doclet.Properties_Declared_In_Interface=在接口中声明的属性
doclet.Annotation_Type_Member_Detail=元素详细资料
doclet.Enum_Constant_Detail=枚举常量详细资料
doclet.Constants_Summary=常量字段值
doclet.Field_Detail=字段详细资料
doclet.Property_Detail=属性详细资料
doclet.Method_Detail=方法详细资料
doclet.Constructor_Detail=构造器详细资料
doclet.Deprecated=已过时。
doclet.DeprecatedForRemoval=已过时, 待删除: 此 API 元素将从以后的版本中删除。
doclet.Groupname_already_used=在 -group 选项中, groupname 已使用: {0}
doclet.value_tag_invalid_reference={0} (由 @value 标记引用) 为未知引用。
doclet.value_tag_invalid_constant=@value 标记 (引用{0}) 只能在常量中使用。
doclet.value_tag_invalid_use=此处不能使用 @value 标记。
doclet.value_tag_invalid_format=格式无效：{0}
doclet.dest_dir_create=正在创建目标目录: "{0}"
doclet.in={1}中的{0}
doclet.Fields=字段
doclet.Preview=预览。
doclet.Restricted=受限制。
doclet.Properties=属性
doclet.Constructors=构造器
doclet.Methods=方法
doclet.All_Methods=所有方法
doclet.Static_Methods=静态方法
doclet.Instance_Methods=实例方法
doclet.Abstract_Methods=抽象方法
doclet.Concrete_Methods=具体方法
doclet.Default_Methods=默认方法
doclet.Deprecated_Methods=已过时的方法
doclet.Annotation_Type_Optional_Members=可选元素
doclet.Annotation_Type_Required_Members=所需元素
doclet.Enum_Constants=枚举常量
doclet.Nested_Classes=嵌套类
doclet.Modifier=限定符
doclet.Type=类型
doclet.Modifier_and_Type=修饰符和类型
doclet.Implementation=实现:
doclet.search=搜索
doclet.search_placeholder=搜索
doclet.search_in_documentation=在文档中搜索
doclet.search_reset=重置
doclet.Field=字段
doclet.Property=属性
doclet.Constructor=构造器
doclet.Method=方法
doclet.Annotation_Type_Optional_Member=可选元素
doclet.Annotation_Type_Required_Member=必需的元素
doclet.Annotation_Type_Member=批注类型元素
doclet.Annotation_Interface_Member=批注接口元素
doclet.Enum_Constant=枚举常量
doclet.Description=说明
doclet.ConstantField=常量字段
doclet.Value=值
doclet.table_of_contents=目录
doclet.hide_sidebar=隐藏子工具栏
doclet.show_sidebar=显示子工具栏
doclet.filter_label=筛选器
doclet.filter_table_of_contents=筛选目录
doclet.filter_reset=重置
doclet.linkMismatch_PackagedLinkedtoModule=进行文档化的代码使用了未命名模块中的程序包，但在 {0} 中定义的程序包在命名模块中。
doclet.linkMismatch_ModuleLinkedtoPackage=进行文档化的代码使用了模块，但在 {0} 中定义的程序包在未命名模块中。
doclet.urlRedirected=URL {0} 已重定向到 {1} — 更新命令行选项以隐藏此警告。
doclet.unexpectedRedirect=URL {0} 意外重定向到 {1}
doclet.duplicate.comment.for.property=属性注释重复。\n删除属性字段或此方法的注释以隐藏此警告。

#Documentation for Enums
doclet.enum_values_doc.fullbody=返回包含该枚举类型的常量的数组，\n顺序与声明这些常量的顺序相同
doclet.enum_class_values_doc.fullbody=返回包含该枚举类的常量的数组，\n顺序与声明这些常量的顺序相同

doclet.enum_values_doc.return=包含该枚举类型的常量的数组，顺序与声明这些常量的顺序相同
doclet.enum_class_values_doc.return=包含该枚举类的常量的数组，顺序与声明这些常量的顺序相同

doclet.enum_valueof_doc.fullbody=返回带有指定名称的该类型的枚举常量。\n字符串必须与用于声明该类型的枚举常量的\n标识符<i>完全</i>匹配。(不允许有多余\n的空格字符。)
doclet.enum_class_valueof_doc.fullbody=返回带有指定名称的该类的枚举常量。\n字符串必须与用于声明该类的枚举常量的\n标识符<i>完全</i>匹配。（不允许有多余\n的空格字符。）

doclet.enum_valueof_doc.param_name=要返回的枚举常量的名称。

doclet.enum_valueof_doc.return=返回带有指定名称的枚举常量

doclet.enum_valueof_doc.throws_ila=如果该枚举类型没有带有指定名称的常量
doclet.enum_class_valueof_doc.throws_ila=如果该枚举类没有带有指定名称的常量

doclet.enum_valueof_doc.throws_npe=如果参数为空值


#Documentation for records
doclet.record_constructor_doc.fullbody=创建 {0} 记录类的实例。

doclet.record_constructor_doc.param_name={0} 记录组件的值

doclet.record_equals_doc.fullbody.head=指示某个其他对象是否“等于”此对象。如果两个对象属于同一个类，而且所有记录组件都相等，则这两个对象相等。

doclet.record_equals_doc.fullbody.tail.both=使用 {@link java.util.Objects#equals(Object,Object) Objects::equals(Object,Object)} 对参考组件进行比较；使用 '==' 对基元组件进行比较

doclet.record_equals_doc.fullbody.tail.primitive=此记录类中的所有组件都使用 '==' 进行比较。

doclet.record_equals_doc.fullbody.tail.reference=此记录类中的所有组件都使用 {@link java.util.Objects#equals(Object,Object) Objects::equals(Object,Object)} 进行比较。

doclet.record_equals_doc.param_name=要与之进行比较的对象

doclet.record_equals_doc.return=如果此对象与 {0} 参数相同，则为 <code>true</code>；否则为 <code>false</code>。

doclet.record_hashCode_doc.fullbody=返回此对象的哈希代码值。此值派生自每个记录组件的哈希代码。

doclet.record_hashCode_doc.return=此对象的哈希代码值

doclet.record_toString_doc.fullbody=返回此记录类的字符串表示形式。此表示形式包含类的名称，后跟每个记录组件的名称和值。

doclet.record_toString_doc.return=此对象的字符串表示形式

doclet.record_accessor_doc.fullbody=返回 {0} 记录组件的值。

doclet.record_accessor_doc.return={0} 记录组件的值

doclet.record_field_doc.fullbody={0} 记录组件的字段。

doclet.platform.docs.old=https://docs.oracle.com/javase/{0}/docs/api/
doclet.platform.docs.new=https://docs.oracle.com/en/java/javase/{0}/docs/api/
doclet.platform.docs.ea=https://download.java.net/java/early_access/jdk{0}/docs/api/

doclet.search.enter_search_term=输入搜索词
doclet.search.no_results=未找到结果
doclet.search.one_result=找到一个结果
doclet.search.many_results=找到 {0} 个结果
doclet.search.loading=正在加载搜索索引...
doclet.search.searching=正在搜索...
doclet.search.redirecting=正在重定向到第一个结果...
doclet.search.modules=模块
doclet.search.packages=程序包
doclet.search.classes_and_interfaces=类和接口
doclet.search.types=类型
doclet.search.members=成员
doclet.search.search_tags=搜索标记

doclet.snippet.contents.none=@snippet 未指定内容

doclet.snippet.contents.ambiguity.external=@snippet 指定了多个外部内容，这会引起混淆

doclet.snippet.region.not_found=找不到区域："{0}"

doclet.tag.attribute.value.illegal=属性 "{0}" 的值非法："{1}"

doclet.tag.attribute.value.missing=属性 "{0}" 缺少值

doclet.tag.attribute.repeated=重复属性："{0}"

doclet.snippet.contents.mismatch=内容不匹配：\n{0}

doclet.snippet.markup=片段标记：{0}

doclet.snippet.markup.spurious=虚假标记
doclet.snippet.markup.attribute.absent=缺少属性 "{0}"
doclet.snippet.markup.attribute.simultaneous.use=同时使用了属性 "{0}" 和 "{1}"
doclet.snippet.markup.attribute.unexpected=意外的属性
doclet.snippet.markup.attribute.value.invalid=属性值无效
doclet.snippet.markup.attribute.value.unterminated=未终止的属性值
doclet.snippet.markup.regex.invalid=正则表达式无效
doclet.snippet.markup.region.duplicated=重复的区域
doclet.snippet.markup.region.none=没有结束区域
doclet.snippet.markup.region.unpaired=区域不配对
doclet.snippet.markup.tag.non.existent.lines=标记引用不存在的行

# 0: path
doclet.cannot_use_snippet_path=不能将 ''--snippet-path'' 选项与给定的文件管理器 {0} 一起使用

# 0: path; 1: exception
doclet.error_setting_snippet_path=设置片段路径 {0} 时出错：{1}
