#
# Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

javadoc.description=从 Java 源文件生成 API 文档的 HTML 页面

main.errors={0} 个错误
main.error={0} 个错误
main.warnings={0} 个警告
main.warning={0} 个警告

main.usage=用法:\n    javadoc [options] [packagenames] [sourcefiles] [@files]\n其中, 选项包括:

main.did-you-mean=您要查找的是：{0}

main.did-you-mean-one-of=您要查找的是以下项之一：{0}

main.for-more-details-see-usage=有关可用选项的更多详细信息，请使用 --help 或 --help-extra

main.opt.at.arg=<file>
main.opt.at.desc=从文件读取选项和文件名

main.opt.public.desc=只显示公共类型和成员。对于命名模块,\n显示导出的程序包和模块的 API。

main.opt.protected.desc=显示受保护/公共类型和成员 (默认设置)。对于\n命名模块, 显示导出的程序包和模块的 API。

main.opt.package.desc=显示程序包/受保护/公共类型和成员。对于 \n命名模块, 显示所有程序包和所有模块详细信息。

main.opt.private.desc=显示所有类型和成员。对于命名模块,\n显示所有程序包和所有模块详细信息。

main.opt.show.members.arg=<值>
main.opt.show.members.desc=指定将文档化的成员 (字段, 方法等), 其值可以\n为 "public", "protected", "package" 或 \n"private" 之一。默认值为 "protected", 该值将\n显示公共和受保护成员, "public" 将仅显示\n公共成员, "package" 将显示公共, 受保护和\n程序包成员, "private" 将显示所有成员。

main.opt.show.types.arg=<值>
main.opt.show.types.desc=指定将文档化的类型 (类, 接口等), 其值可以\n为 "public", "protected", "package" 或 \n"private" 之一。默认值为 "protected", 该值将\n显示公共和受保护类型, "public" 将仅显示\n公共类型, "package" 将显示公共, 受保护和\n程序包类型, "private" 将显示所有类型。

main.opt.show.packages.arg=<值>
main.opt.show.packages.desc=指定将文档化的模块的程序包。\n可能的值为 "exported" 或 "all" 程序包。

main.opt.show.module.contents.arg=<值>
main.opt.show.module.contents.desc=指定模块声明的文档粒度。\n可能的值为 "api" 或 "all"。

main.opt.expand.requires.arg=<值>
main.opt.expand.requires.desc=指示工具展开要文档化的模块集。\n默认情况下, 将仅文档化命令行中明确\n指定的模块。值 "transitive" 将额外包含\n这些模块的所有 "requires transitive"\n被依赖对象。值 "all" 将包含这些模块\n的所有被依赖对象。

main.opt.help.desc=显示命令行选项并退出

main.opt.module.arg=<模块>(,<模块>)*
main.opt.module.desc=文档化指定模块

main.opt.doclet.arg=<类>
main.opt.doclet.desc=通过替代 doclet 生成输出

main.opt.docletpath.arg=<路径>
main.opt.docletpath.desc=指定查找 doclet 类文件的位置

main.opt.module.source.path.arg=<路径>
main.opt.module.source.path.desc=指定查找多个模块的输入源文件的位置

main.opt.upgrade.module.path.arg=<路径>
main.opt.upgrade.module.path.desc=覆盖可升级模块位置

main.opt.module.path.arg=<路径>
main.opt.module.path.desc=指定查找应用程序模块的位置

main.opt.add.modules.arg=<模块>(,<模块>)*
main.opt.add.modules.desc=除了初始模块之外要解析的根模块; \n如果 <模块> 为 ALL-MODULE-PATH, \n则为模块路径中的所有模块。

main.opt.limit.modules.arg=<模块>(,<模块>)*
main.opt.limit.modules.desc=限制可观察模块的领域

main.opt.source.path.arg=<路径>
main.opt.source.path.desc=指定查找源文件的位置

main.opt.class.path.arg=<路径>
main.opt.class.path.desc=指定查找用户类文件的位置

main.opt.exclude.arg=<程序包列表>
main.opt.exclude.desc=指定要排除的程序包列表

main.opt.subpackages.arg=<子程序包列表>
main.opt.subpackages.desc=指定要递归加载的子程序包

main.opt.breakiterator.desc=计算带有 BreakIterator 的第一个语句

main.opt.bootclasspath.arg=<路径>
main.opt.bootclasspath.desc=覆盖用于非模块化发行版的\n平台类文件的位置

main.opt.system.arg=<jdk>
main.opt.system.desc=覆盖用于模块化发行版的系统模块的位置

main.opt.release.arg=<发行版>
main.opt.release.desc=提供与指定发行版的源兼容性

main.opt.source.arg=<发行版>
main.opt.source.desc=提供与指定发行版的源兼容性

main.opt.enable.preview.desc=启用预览语言功能。与 -source 或 --release \n一起使用。

main.opt.extdirs.arg=<目录列表>
main.opt.extdirs.desc=覆盖所安装扩展的位置

main.opt.verbose.desc=输出有关 Javadoc 正在执行的操作的消息

main.opt.locale.arg=<名称>
main.opt.locale.desc=要使用的区域设置, 例如, en_US 或 en_US_WIN

main.opt.encoding.arg=<名称>
main.opt.encoding.desc=源文件编码名称

main.opt.quiet.desc=不显示状态消息

main.opt.version.desc=输出版本信息

main.opt.J.arg=<标记>
main.opt.J.desc=直接将 <标记> 传递给运行时系统

main.opt.help.extra.desc=输出非标准选项的提要并退出

main.opt.Werror.desc=如果出现任何警告，将报告错误

main.usage.foot=\nGNU 样式的选项可使用 '=' (而非空白) 来分隔选项名称\n及其值。\n

main.Xusage=

main.opt.Xmaxerrs.arg=<数字>
main.opt.Xmaxerrs.desc=设置要输出的错误的最大数目

main.opt.Xmaxwarns.arg=<数字>
main.opt.Xmaxwarns.desc=设置要输出的警告的最大数目

main.opt.add.exports.arg=<模块>/<程序包>=<其他模块>(,<其他模块>)*
main.opt.add.exports.desc=指定被视为已从其定义模块导出到其他模块\n或者导出到所有未命名模块 (如果 <其他模块> \n为 ALL-UNNAMED) 的程序包

main.opt.add.reads.arg=<模块>=<其他模块>(,<其他模块>)*
main.opt.add.reads.desc=指定被视为给定模块需要的其他模块。\n<其他模块> 可以为 ALL-UNNAMED \n以便要求未命名模块。

main.opt.patch.module.arg=<模块>=<文件>(:<文件>)*
main.opt.patch.module.desc=使用\nJAR 文件或目录中的类和资源覆盖\n        或增强模块

main.Xusage.foot=\n这些选项都是非标准选项, 如有更改, 恕不另行通知。

main.doclet.usage.header=\n由 {0} doclet 提供:

main.requires_argument=选项{0}需要参数。
main.unnecessary_arg_provided=选项 {0} 不需要参数
main.only_one_argument_with_equals=不能将 ''='' 语法用于需要多个参数的选项
main.invalid_flag=无效的标记: {0}
main.No_modules_packages_or_classes_specified=未指定模块, 程序包或类。
main.module_not_found=未找到模块 {0}
main.module_source_not_found=找不到模块 {0} 的源文件
main.cannot_use_sourcepath_for_modules=无法将源路径用于多个模块 {0}
main.module_not_found_on_sourcepath=在源路径中找不到模块 {0}
main.sourcepath_does_not_contain_module=源路径不包含模块 {0}
main.cant.read=无法读取{0}
main.Loading_source_files_for_package=正在加载程序包{0}的源文件...
main.Loading_source_file=正在加载源文件{0}...
main.Building_tree=正在构造 Javadoc 信息...
main.no_source_files_for_package=没有程序包{0}的源文件
main.package_not_found=找不到包{0}
main.fatal.error=遇到致命错误: {0}
main.out.of.memory=java.lang.OutOfMemoryError: 请增大内存。\n例如, 对于 JDK 经典或 HotSpot VM, 请增大选项 -J-Xmx,\n例如 -J-Xmx32m。
main.done_in=[在 {0} 毫秒内完成]
main.more_than_one_doclet_specified_0_and_1=指定了多个 doclet ({0}和{1})。
main.doclet_could_not_get_location=无法获取 {0} 的位置
main.doclet_could_not_set_location=无法设置 {0} 的位置
main.doclet_no_classloader_found=无法获取类加载器来加载 {0}
main.could_not_instantiate_class=无法实例化类 {0}
main.doclet_class_not_found=找不到 doclet 类{0}
main.malformed_locale_name=格式错误的语言环境名称: {0}
main.file_not_found=找不到文件: "{0}"
main.illegal_class_name=非法类名: "{0}"
main.illegal_package_name=非法的程序包名称: "{0}"
main.illegal_option_value=非法选项值: "{0}"
main.file.manager.list=列出文件时 FileManager 出错: "{0}"
main.assertion.error=断言失败："{0}"
main.warnings.Werror=发现警告, 但指定了 -Werror
main.unknown.error=出现未知错误
main.internal.error=出现内部错误
main.unexpected.exception=捕获到意外的异常错误: {0}
main.unknown.option.for.filemanager=选项不受文件管理器支持：{0}
main.bad.arg.for.filemanager.option=文件管理器选项 {0} 的值错误："{1}"
doclet.internal.report.bug=如果在 Bug Database (https://bugs.java.com) 中没有找到有关该错误的 javadoc 工具 Bug，\n请通过 Java Bug 报告页 (https://bugreport.java.com) 提交 javadoc 工具 Bug。\n请在报告中附上错误消息和以下诊断信息。谢谢。
main.not_a_doclet=类 {0} 不是有效 doclet。\n注意：从 JDK 13 开始，不再支持 com.sun.javadoc API。

javadoc.class_not_found=找不到类{0}。

javadoc.version={0} {1}
javadoc.fullversion={0}完整版本 "{1}"

javadoc.err.message={0}
javadoc.warn.message={0}
javadoc.note.message={0}
