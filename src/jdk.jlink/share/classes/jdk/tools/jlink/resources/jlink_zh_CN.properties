#
# Copyright (c) 2015, 2023, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

jlink.description=将一组模块及其相关项汇编和优化为定制运行时映像

main.usage.summary=用法: {0} <选项> --module-path <模块路径> --add-modules <模块>[,<模块>...]\n使用 --help 可列出可能的选项

main.usage=用法: {0} <选项> --module-path <模块路径> --add-modules <模块>[,<模块>...]\n可能的选项包括:

main.opt.help=\  -h, --help, -?                        输出此帮助消息

main.opt.version=\      --version                           版本信息

main.opt.module-path=\  -p, --module-path <path>              模块路径。\n                                        如果未指定，将使用 JDK 的 jmods \n                                        目录（如果存在该目录）。如果指定，\n                                        但它不包含 java.base 模块，\n                                        则将添加 JDK 的 jmods 目录\n                                        （如果存在该目录）。

main.opt.add-modules=\      --add-modules <mod>[,<mod>...]    除了初始模块之外要解析的\n                                        根模块。<mod> 还可以为 ALL-MODULE-PATH。

main.opt.limit-modules=\      --limit-modules <模块>[,<模块>...]  限制可观察模块的领域

main.opt.output=\      --output <路径>                     输出路径的位置

main.opt.launcher=\      --launcher <名称>=<模块>[/<主类>]\n                                        为模块和主类添加给定\n                                        名称的启动程序命令\n                                        (如果指定)

main.opt.bind-services=\      --bind-services                   链接服务提供方模块及其\n                                        被依赖对象

main.opt.suggest-providers=\      --suggest-providers [<名称>,...]  建议可从模块路径中实现\n                                        给定服务类型的提供方

main.command.files=\      @<文件名>                           从文件中读取选项

main.opt.endian=\      --endian <little|big>               所生成 jimage\n                                          的字节顺序 (默认值: native)

main.opt.save-opts=\      --save-opts <文件名>                将 jlink 选项保存在指定文件中

main.opt.ignore-signing-information=\      --ignore-signing-information        在映像中链接已签名模块化\n                                          JAR 的情况下隐藏致命错误。\n                                          已签名模块化 JAR 的签名\n                                          相关文件将不会复制到\n                                          运行时映像。

main.opt.verbose=\  -v, --verbose                         启用详细跟踪

main.msg.bug=jlink 中出现异常错误。如果在 Java Bug Database (https://bugreport.java.com/bugreport/) 中没有找到有关该错误的 Bug，请在该数据库中提交 Bug。请在报告中附上您的程序和以下诊断信息。谢谢。

main.extended.help=可用插件列表:

main.extended.help.footer=对于需要 <模式列表> 的选项, 值将为逗号分隔的元素列表, 每个元素使用以下格式之一:\n  <glob 模式>\n  glob:<glob 模式>\n  regex:<正则表达式模式>\n  @<文件名>, 其中“文件名”是包含要使用的模式的文件名, 每行一个模式\n\n

error.prefix=错误:
warn.prefix=警告:

err.empty.module.path=空模块路径
err.jlink.version.mismatch=jlink 版本 {0}.{1} 与目标 java.base 版本 {2}.{3} 不匹配
err.automatic.module:自动模块不能用于来自 {1} 的 jlink: {0}
err.unknown.byte.order:未知的字节顺序 {0}
err.launcher.main.class.empty:启动程序主类名不能为空: {0}
err.launcher.module.name.empty:启动程序模块名称不能为空: {0}
err.launcher.value.format:启动程序值应使用“<命令>=<模块>[/<主类>]”格式: {0}
err.output.must.be.specified:必须指定 --output
err.modulepath.must.be.specified:未指定 --module-path，此运行时映像不包含 jmods 目录。
err.mods.must.be.specified:没有将任何模块指定到{0}
err.path.not.found=找不到路径: {0}
err.path.not.valid=无效路径: {0}
err.file.not.found=找不到文件: {0}
err.file.error=无法访问文件: {0}
err.dir.exists={0} 已存在
err.badpattern=错误的模式 {0}
err.unknown.option=未知选项: {0}
err.missing.arg=没有为{0}指定值
err.internal.error=内部错误: {0} {1} {2}
err.invalid.arg.for.option={0} 不接受 "{1}" 参数
err.option.after.class=必须在类之前指定选项: {0}
err.option.unsupported=不支持{0}: {1}
err.orphan.arguments=无效的参数: {0}
err.config.defaults=配置中缺少属性 {0}
err.config.defaults.value=默认属性中的值错误: {0}
err.bom.generation=未能生成 bom 文件: {0}
err.not.a.module.directory=目录 {0} 下不包含 module-info.class 文件
err.cannot.read.module.info=无法从 {0} 读取模块描述符
err.not.modular.format=选定模块 {0} ({1}) 未使用 jmod 或模块化 JAR 格式
err.signing=当前不支持已签名模块化 JAR {0}, 使用 --ignore-signing-information 可隐藏错误
err.cannot.determine.target.platform=无法根据 {0} 确定目标平台
err.unknown.target.platform=未知目标平台 {0}
err.target.endianness.mismatch=指定的 --endian {0} 与目标平台 {1} 的字节顺序不匹配
warn.signing=警告: 当前不支持已签名模块化 JAR {0}
warn.invalid.arg=类名无效或路径名不存在: {0}
warn.split.package=已在{1} {2}中定义程序包{0}
warn.provider.notfound=找不到为 --suggest-providers 指定的服务提供方: {0}
no.suggested.providers=指定了 --bind-services 选项。未建议其他提供方。
suggested.providers.header=建议的提供方
providers.header=提供方
