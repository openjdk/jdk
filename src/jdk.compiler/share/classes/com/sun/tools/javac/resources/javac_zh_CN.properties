#
# Copyright (c) 1999, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## tool

javac.description=读取 Java 类和接口定义，并将其编译为字节码和类文件

## standard options

javac.opt.g=生成所有调试信息
javac.opt.g.none=不生成任何调试信息
javac.opt.g.lines.vars.source=只生成某些调试信息
javac.opt.nowarn=不生成任何警告
javac.opt.verbose=输出有关编译器正在执行的操作的消息
javac.opt.deprecation=输出使用已过时的 API 的源位置
javac.opt.classpath=指定查找用户类文件和批注处理程序的位置
javac.opt.modulepath=指定查找应用程序模块的位置
javac.opt.sourcepath=指定查找输入源文件的位置
javac.opt.m=只编译指定的模块，请检查时间戳
javac.opt.modulesourcepath=指定查找多个模块的输入源文件的位置
javac.opt.bootclasspath=覆盖引导类文件的位置
javac.opt.system=覆盖系统模块位置
javac.opt.upgrademodulepath=覆盖可升级模块位置
javac.opt.endorseddirs=覆盖签名的标准路径的位置
javac.opt.extdirs=覆盖所安装扩展的位置
javac.opt.processorpath=指定查找批注处理程序的位置
javac.opt.processormodulepath=指定查找批注处理程序的模块路径
javac.opt.processor=要运行的批注处理程序的名称;\n绕过默认的搜索进程
javac.opt.parameters=生成元数据以用于方法参数的反射
javac.opt.proc.none.only=控制是否执行批注处理和/或编译。
javac.opt.d=指定放置生成的类文件的位置
javac.opt.sourceDest=指定放置生成的源文件的位置
javac.opt.headerDest=指定放置生成的头文件的位置
javac.opt.J=直接将 <标记> 传递给运行时系统
javac.opt.encoding=指定源文件使用的字符编码
javac.opt.profile=检查使用的 API 在指定的配置文件中是否可用。\n此选项已过时，可能会在未来发行版中删除。
javac.opt.target=生成适合指定的 Java SE 发行版的类文件。支持的发行版：{0}
javac.opt.release=为指定的 Java SE 发行版编译。支持的发行版：{0}
javac.opt.source=提供与指定的 Java SE 发行版的源兼容性。支持的发行版：{0}
javac.opt.Werror=出现警告时终止编译
javac.opt.A=传递给批注处理程序的选项
javac.opt.implicit=指定是否为隐式引用文件生成类文件
javac.opt.pkginfo=指定 package-info 文件的处理
javac.opt.multi-release=指定在多发行版 jar 中使用哪个发行版
javac.opt.arg.class=<class>
javac.opt.arg.class.list=<class1>[,<class2>,<class3>...]
javac.opt.arg.flag=<flag>
javac.opt.arg.key.equals.value=key[=value]
javac.opt.arg.path=<path>
javac.opt.arg.mspath=<module-source-path>
javac.opt.arg.m=<模块>(,<模块>)*
javac.opt.arg.jdk=<jdk>|none
javac.opt.arg.dirs=<dirs>
javac.opt.arg.directory=<directory>
javac.opt.arg.encoding=<encoding>
javac.opt.arg.profile=<profile>
javac.opt.arg.release=<release>
javac.opt.arg.number=<number>
javac.opt.plugin=要运行的插件的名称和可选参数
javac.opt.arg.plugin="名称参数"
javac.opt.arg.multi-release=<release>
javac.opt.arg.default.module.for.created.files=<module-name>

## extended options

javac.opt.maxerrs=设置要输出的错误的最大数目
javac.opt.maxwarns=设置要输出的警告的最大数目
javac.opt.nogj=该语言不接受泛型
javac.opt.moreinfo=输出类型变量的扩展信息
javac.opt.printsearch=输出有关搜索类文件的位置的信息
javac.opt.prompt=在每次出错后停止
javac.opt.s=发出 java 源而不是类文件
javac.opt.version=版本信息
javac.opt.arg.pathname=<pathname>
javac.opt.arg.file=<filename>
javac.opt.Xbootclasspath.p=置于引导类路径之前
javac.opt.Xbootclasspath.a=置于引导类路径之后
javac.opt.Xlint=启用建议的警告
javac.opt.Xlint.all=启用所有警告
javac.opt.Xlint.none=禁用所有警告
#L10N: do not localize: -Xlint
javac.opt.arg.Xlint=<key>(,<key>)*
javac.opt.Xlint.custom=要启用或禁用的警告（以逗号分隔）。\n在关键字前面加上 ''-'' 可禁用指定的警告。\n使用 --help-lint 可查看受支持的关键字。
javac.opt.Xlint.desc.auxiliaryclass=有关辅助类在源文件中隐藏, 但在其他文件中使用的警告。

javac.opt.Xlint.desc.cast=有关使用了不必要转换的警告。

javac.opt.Xlint.desc.classfile=有关与类文件内容相关的问题的警告。

javac.opt.Xlint.desc.dangling-doc-comments=有关未附加到任何声明的悬挂文档注释的警告。

javac.opt.Xlint.desc.missing-explicit-ctor=有关导出的程序包中的公共和受保护类中缺少显式构造器的警告。

javac.opt.Xlint.desc.deprecation=有关使用了已过时项的警告。

javac.opt.Xlint.desc.dep-ann=有关项在 JavaDoc 中标记为已过时但未使用 @Deprecated 批注的警告。

javac.opt.Xlint.desc.divzero=有关除以常量整数 0 的警告。

javac.opt.Xlint.desc.empty=有关 if 之后没有语句的警告。

javac.opt.Xlint.desc.exports=有关与模块导出相关的问题的警告。

javac.opt.Xlint.desc.fallthrough=有关从 switch 语句的一个 case 向下顺序执行到下一个 case 的警告。

javac.opt.Xlint.desc.finally=有关 finally 子句未正常终止的警告。

javac.opt.Xlint.desc.incubating=有关使用 incubating 模块的警告。

javac.opt.Xlint.desc.lossy-conversions=有关复合赋值中的转换可能会有损失的警告。

javac.opt.Xlint.desc.module=有关模块系统相关问题的警告。

javac.opt.Xlint.desc.opens=有关与模块打开相关的问题的警告。

javac.opt.Xlint.desc.options=有关与使用命令行选项相关的问题的警告。

javac.opt.Xlint.desc.output-file-clash=在编译期间覆盖输出文件时发出警告。在某些情况下（例如在不区分大小写的文件系统中）\n                         可能会发生这种情况。涉及类文件、头文件和源文件。

javac.opt.Xlint.desc.overloads=有关与方法重载相关的问题的警告。

javac.opt.Xlint.desc.overrides=有关与方法覆盖相关的问题的警告。

javac.opt.Xlint.desc.path=有关命令行上的路径元素无效的警告。

javac.opt.Xlint.desc.processing=有关与批注处理相关的问题的警告。

javac.opt.Xlint.desc.rawtypes=有关使用了原始类型的警告。

javac.opt.Xlint.desc.removal=有关使用了标记为待删除的 API 的警告。

javac.opt.Xlint.desc.requires-automatic=有关在 requires 子句中使用自动模块的警告。

javac.opt.Xlint.desc.requires-transitive-automatic=有关 requires 过渡中的自动模块的警告。

javac.opt.Xlint.desc.serial=有关没有 serialVersionUID 字段的可序列化类的警告。\n                         以及有关可序列化和可外部化的类和接口中其他可疑声明的警告。

javac.opt.Xlint.desc.static=有关使用实例来访问静态成员的警告。

javac.opt.Xlint.desc.strictfp=有关不必要地使用了 strictfp 修饰符的警告。

javac.opt.Xlint.desc.text-blocks=有关文本块缩进中的空格字符不一致的警告。

javac.opt.Xlint.desc.this-escape=构造器调用的方法可能在外部子类中被覆盖时发出警告。\n                         此类方法将在子类构造器完成其初始化之前执行。

javac.opt.Xlint.desc.try=有关与使用 try 块 (例如 try-with-resources) 相关的问题的警告。

javac.opt.Xlint.desc.unchecked=有关未检查操作的警告。

javac.opt.Xlint.desc.varargs=有关潜在不安全的 vararg 方法的警告。

javac.opt.Xlint.desc.preview=有关使用预览语言功能的警告。

javac.opt.Xlint.desc.restricted=有关使用受限制方法的警告。

javac.opt.Xlint.desc.synchronization=有关尝试在基于值的类的实例上同步的警告。

javac.opt.Xdoclint=为 javadoc 注释中的问题启用建议的检查
# L10N: do not localize: all none
javac.opt.Xdoclint.subopts = (all|none|[-]<group>)[/<access>]

# L10N: do not localize: accessibility html missing reference syntax
# L10N: do not localize: public protected package private
javac.opt.Xdoclint.custom=为 javadoc 注释中的问题启用或禁用特定检查,\n        其中 <group> 为 accessibility, html, missing, reference 或 syntax 之一。\n        <access> 为 public, protected, package 或 private 之一。

javac.opt.Xdoclint.package.args = [-]<程序包>(,[-]<程序包>)*

javac.opt.Xdoclint.package.desc=在特定的程序包中启用或禁用检查。每个 <程序包> 是\n限定的程序包名称，或程序包名称前缀后跟 ''.*''\n（这将扩展到给定程序包的所有子程序包）。在每个 <程序包>\n前面加上 ''-'' 可对指定程序包禁用检查。

javac.opt.Xstdout=重定向标准输出
javac.opt.X=输出额外选项的帮助
javac.opt.help=输出此帮助消息
javac.opt.help.lint=输出 -Xlint 支持的关键字
javac.opt.help.lint.header=-Xlint 支持的关键字包括：
javac.opt.print=输出指定类型的文本表示
javac.opt.printRounds=输出有关批注处理循环的信息
javac.opt.printProcessorInfo=输出有关请求处理程序处理哪些批注的信息
javac.opt.userpathsfirst=在引导类路径之前而不是之后搜索类的类路径和源路径
javac.opt.prefer=指定读取文件, 当同时找到隐式编译类的源文件和类文件时
javac.opt.preview=启用预览语言功能。要与 -source 或 --release 一起使用。
javac.opt.AT=从文件读取选项和文件名
javac.opt.diags=选择诊断模式
javac.opt.addExports=指定被视为已从其定义模块导出到其他模块或者导出到所有\n        未命名模块 (如果 <other-module> 为 ALL-UNNAMED) 的程序包。
javac.opt.arg.addExports=<模块>/<程序包>=<其他模块>(,<其他模块>)*
javac.opt.addReads=指定被视为给定模块所必需的其他模块。\n<其他模块> 可以为 ALL-UNNAMED \n以便要求提供未命名模块。
javac.opt.arg.addReads=<模块>=<其他模块>(,<其他模块>)*
javac.opt.patch=使用 JAR 文件或目录中的类和资源覆盖\n        或增强模块
javac.opt.arg.patch=<模块>=<文件>(:<文件>)*
javac.opt.addmods=除了初始模块之外要解析的根模块; 如果 <module>\n        为 ALL-MODULE-PATH,\n则为模块路径中的所有模块。
javac.opt.arg.addmods=<模块>(,<模块>)*
javac.opt.limitmods=限制可观察模块的领域
javac.opt.arg.limitmods=<模块>(,<模块>)*
javac.opt.module.version=指定正在编译的模块版本
javac.opt.arg.module.version=<版本>
javac.opt.inherit_runtime_environment=从运行时环境继承模块系统配置选项。
javac.opt.default.module.for.created.files=由批注处理程序创建的文件的备用目标模块 (如果未指定或推断任何模块)。
javac.opt.lineDocComments=禁用对带有以 ''///'' 开头的行的文档注释的支持

## messages

javac.msg.usage.header=用法: {0} <options> <source files>\n其中, 可能的选项包括:

javac.msg.usage=用法: {0} <选项> <源文件>\n使用 --help 可列出可能的选项

javac.msg.usage.nonstandard.footer=这些额外选项如有更改, 恕不另行通知。

javac.msg.bug=编译器 ({0}) 中出现异常错误。如果在 Bug Database (https://bugs.java.com) 中没有找到有关该错误的 Java 编译器 Bug，请通过 Java Bug 报告页 (https://bugreport.java.com) 提交 Java 编译器 Bug。请在报告中附上您的程序、以下诊断信息以及传递到 Java 编译器的参数。谢谢。

javac.msg.io=\n\n发生输入/输出错误。\n有关详细信息, 请参阅以下堆栈跟踪。\n

javac.msg.proc.annotation.uncaught.exception=\n\n批注处理程序抛出未捕获的异常错误。\n有关详细信息, 请参阅以下堆栈跟踪。\n

javac.msg.plugin.uncaught.exception=\n\n插件抛出未捕获的异常错误。\n有关详细信息, 请参阅以下堆栈跟踪。\n

javac.msg.resource=\n\n系统资源不足。\n有关详细信息, 请参阅以下堆栈跟踪。\n

javac.version={0} {1}
javac.fullVersion={0}完整版本 "{1}"

javac.msg.parameters.output=正在将 javac 参数打印到：{0}

javac.msg.parameters.output.error=尝试将 javac 参数打印到 {0} 时出错，参数将采用：
