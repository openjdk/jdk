#
# Copyright (c) 1999, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

## tool

javac.description=Java-Klasse und Schnittstellendefinitionen lesen und in Bytecode und Klassendateien kompilieren

## standard options

javac.opt.g=Generiert alle Debugginginformationen
javac.opt.g.none=Generiert keine Debugginginformationen
javac.opt.g.lines.vars.source=Generiert nur einige Debugginginformationen
javac.opt.nowarn=Generiert keine Warnungen
javac.opt.verbose=Gibt Nachrichten zu den Compilervorgängen aus
javac.opt.deprecation=Gibt Quellspeicherorte aus, wo veraltete APIs verwendet werden
javac.opt.classpath=Gibt an, wo sich die Benutzerklassendateien und Annotationsprozessoren befinden
javac.opt.modulepath=Gibt an, wo sich die Anwendungsmodule befinden
javac.opt.sourcepath=Gibt an, wo sich die Eingabequelldateien befinden
javac.opt.m=Kompiliert nur die angegebenen Module und prüft die Zeitstempel
javac.opt.modulesourcepath=Gib an, wo sich die Eingabequelldateien für mehrere Module befinden
javac.opt.bootclasspath=Setzt den Speicherort der Bootstrap-Klassendateien außer Kraft
javac.opt.system=Setzt den Speicherort der Systemmodule außer Kraft
javac.opt.upgrademodulepath=Setzt den Speicherort der upgradefähigen Module außer Kraft
javac.opt.endorseddirs=Setzt den Speicherort der unterstützten Standardpfade außer Kraft
javac.opt.extdirs=Setzt den Speicherort der installierten Erweiterungen außer Kraft
javac.opt.processorpath=Gibt an, wo sich die Annotationsprozessoren befinden
javac.opt.processormodulepath=Gibt einen Modulpfad an, wo sich die Annotationsprozessoren befinden
javac.opt.processor=Namen der auszuführenden Annotationsprozessoren;\nStandard-Discovery-Prozess wird umgangen
javac.opt.parameters=Generiert Metadaten zur Reflexion auf Methodenparameter
javac.opt.proc.none.only=Steuert, wo die Verarbeitung von Annotationen und/oder die Kompilierung ausgeführt wird
javac.opt.d=Gibt an, wo generierte Klassendateien abgelegt werden
javac.opt.sourceDest=Gibt an, wo generierte Quelldateien abgelegt werden
javac.opt.headerDest=Gibt an, wo generierte native Headerdateien abgelegt werden
javac.opt.J=Übergibt <Flag> direkt an das Laufzeitsystem
javac.opt.encoding=Gibt die von den Quelldateien verwendete Zeichencodierung an
javac.opt.profile=Vergewissern Sie sich, dass die verwendete API im angegebenen Profil verfügbar ist.\nDiese Option ist veraltet und wird in einem zukünftigen Release möglicherweise entfernt.
javac.opt.target=Generiert Klassendateien, die sich für das angegebene Java SE-Release eignen.\nUnterstützte Releases: \n    {0}
javac.opt.release=Kompiliert für das angegebene Java SE-Release.\nUnterstützte Releases: \n    {0}
javac.opt.source=Liefert Quellkompatibilität mit dem angegebenen Release von Java SE.\nUnterstützte Releases: \n    {0}
javac.opt.Werror=Kompilierung beenden, wenn Warnungen auftreten
javac.opt.A=Optionen zur Übergabe an die Annotationsprozessoren
javac.opt.implicit=Gibt an, ob Klassendateien für implizit referenzierte Dateien generiert werden
javac.opt.pkginfo=Gibt an, wie package-info-Dateien behandelt werden sollen
javac.opt.multi-release=Gibt an, welches Release in Multi-Release-JAR-Dateien verwendet werden soll
javac.opt.arg.class=<Klasse>
javac.opt.arg.class.list=<Klasse1>[,<Klasse2>,<Klasse3>...]
javac.opt.arg.flag=<Flag>
javac.opt.arg.key.equals.value=key[=value]
javac.opt.arg.path=<Pfad>
javac.opt.arg.mspath=<Modulquellpfad>
javac.opt.arg.m=<Modul>(,<Modul>)*
javac.opt.arg.jdk=<JDK>|none
javac.opt.arg.dirs=<Verzeichnisse>
javac.opt.arg.directory=<Verzeichnis>
javac.opt.arg.encoding=<Codierung>
javac.opt.arg.profile=<Profil>
javac.opt.arg.release=<Release>
javac.opt.arg.number=<Nummer>
javac.opt.plugin=Der Name und optional die Argumente für die Ausführung eines Plug-ins
javac.opt.arg.plugin="name args"
javac.opt.arg.multi-release=<Release>
javac.opt.arg.default.module.for.created.files=<Modulname>

## extended options

javac.opt.maxerrs=Legt die maximale Anzahl der zu auszugebenden Fehler fest
javac.opt.maxwarns=Legt die maximale Anzahl der auszugebenden Warnungen fest
javac.opt.nogj=Akzeptiert keine Generics in der Sprache
javac.opt.moreinfo=Gibt erweiterte Informationen für Typvariablen aus
javac.opt.printsearch=Gibt Informationen dazu aus, wo Klassendateien gesucht werden
javac.opt.prompt=Stoppt nach jedem Fehler
javac.opt.s=Gibt Java-Quellen statt Klassendateien aus
javac.opt.version=Versionsinformationen
javac.opt.arg.pathname=<Pfadname>
javac.opt.arg.file=<Dateiname>
javac.opt.Xbootclasspath.p=Dem Bootstrap Classpath voranstellen
javac.opt.Xbootclasspath.a=An Bootstrap Classpath anhängen
javac.opt.Xlint=Aktiviert die empfohlenen Warnungen
javac.opt.Xlint.all=Alle Warnungen aktivieren
javac.opt.Xlint.none=Alle Warnungen deaktivieren
#L10N: do not localize: -Xlint
javac.opt.arg.Xlint=<Schlüssel>(,<Schlüssel>)*
javac.opt.Xlint.custom=Warnungen, die aktiviert oder deaktiviert werden sollen, durch Komma getrennt.\nStellen Sie einem Schlüssel "-" voran, um die angegebene Warnung zu deaktivieren.\nVerwenden Sie "--help-lint", um die unterstützten Schlüssel anzuzeigen.
javac.opt.Xlint.desc.auxiliaryclass=Warnt vor Auxiliary-Klassen, die in einer Quelldatei verborgen sind und aus anderen Dateien heraus verwendet werden.

javac.opt.Xlint.desc.cast=Warnt vor unnötigen Umwandlungen mit Cast.

javac.opt.Xlint.desc.classfile=Warnt vor Problemen im Zusammenhang mit Klassendateiinhalten.

javac.opt.Xlint.desc.dangling-doc-comments=Warnt vor Dokumentationskommentaren, die an keine Deklaration angehängt sind.

javac.opt.Xlint.desc.missing-explicit-ctor=Warnt vor fehlenden expliziten Konstruktoren in öffentlichen und geschützten Klassen in exportierten Packages.

javac.opt.Xlint.desc.deprecation=Warnt vor der Verwendung veralteter Elemente.

javac.opt.Xlint.desc.dep-ann=Warnt vor Elementen, die in JavaDoc als veraltet markiert sind, jedoch nicht mit der Annotation @Deprecated versehen sind.

javac.opt.Xlint.desc.divzero=Warnt vor Division durch Ganzzahlkonstante 0.

javac.opt.Xlint.desc.empty=Warnt vor leerer Anweisung nach "if".

javac.opt.Xlint.desc.exports=Warnt vor Problemen in Bezug auf Modulexporte.

javac.opt.Xlint.desc.fallthrough=Warnt vor Weitergabe von einem Case einer Switch-Anweisung zum nächsten.

javac.opt.Xlint.desc.finally=Warnt vor Finally-Klauseln, die nicht normal beendet werden.

javac.opt.Xlint.desc.incubating=Warnt vor der Verwendung von Inkubatormodulen.

javac.opt.Xlint.desc.lossy-conversions=Warnung über möglichen Verlust von Konvertierungen in zusammengesetzten Zuweisungen.

javac.opt.Xlint.desc.module=Warnt vor Problemen im Zusammenhang mit dem Modulsystem.

javac.opt.Xlint.desc.opens=Warnt vor Problemen in Bezug auf Modulöffnungen.

javac.opt.Xlint.desc.options=Warnt vor Problemen im Zusammenhang mit der Verwendung von Befehlszeilenoptionen.

javac.opt.Xlint.desc.output-file-clash=Warnt, wenn eine Ausgabedatei bei der Kompilierung überschrieben wird. Dazu kann es beispielsweise\n                         bei Dateisystemen ohne Beachtung der Groß-/Kleinschreibung kommen. Deckt Klassendateien, native Headerdateien und Quelldateien ab.

javac.opt.Xlint.desc.overloads=Warnt vor Problemen in Bezug auf Methodenüberladung.

javac.opt.Xlint.desc.overrides=Warnt vor Problemen in Bezug auf Methodenaußerkraftsetzung.

javac.opt.Xlint.desc.path=Warnt vor ungültigen Pfadelementen in der Befehlszeile.

javac.opt.Xlint.desc.processing=Warnt vor Problemen in Bezug auf die Annotationsverarbeitung.

javac.opt.Xlint.desc.rawtypes=Warnt vor der Verwendung von Raw-Typen.

javac.opt.Xlint.desc.removal=Warnt vor der Verwendung einer API, die zum Entfernen markiert wurde.

javac.opt.Xlint.desc.requires-automatic=Warnt vor der Verwendung automatischer Module in den "Requires"-Klauseln.

javac.opt.Xlint.desc.requires-transitive-automatic=Warnt vor automatischen Modulen in "requires transitive".

javac.opt.Xlint.desc.serial=Warnt vor serialisierbaren Klassen, die kein serialVersionUID-Feld haben. \n                         Warnt auch vor anderen verdächtigen Deklarationen in serialisierbaren und externalisierbaren Klassen und Schnittstellen.

javac.opt.Xlint.desc.static=Warnt vor Zugriff auf ein statisches Mitglied mit einer Instanz.

javac.opt.Xlint.desc.strictfp=Warnt vor unnötiger Verwendung des strictfp-Modifizierers.

javac.opt.Xlint.desc.text-blocks=Warnt vor inkonsistenten Leerzeichen in Textblockeinzug.

javac.opt.Xlint.desc.this-escape=Warnt, wenn ein Konstruktor eine Methode aufruft, die in einer externen Unterklasse außer Kraft gesetzt werden könnte.\n                         Diese Methoden werden ausgeführt, bevor die Initialisierung des Unterklassenkonstruktors abgeschlossen wird.

javac.opt.Xlint.desc.try=Warnt vor Problemen im Zusammenhang mit try-Blöcken (d.h. try-with-resources).

javac.opt.Xlint.desc.unchecked=Warnt vor deaktivierten Vorgängen.

javac.opt.Xlint.desc.varargs=Warnt vor möglicherweise nicht sicheren vararg-Methoden.

javac.opt.Xlint.desc.preview=Warnt vor Verwendung von Vorschausprachfeatures.

javac.opt.Xlint.desc.restricted=Warnt vor der Verwendung eingeschränkter Methoden.

javac.opt.Xlint.desc.synchronization=Warnt vor Synchronisierungsversuchen mit Instanzen wertbasierter Klassen.

javac.opt.Xdoclint=Empfohlene Prüfungen für Probleme in javadoc-Kommentaren aktivieren
# L10N: do not localize: all none
javac.opt.Xdoclint.subopts = (all|none|[-]<Gruppe>)[/<Zugriff>]

# L10N: do not localize: accessibility html missing reference syntax
# L10N: do not localize: public protected package private
javac.opt.Xdoclint.custom=Aktiviert oder deaktiviert bestimmte Prüfungen auf Probleme in javadoc-Kommentaren,\nwobei <Gruppe> für "accessibility", "html", "missing", "reference" oder "syntax"\nund <Zugriff> für "public", "protected", "package" oder "private" steht.

javac.opt.Xdoclint.package.args = [-]<Packages>(,[-]<Package>)*

javac.opt.Xdoclint.package.desc=Aktiviert oder deaktiviert Prüfungen in bestimmten Packages. Jedes <Package> ist entweder\nein qualifizierter Packagename oder ein Packagenamenspräfix, gefolgt von ".*",\ndas sich auf alle Subpackages des angegebenen Packages bezieht. Jedem <Package>\nkann "-" vorangestellt werden, um Prüfungen für die angegebenen Packages zu deaktivieren.

javac.opt.Xstdout=Leitet die Standardausgabe um
javac.opt.X=Gibt Hilfe zu zusätzlichen Optionen aus
javac.opt.help=Gibt diese Hilfemeldung aus
javac.opt.help.lint=Gibt die unterstützten Schlüssel für -Xlint aus
javac.opt.help.lint.header=Die unterstützten Schlüssel für -Xlint sind:
javac.opt.print=Gibt eine Textdarstellung der angegebenen Typen aus
javac.opt.printRounds=Gibt Informationen zu Durchläufen der Annotationsverarbeitung aus
javac.opt.printProcessorInfo=Gibt Informationen dazu aus, welche Annotationen ein Prozessor\nverarbeiten soll
javac.opt.userpathsfirst=Durchsucht classpath und sourcepath vor anstatt nach bootclasspath nach Klassen
javac.opt.prefer=Gibt an, welche Datei gelesen werden soll, wenn sowohl eine Quell- als auch eine Klassendatei für eine implizit kompilierte Klasse gefunden werden
javac.opt.preview=Aktiviert Vorschausprachfeatures.\nWird in Verbindung mit -source oder --release verwendet.
javac.opt.AT=Liest Optionen und Dateinamen aus Datei
javac.opt.diags=Wählt einen Diagnosemodus aus
javac.opt.addExports=Gibt an, dass ein Package als aus seinem definierenden Modul in\nweitere Module oder, wenn <Anderes Modul> ALL-UNNAMED lautet, in alle unbenannten Module\nexportiert betrachtet werden soll.
javac.opt.arg.addExports=<Modul>/<Package>=<Anderes Modul>(,<Anderes Modul>)*
javac.opt.addReads=Gibt weitere Module an, die als von einem angegebenen Modul angefordert\nbetrachtet werden sollen. <Anderes Modul> kann ALL-UNNAMED lauten,\num das unbenannte Modul anzufordern.
javac.opt.arg.addReads=<Modul>=<Anderes Modul>(,<Anderes Modul>)*
javac.opt.patch=Setzt ein Modul außer Kraft oder erweitert es mit Klassen und Ressourcen\nin JAR-Dateien oder Verzeichnissen
javac.opt.arg.patch=<Modul>=<Datei>(:<Datei>)*
javac.opt.addmods=Root-Module, die zusätzlich zu den anfänglichen Modulen\naufgelöst werden sollen, oder alle Module im Modulpfad, wenn <Modul> ALL-MODULE-PATH lautet.
javac.opt.arg.addmods=<Modul>(,<Modul>)*
javac.opt.limitmods=Begrenzt die Gesamtzahl der beobachtbaren Module
javac.opt.arg.limitmods=<Modul>(,<Modul>)*
javac.opt.module.version=Gibt die Version der Module an, die kompiliert werden
javac.opt.arg.module.version=<Version>
javac.opt.inherit_runtime_environment=Vererbt Modulsystemkonfigurationsoptionen aus der Laufzeitumgebung.
javac.opt.default.module.for.created.files=Fallback-Zielmodul für Dateien, die von Annotationsprozessoren erstellt werden,\nfalls keines angegeben ist oder abgeleitet werden kann.
javac.opt.lineDocComments=Unterstützung für Dokumentationskommentare mit Zeilen, die mit "///" beginnen, deaktivieren

## messages

javac.msg.usage.header=Verwendung: {0} <Optionen> <Quelldateien>,\nwobei folgende Optionen möglich sind:

javac.msg.usage=Verwendung: {0} <Optionen> <Quelldateien>\nMit --help können Sie eine Liste der möglichen Optionen aufrufen

javac.msg.usage.nonstandard.footer=Diese zusätzlichen Optionen können jederzeit ohne vorherige Ankündigung geändert werden.

javac.msg.bug=Im Compiler ({0}) ist eine Ausnahme aufgetreten. Erstellen Sie auf der Java-Seite zum Melden von Bugs (https://bugreport.java.com) einen Bugbericht, nachdem Sie die Bugdatenbank (https://bugs.java.com) auf Duplikate geprüft haben. Geben Sie in Ihrem Bericht Ihr Programm, die folgende Diagnose und die Parameter an, die Sie dem Java-Compiler übergeben haben. Vielen Dank.

javac.msg.io=\n\nEin Eingabe-/Ausgabefehler ist aufgetreten.\nDetails finden Sie im folgenden Stacktrace.\n

javac.msg.proc.annotation.uncaught.exception=\n\nEin Annotationsprozessor hat eine nicht abgefangene Ausnahme ausgelöst.\nDetails finden Sie im folgenden Stacktrace.\n

javac.msg.plugin.uncaught.exception=\n\nEin Plug-in hat eine nicht abgefangene Ausnahme ausgelöst.\nDetails finden Sie im folgenden Stacktrace.\n

javac.msg.resource=\n\nDas System hat keine Ressourcen mehr.\nDetails finden Sie im folgenden Stacktrace.\n

javac.version={0} {1}
javac.fullVersion={0} Vollversion "{1}"

javac.msg.parameters.output=Ausgabe von javac-Parametern an: {0}

javac.msg.parameters.output.error=Fehler beim Versuch, javac-Parameter auszugeben an: {0}. Die Parameter folgen:
