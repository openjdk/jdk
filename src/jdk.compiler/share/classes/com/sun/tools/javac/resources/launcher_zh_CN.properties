#
# Copyright (c) 2018, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# Messages in this file which use "placeholders" for values (e.g. {0}, {1})
# are preceded by a stylized comment describing the type of the corresponding
# values.
# The simple types currently in use are:
#
# annotation        annotation compound
# boolean           true or false
# diagnostic        a sub-message; see compiler.misc.*
# fragment          similar to 'message segment', but with more specific type
# modifier          a Java modifier; e.g. public, private, protected
# file              a file URL
# file object       a file URL - similar to 'file' but typically used for source/class files, hence more specific
# flag              a Flags.Flag instance
# name              a name, typically a Java identifier
# number            an integer
# option name       the name of a command line option
# source version    a source version number, such as 1.5, 1.6, 1.7
# string            a general string
# symbol            the name of a declared type
# symbol kind       the kind of a symbol (i.e. method, variable)
# kind name         an informative description of the kind of a declaration; see compiler.misc.kindname.*
# token             the name of a non-terminal in source code; see compiler.misc.token.*
# type              a Java type; e.g. int, X, X<T>
# object            a Java object (unspecified)
# unused            the value is not used in this message
#
# The following compound types are also used:
#
# collection of X   a comma-separated collection of items; e.g. collection of type
# list of X         a comma-separated list of items; e.g. list of type
# set of X          a comma-separated set of items; e.g. set of modifier
#
# These may be composed:
#
# list of type or message segment
#
# The following type aliases are supported:
#
# message segment --> diagnostic or fragment
# file name --> file, path or file object
#
# Custom comments are supported in parenthesis i.e.
#
# number (classfile major version)
#
# These comments are used internally in order to generate an enum-like class declaration containing
# a method/field for each of the diagnostic keys listed here. Those methods/fields can then be used
# by javac code to build diagnostics in a type-safe fashion.
#
# In addition, these comments are verified by the jtreg test test/tools/javac/diags/MessageInfo,
# using info derived from the collected set of examples in test/tools/javac/diags/examples.
# MessageInfo can also be run as a standalone utility providing more facilities
# for manipulating this file. For more details, see MessageInfo.java.

## All errors are preceded by this string.
launcher.error=错误:\u0020

launcher.err.no.args=无源文件的路径

launcher.err.security.manager=无法在启用安全管理器的情况下使用源代码启动程序

# 0: string
launcher.err.invalid.filename=源文件的路径无效：{0}

# 0: path
launcher.err.file.not.found=找不到源文件：{0}

launcher.err.compilation.failed=编译失败

launcher.err.no.class=在源文件中未声明类

launcher.err.main.not.public.static=''main'' 方法未声明 ''public static''

launcher.err.main.not.void=未使用返回类型 ''void'' 声明 ''main'' 方法

# 0: string
launcher.err.cant.find.class=找不到类：{0}

# 0: string
launcher.err.cant.find.main.method=在类 {0} 中找不到 main(String[]) 方法

# 0: string
launcher.err.cant.access.main.method=无法访问类 {0} 中的 main 方法

# 0: string
launcher.err.cant.find.constructor=在类 {0} 中找不到无参数构造器

# 0: string
launcher.err.cant.access.constructor=无法访问类 {0} 中的无参数构造器

# 0: path, 1: object
launcher.err.cant.read.file=读取源文件 {0} 时出错：{1}

# 0: string
launcher.err.no.value.for.option=没有为选项 {0} 指定值

# 0: string
launcher.err.invalid.value.for.source=--source 选项的值无效：{0}

launcher.err.unnamed.pkg.not.allowed.named.modules=命名模块中不允许未命名程序包

# 0: string, 1: path
launcher.err.mismatch.end.of.path.and.package.name=源文件的路径结尾与其程序包名称 {0} 不匹配：{1}
