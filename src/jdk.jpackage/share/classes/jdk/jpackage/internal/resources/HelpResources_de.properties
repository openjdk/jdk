#
# Copyright (c) 2017, 2023, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#
#

MSG_Help=Verwendung: jpackage <Optionen>\n\nBeispielverwendungen:\n--------------\n    Generiert ein für das Hostsystem geeignetes Anwendungspackage:\n        Für eine modulare Anwendung:\n            jpackage -n name -p modulePath -m moduleName/className\n        Für eine nicht modulare Anwendung:\n            jpackage -i inputDir -n name \\\n                --main-class className --main-jar myJar.jar\n        Aus einem vorab erstellten Anwendungsimage:\n            jpackage -n name --app-image appImageDir\n    Generiert ein Anwendungsimage:\n        Für eine modulare Anwendung:\n            jpackage --type app-image -n name -p modulePath \\\n                -m moduleName/className\n        Für eine nicht modulare Anwendung:\n            jpackage --type app-image -i inputDir -n name \\\n                --main-class className --main-jar myJar.jar\n        Um eigene Optionen für jlink anzugeben, führen Sie jlink separat aus:\n            jlink --output appRuntimeImage -p modulePath \\\n                --add-modules moduleName \\\n                --no-header-files [<zusätzliche jlink-Optionen>...]\n            jpackage --type app-image -n name \\\n                -m moduleName/className --runtime-image appRuntimeImage\n    Generiert ein Java Runtime-Package:\n        jpackage -n name --runtime-image <Laufzeitimage>\n{6}\nAllgemeine Optionen:\n  @<Dateiname > \n          Liest Optionen und/oder Modus aus einer Datei \n          Diese Option kann mehrmals verwendet werden.\n  --type -t <Typ> \n          Der zu erstellende Packagetyp\n          Gültige Werte: {1} \n          Bei fehlender Angabe dieser Option wird ein plattformabhängiger\n          Standardtyp erstellt.\n  --app-version <Version>\n          Version der Anwendung und/oder des Packages\n  --copyright <Copyright-Zeichenfolge>\n          Copyright für die Anwendung\n  --description <Zeichenfolge für Beschreibung>\n          Beschreibung der Anwendung\n  --help -h \n          Gibt den Verwendungstext mit einer Liste und Beschreibung jeder gültigen\n          Option für die aktuelle Plattform an den Ausgabestream aus und beendet den Vorgang\n  --icon <Dateipfad>\n          Pfad des Symbols für das Anwendungspackage\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n  --name -n <Name>\n          Name der Anwendung und/oder des Packages\n  --dest -d <Zielpfad>\n          Pfad, in den die generierte Ausgabedatei abgelegt wird\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Standardmäßig wird das aktuelle Arbeitsverzeichnis verwendet.\n  --temp <Verzeichnispfad>\n          Pfad eines neuen oder leeren Verzeichnisses zum Erstellen temporärer Dateien\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Falls angegeben, wird das temporäre Verzeichnis beim Abschließen der Aufgabe\n          nicht entfernt und muss manuell entfernt werden.\n          Bei fehlender Angabe wird ein temporäres Verzeichnis erstellt und\n          beim Abschließen der Aufgabe entfernt.\n  --vendor <Zeichenfolge für Anbieter>\n          Anbieter der Anwendung\n  --verbose\n          Aktiviert Ausgabe im Verbose-Modus\n  --version\n          Gibt die Produktversion an den Outputstream aus und beendet den Vorgang.\n\nOptionen für das Erstellen des Laufzeitimages:\n  --add-modules <Modulname>[,<Modulname>...]\n          Eine per Komma (",") getrennte Liste hinzuzufügender Module\n          Diese Modulliste wird zusammen mit dem Hauptmodul (sofern angegeben)\n          als Argument --add-module an jlink übergeben.\n          Bei fehlender Angabe wird entweder nur das Hauptmodul (sofern --module\n          angegeben ist) oder das Standardset an Modulen (sofern --main-jar \n          angegeben ist) verwendet.\n          Diese Option kann mehrmals verwendet werden.\n  --module-path -p <Modulpfad>...\n          \
Eine per {0} getrennte Pfadliste\n          Jeder Pfad ist entweder ein Verzeichnis mit Modulen oder der Pfad zu einer\n          JAR-Datei eines Moduls.\n          (Jeder Pfad ist absolut oder relativ zum aktuellen Verzeichnis.)\n          Diese Option kann mehrmals verwendet werden.\n  --jlink-options <jlink-Optionen> \n          Eine per Leerzeichen getrennte Liste mit an jlink zu übergebenden Optionen \n          Bei fehlender Angabe wird standardmäßig "--strip-native-commands \n          --strip-debug --no-man-pages --no-header-files" verwendet. \n          Diese Option kann mehrmals verwendet werden.\n  --runtime-image <Verzeichnispfad>\n          Pfad des vordefinierten Laufzeitimages, das in\n          das Anwendungsimage kopiert wird\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Wenn --runtime-image nicht angegeben wird, führt jpackage jlink aus, um\n          das Laufzeitimage mit folgenden Optionen zu erstellen:\n          --strip-debug, --no-header-files, --no-man-pages und\n          --strip-native-commands.\n\nOptionen für das Erstellen des Anwendungsimages:\n  --input -i <Verzeichnispfad>\n          Pfad des Eingabeverzeichnisses mit den zu verpackenden Dateien\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Alle Dateien im Eingabeverzeichnis werden verpackt für das\n          Anwendungsimage integriert.\n  --app-content <zusätzlicher Inhalt>[,<zusätzlicher Inhalt>...]\n          Eine per Komma getrennte Liste mit Pfaden zu Dateien und/oder Verzeichnissen,\n          die zur Anwendungs-Payload hinzugefügt werden sollen.\n          Diese Option kann mehrmals verwendet werden.\n\nOptionen für das Erstellen des Anwendungs-Launchers:\n  --add-launcher <Launcher-Name>=<Dateipfad>\n          Name des Launchers sowie ein Pfad zu einer Eigenschaftendatei mit\n          einer Liste von Schlüssel/Wert-Paaren\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Die Schlüssel "module", "main-jar", "main-class", "description",\n          "arguments", "java-options", "app-version", "icon",\n          "launcher-as-service",\n          "win-console", "win-shortcut", "win-menu",\n          "linux-app-category" und "linux-shortcut" können verwendet werden.\n          Diese Optionen werden den ursprünglichen Befehlszeilenoptionen hinzugefügt\n          (oder überschreiben diese), um einen zusätzlichen, alternativen Launcher zu erstellen.\n          Der Hauptanwendungs-Launcher wird aus den Befehlszeilenoptionen\n          erstellt. Mit dieser Option können zusätzliche alternative Launcher\n          erstellt werden. Außerdem kann diese Option mehrmals verwendet werden,\n          um mehrere zusätzliche Launcher zu erstellen. \n  --arguments <Hauptklassenargumente>\n          Befehlszeilenargumente, die an die Hauptklasse übergeben werden, falls\n          keine Befehlszeilenargumente an den Launcher übergeben werden\n          Diese Option kann mehrmals verwendet werden.\n  --java-options <Java-Optionen>\n          Optionen, die an Java Runtime übergeben werden\n          Diese Option kann mehrmals verwendet werden.\n  --main-class <Klassenname>\n          Qualifizierter Name der auszuführenden Anwendungshauptklasse\n          Diese Option kann nur bei Angabe von --main-jar verwendet werden.\n  --main-jar <Haupt-JAR-Datei>\n          Die Haupt-JAR-Datei der Anwendung, die die Hauptklasse enthält\n          (angegeben als Pfad relativ zum Eingabepfad)\n          Es kann entweder die Option --module oder die Option --main-jar angegeben werden, nicht jedoch\n          beides.\n  --module -m <Modulname>[/<Hauptklasse>]\n          Das Hauptmodul (und optional die Hauptklasse) der Anwendung\n          Dieses Modul muss unter dem Modulpfad gespeichert sein.\n          Bei Angabe dieser Option wird das Hauptmodul\n          \
im Java Runtime-Image verknüpft. Es kann entweder die Option --module oder die Option --main-jar\n          angegeben werden, nicht jedoch beides.\n{2}\nOptionen für das Erstellen des Anwendungspackages:\n  --about-url <URL>\n          URL der Homepage der Anwendung\n  --app-image <Verzeichnispfad>\n          {5}          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n  --file-associations <Dateipfad>\n          Pfad zu einer Eigenschaftendatei mit einer Liste von Schlüssel/Wert-Paaren\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Mit den Schlüsseln "extension", "mime-type", "icon" und "description"\n          kann die Verknüpfung beschrieben werden.\n          Diese Option kann mehrmals verwendet werden.\n  --install-dir <Verzeichnispfad>\n          {4}  --license-file <Dateipfad>\n          Pfad zur Lizenzdatei\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n  --resource-dir <Verzeichnispfad>\n          Pfad zum Überschreiben von jpackage-Ressourcen\n          Symbole, Vorlagendateien und weitere Ressourcen von jpackage können\n          durch Hinzufügen von Ersetzungsressourcen zu diesem Verzeichnis überschrieben werden.\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n  --runtime-image <Verzeichnispfad>\n          Pfad des zu installierenden vordefinierten Laufzeitimages\n          (absoluter Pfad oder relativ zum aktuellen Verzeichnis)\n          Option muss beim Erstellen eines Laufzeitpackages angegeben werden.\n  --launcher-as-service\n          Anforderung zum Erstellen eines Installationsprogramms, das den\n          Hauptanwendungs-Launcher als Hintergrundserviceanwendung registriert.\n\nPlattformabhängige Optionen für das Erstellen des Anwendungspackages:\n{3}

MSG_Help_win_launcher=\nPlattformabhängige Option für das Erstellen des Anwendungs-Launchers:\n  --win-console\n          Erstellt einen Konsolen-Launcher für die Anwendung. Sollte für\n          Anwendungen angegeben werden, die Konsoleninteraktionen erfordern\n
MSG_Help_win_install=\  --win-dir-chooser\n          Fügt ein Dialogfeld hinzu, in dem der Benutzer das Verzeichnis auswählen kann, in dem\n          das Produkt installiert wird.\n  --win-help-url <URL>\n          URL, unter der der Benutzer weitere Informationen oder technische Unterstützung erhält\n  --win-menu\n          Anforderung zum Hinzufügen einer Startmenüverknüpfung für diese Anwendung\n  --win-menu-group <Menügruppenname>\n          Startmenügruppe, in der diese Anwendung abgelegt wird\n  --win-per-user-install\n          Anforderung zum Ausführen einer Installation pro Benutzer\n  --win-shortcut\n          Anforderung zum Hinzufügen einer Desktopverknüpfung für diese Anwendung\n  --win-shortcut-prompt\n          Fügt ein Dialogfeld hinzu, in dem der Benutzer auswählen kann, ob Verknüpfungen\n          vom Installationsprogramm erstellt werden sollen.\n  --win-update-url <URL>\n          URL verfügbarer Anwendungsupdateinformationen\n  --win-upgrade-uuid <ID-Zeichenfolge>\n          UUID, die mit Upgrades für dieses Package verknüpft ist\n
MSG_Help_win_install_dir=Relativer Unterpfad unter dem Standardinstallationsverzeichnis\n
MSG_Help_mac_install=\  --mac-dmg-content <Pfad zu zusätzlichem Inhalt>[,<Pfad zu zusätzlichem Inhalt>...]\n          Nimmt den gesamten referenzierten Inhalt in die DMG-Datei auf.\n          Diese Option kann mehrmals verwendet werden. \n
MSG_Help_mac_launcher=\  --mac-package-identifier <ID-Zeichenfolge>\n          Eine ID, die die Anwendung für macOS eindeutig identifiziert\n          Standardwert ist der Hauptklassenname.\n          Es dürfen nur alphanumerische Zeichen (A-Z, a-z, 0-9), Bindestriche (-)\n          und Punkte (.) verwendet werden.\n  --mac-package-name <Namenszeichenfolge>\n          Name der Anwendung, wie in der Menüleiste angezeigt\n          Dieser kann vom Anwendungsnamen abweichen.\n          Er darf maximal 15 Zeichen enthalten und muss für die Anzeige\n          in der Menüleiste und im Infofenster der Anwendung geeignet sein.\n          Standardwert: Anwendungsname.\n  --mac-package-signing-prefix <Präfixzeichenfolge>\n          Beim Signieren des Anwendungspackages wird dieser Wert\n          allen zu signierenden Komponenten ohne vorhandene\n          Package-ID als Präfix vorangestellt.\n  --mac-sign\n          Anforderung zum Signieren des Packages oder des vordefinierten\nAnwendungsimages\n  --mac-signing-keychain <Schlüsselbundname>\n          Name des Schlüsselbundes für die Suche nach der Signaturidentität\n          Bei fehlender Angabe werden die Standardschlüsselbunde verwendet.\n  --mac-signing-key-user-name <Teamname>\n          Team- oder Benutzernamensteil der Apple-Signaturidentitäten. Um direkt zu steuern,\n          welche Signaturidentität zum Signieren eines Anwendungsimages oder\n          Installationsprogramms verwendet wird, verwenden Sie --mac-app-image-sign-identity und/oder\n          --mac-installer-sign-identity. Diese Option kann nicht mit\n          --mac-app-image-sign-identity oder --mac-installer-sign-identity kombiniert werden.\n  --mac-app-image-sign-identity <identity>\n          Zum Signieren des Anwendungsimages verwendete Identität. Dieser Wert wird\n          direkt an die Option --sign des Tools "codesign" übergeben. Diese Option kann nicht\n          mit --mac-signing-key-user-name kombiniert werden.\n  --mac-installer-sign-identity <identity>\n          Zum Signieren des Installationsprogramms "pkg" verwendete Identität. Dieser Wert wird\n          direkt an die Option --sign des Tools "productbuild" übergeben. Diese Option\n          kann nicht mit --mac-signing-key-user-name kombiniert werden.\n  --mac-app-store\n          Gibt an, dass die jpackage-Ausgabe für den\n          Mac App Store bestimmt ist.\n  --mac-entitlements <Dateipfad>\n          Pfad zu einer Datei mit Berechtigungen, die beim Signieren\n          von ausführbaren Dateien und Librarys im Bundle verwendet werden sollen.\n  --mac-app-category <Kategoriezeichenfolge>\n          Zeichenfolge für das Erstellen von LSApplicationCategoryType in\n          Anwendungs-plist. Standardwert: "utilities".\n
MSG_Help_linux_install=\  --linux-package-name <Packagename>\n          Name für das Linux-Package, Standardwert: Anwendungsname\n  --linux-deb-maintainer <E-Mail-Adresse>\n          Maintainer für .deb-Package\n  --linux-menu-group <Menügruppenname>\n          Menügruppe, in der diese Anwendung abgelegt wird\n  --linux-package-deps\n          Erforderliche Packages oder Funktionen für die Anwendung\n  --linux-rpm-license-type <Typzeichenfolge>\n          Typ der Lizenz ("License: <Wert>" der RPM-SPEC-Datei)\n  --linux-app-release <Releasewert>\n          Releasewert der RPM-SPEC-Datei <Name> oder \n          Debian-Revisionswert der DEB-Kontrolldatei\n  --linux-app-category <Kategoriewert>\n          Gruppenwert der RPM-SPEC-Datei <Name> oder \n          Abschnittswert der DEB-Kontrolldatei\n  --linux-shortcut\n          Erstellt eine Verknüpfung für die Anwendung.\n
MSG_Help_mac_linux_install_dir=Absoluter Pfad des Installationsverzeichnisses der Anwendung\n
MSG_Help_default_install_dir=Absoluter Pfad des Installationsverzeichnisses der Anwendung auf OS X\n          oder Linux. Relativer Unterpfad des Installationsverzeichnisses der\n          Anwendung wie "Programme" oder "AppData" unter Windows.\n
MSG_Help_no_args=Verwendung: jpackage <Optionen>\nVerwenden Sie jpackage --help (oder -h), um eine Liste möglicher Optionen aufzurufen
MSG_Help_default_app_image=Speicherort des vordefinierten Anwendungsimages, mit dem\n          ein installierbares Package erstellt wird\n
MSG_Help_mac_app_image=Speicherort des vordefinierten Anwendungsimages, mit dem\n          ein installierbares Package erstellt oder das vordefinierte\n          Anwendungsimage signiert wird\n
MSG_Help_mac_sign_sample_usage=\    Vordefiniertes Anwendungsimage signieren:\n        jpackage --type app-image --app-image <app-image> \\\n            --mac-sign [<additional signing options>...]\n        Hinweis: In diesem Modus sind nur die folgenden zusätzlichen Optionen zulässig:\n              Das Set der zusätzlichen Mac-Signaturoptionen und --verbose\n
