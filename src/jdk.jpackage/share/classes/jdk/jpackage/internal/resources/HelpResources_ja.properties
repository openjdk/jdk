#
# Copyright (c) 2017, 2023, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#
#

MSG_Help=使用方法: jpackage <options>\n\n使用例:\n--------------\n    ホスト・システムに適したアプリケーション・パッケージを生成します。\n        モジュラ・アプリケーションの場合:\n            jpackage -n name -p modulePath -m moduleName/className\n        非モジュラ・アプリケーションの場合:\n            jpackage -i inputDir -n name \\\n                --main-class className --main-jar myJar.jar\n        事前作成されたアプリケーション・イメージから:\n            jpackage -n name --app-image appImageDir\n    アプリケーション・イメージの生成:\n        モジュラ・アプリケーションの場合:\n            jpackage --type app-image -n name -p modulePath \\\n                -m moduleName/className\n        非モジュラ・アプリケーションの場合:\n            jpackage --type app-image -i inputDir -n name \\\n                --main-class className --main-jar myJar.jar\n        jlinkに独自のオプションを指定するには、jlinkを別個に実行します。\n            jlink --output appRuntimeImage -p modulePath \\\n                --add-modules moduleName \\\n                --no-header-files [<additional jlink options>...]\n            jpackage --type app-image -n name \\\n                -m moduleName/className --runtime-image appRuntimeImage\n    Javaランタイム・パッケージを生成します。\n        jpackage -n name --runtime-image <runtime-image>\n{6}\n一般的なオプション:\n  @<filename> \n          ファイルからの読取りオプションおよびモード \n          このオプションは複数回使用できます。\n  --type -t <type> \n          作成するパッケージのタイプ\n          有効な値: {1} \n          このオプションが指定されていない場合、プラットフォーム依存の\n          デフォルト・タイプが作成されます\n  --app-version <version>\n          アプリケーションおよびパッケージのバージョン\n  --copyright <copyright string>\n          アプリケーションのコピーライト\n  --description <description string>\n          アプリケーションの説明\n  --help -h \n          使用方法テキストと現在のプラットフォームの有効なオプションのリストと説明を\n          出力ストリームに出力して、終了します\n  --icon <file path>\n          アプリケーション・パッケージのアイコンのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n  \
--name -n <name>\n          アプリケーションおよびパッケージの名前\n  --dest -d <destination path>\n          生成された出力ファイルが配置されるパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          デフォルトは現在の作業ディレクトリです。\n  --temp <directory path>\n          一時ファイルの作成に使用される新規または空のディレクトリのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          指定した場合、タスク完了時に一時ディレクトリは削除されないため\n          手動で削除する必要があります\n          指定しなかった場合、一時ディレクトリが作成され\n          タスク完了時に削除されます。\n  --vendor <vendor string>\n          アプリケーションのベンダー\n  --verbose\n          詳細な出力を有効にします\n  --version\n          製品バージョンを出力ストリームに出力して終了します\n\nランタイム・イメージを作成するためのオプション:\n  --add-modules <module name>[,<module name>...]\n          追加するモジュールのカンマ(",")区切りリスト\n          このモジュール・リストとメイン・モジュール(指定した場合)\n          が--add-module引数としてjlinkに渡されます。\n          指定しなかった場合、メイン・モジュールのみ(--moduleが\n          指定された場合)、またはデフォルトのモジュール・セット(--main-jarが \n          指定された場合)が使用されます。\n          このオプションは複数回使用できます。\n  --module-path -p <module path>...\n          パスの{0}区切りリスト\n          各パスは、モジュールのディレクトリまたは\n          モジュラjarへのパスです。\n          (各パスは、絶対パスまたは現在のディレクトリからの相対パスです。)\n          このオプションは複数回使用できます。\n  --jlink-options <jlink options> \n          jlinkに渡すオプションのスペース区切りのリスト \n          指定しない場合、"--strip-native-commands \n          --strip-debug \
--no-man-pages --no-header-files"。 \n          このオプションは複数回使用できます。\n  --runtime-image <directory path>\n          アプリケーション・イメージにコピーされる、事前定義済みのランタイム・イメージ\n          のパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          --runtime-imageが指定されていない場合、jpackageはjlinkを実行し、\n          次のオプションを使用してランタイム・イメージを作成します:\n          --strip-debug、--no-header-files、--no-man-pagesおよび\n          --strip-native-commands。\n\nアプリケーション・イメージを作成するためのオプション:\n  --input -i <directory path>\n          パッケージ化するファイルを含む入力ディレクトリへのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          入力ディレクトリのすべてのファイルは、アプリケーション・イメージに\n          パッケージ化されます。\n  --app-content <additional content>[,<additional content>...]\n          ファイルまたはディレクトリ(あるいは両方)のパスのカンマ区切りのリスト\n          アプリケーション・ペイロードに追加します。\n          このオプションは複数回使用できます。\n\nアプリケーション・ランチャを作成するためのオプション:\n  --add-launcher <launcher name>=<file path>\n          ランチャの名前、およびキー、値のペアのリスト\n          を含むプロパティ・ファイルへのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          キー"module"、"main-jar"、"main-class"、"description"、\n          "arguments"、"java-options"、"app-version"、"icon"、\n          "launcher-as-service"、\n          "win-console"、"win-shortcut"、"win-menu"、\n          "linux-app-category"および"linux-shortcut"を使用できます。\n          これらのオプションを元のコマンドライン・オプションに追加するか、これらのオプションを\n          使用して元のコマンドライン・オプションを上書きして、追加の代替ランチャを作成します。\n          \
メイン・アプリケーション・ランチャはコマンドライン・オプションから作成されます。\n          このオプションを使用して追加の代替ランチャを作成でき、\n          このオプションを複数回使用して\n          複数の追加のランチャを作成できます。 \n  --arguments <main class arguments>\n          ランチャにコマンド・ライン引数が指定されていない場合にメイン・クラスに渡す\n          コマンド・ライン引数\n          このオプションは複数回使用できます。\n  --java-options <java options>\n          Javaランタイムに渡すオプション\n          このオプションは複数回使用できます。\n  --main-class <class name>\n          実行するアプリケーション・メイン・クラスの修飾名\n          このオプションを使用できるのは、--main-jarが指定されている場合だけです。\n  --main-jar <main jar file>\n          メイン・クラスを含む、アプリケーションのメインJAR\n          (入力パスからの相対パスとして指定)\n          --moduleまたは--main-jarオプションを指定できますが、両方は\n          指定できません。\n  --module -m <module name>[/<main class>]\n          アプリケーションのメイン・モジュール(およびオプションでメイン・クラス)\n          このモジュールは、モジュール・パスに置かれている必要があります。\n          このオプションが指定されている場合、メイン・モジュールは\n          Javaランタイム・イメージ内でリンクされます。--moduleまたは--main-jar\n          オプションを指定できますが、両方は指定できません。\n{2}\nアプリケーション・パッケージを作成するためのオプション:\n  --about-url <url>\n          アプリケーションのホームページのURL\n  --app-image <directory path>\n          {5}          (絶対パスまたは現在のディレクトリからの相対パス)\n  --file-associations <file path>\n          キー、値のペアのリストを含むプロパティ・ファイルへのパス\n          \
(絶対パスまたは現在のディレクトリからの相対パス)\n          キー"extension"、"mime-type"、"icon"、"description"\n          を使用して関連付けを記述できます。\n          このオプションは複数回使用できます。\n  --install-dir <directory path>\n          {4}  --license-file <file path>\n          ライセンス・ファイルへのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n  --resource-dir <directory path>\n          オーバーライドjpackageリソースへのパス\n          アイコン、テンプレート・ファイルおよびjpackageのその他のリソースは、\n          このディレクトリに置換リソースを追加することでオーバーライドできます。\n          (絶対パスまたは現在のディレクトリからの相対パス)\n  --runtime-image <directory path>\n          インストールする事前定義済みのランタイム・イメージのパス\n          (絶対パスまたは現在のディレクトリからの相対パス)\n          ランタイム・パッケージの作成時には、オプションが必要です。\n  --launcher-as-service\n          次として登録するインストーラの作成をリクエストします: \n          バックグラウンド・サービス・タイプ・アプリケーションとしてのメイン・アプリケーション・ランチャ。\n\nアプリケーション・パッケージを作成するためのプラットフォーム依存オプション:\n{3}

MSG_Help_win_launcher=\nアプリケーション・ランチャを作成するためのプラットフォーム依存オプション:\n  --win-console\n          アプリケーションのコンソール・ランチャを作成します。コンソール・\n          インタラクションが必要なアプリケーションに指定する必要があります\n
MSG_Help_win_install=\  --win-dir-chooser\n          ユーザーが製品をインストールするディレクトリを選択するための\n          ダイアログを追加します。\n  --win-help-url <url>\n          ユーザーが詳細情報または技術的なサポートを取得できるURL\n  --win-menu\n          このアプリケーションのスタート・メニュー・ショートカットを追加するようにリクエストします\n  --win-menu-group <menu group name>\n          このアプリケーションを配置するスタート・メニュー・グループ\n  --win-per-user-install\n          ユーザーごとにインストールを実行するようにリクエストします\n  --win-shortcut\n          このアプリケーションのデスクトップ・ショートカットを追加するようにリクエストします\n  --win-shortcut-prompt\n          ショートカットをインストーラで作成するかどうかをユーザーが選択できるようにする\n          ダイアログを追加します。\n  --win-update-url <url>\n          使用可能なアプリケーションの更新情報のURL\n  --win-upgrade-uuid <id string>\n          このパッケージのアップグレードに関連付けられたUUID\n
MSG_Help_win_install_dir=デフォルトのインストール場所の下の相対サブパス\n
MSG_Help_mac_install=\  --mac-dmg-content <additional content path>[,<additional content path>...]\n          dmgに参照されたコンテンツをすべて含めます。\n          このオプションは複数回使用できます。 \n
MSG_Help_mac_launcher=\  --mac-package-identifier <ID string>\n          macOSのアプリケーションを一意に識別するID\n          メイン・クラス名にデフォルト設定されています。\n          英数字(A-Z、a-z、0-9)、ハイフン(-)およびピリオド(.)文字のみ\n          使用できます。\n  --mac-package-name <name string>\n          メニュー・バーに表示されるアプリケーションの名前\n          アプリケーション名とは異なります。\n          この名前は16文字未満にする必要があり、メニュー・バーおよびアプリケーション情報ウィンドウに\n          表示するのに適している必要があります。\n          アプリケーション名にデフォルト設定されています。\n  --mac-package-signing-prefix <prefix string>\n          アプリケーション・パッケージに署名する際、\n          既存のパッケージIDのない署名が必要なすべてのコンポーネントに、\n          この値が接頭辞として付けられます。\n  --mac-sign\n          パッケージまたは事前定義済アプリケーション・イメージに署名するよう\n          リクエストします。\n  --mac-signing-keychain <keychain name>\n          署名アイデンティティを検索するキーチェーンの名前\n          指定しなかった場合、標準のキーチェーンが使用されます。\n  --mac-signing-key-user-name <team name>\n          Apple署名アイデンティティのチームまたはユーザー名部分。\n          アプリケーション・イメージまたはインストーラの署名に使用する署名アイデンティティの\n          直接制御には、--mac-app-image-sign-identityまたは\n          --mac-installer-sign-identity(あるいは両方)を使用します。このオプションは\n          --mac-app-image-sign-identityまたは--mac-installer-sign-identityと組み合せることはできません。\n  --mac-app-image-sign-identity <identity>\n          アプリケーション・イメージの署名に使用するアイデンティティ。この値は直接\n          "codesign"ツールの--signオプションに渡されます。このオプションは\n          \
--mac-signing-key-user-nameと組み合せることはできません。\n  --mac-installer-sign-identity <identity>\n          "pkg"インストーラの署名に使用するアイデンティティ。この値は直接\n          "productbuild"ツールの--signオプションに渡されます。このオプションは\n          --mac-signing-key-user-nameと組み合せることはできません。\n  --mac-app-store\n          jpackage出力がMac App Store用であること\n          を示します。\n  --mac-entitlements <file path>\n          バンドルの実行可能ファイルおよびライブラリの署名時に\n          使用する権限を含むファイルのパス。\n  --mac-app-category <category string>\n          アプリケーションのplistのLSApplicationCategoryTypeを生成する際に使用する文字列。\n          デフォルト値は"utilities"です。\n
MSG_Help_linux_install=\  --linux-package-name <package name>\n          Linuxパッケージの名前。アプリケーション名にデフォルト設定されています\n  --linux-deb-maintainer <email address>\n          .debパッケージのMaintainer\n  --linux-menu-group <menu-group-name>\n          このアプリケーションが配置されているメニュー・グループ\n  --linux-package-deps <package-dep-string>\n          アプリケーションに必要なパッケージまたは機能\n  --linux-rpm-license-type <type string>\n          ライセンスのタイプ(RPM .specの"License: <value>")\n  --linux-app-release <release value>\n          RPM <name>.specファイルのリリース値または\n          DEBコントロール・ファイルのDebianリビジョン値。\n  --linux-app-category <category value>\n          RPM <name>.specファイルのグループ値または \n           DEBコントロール・ファイルのセクション値\n  --linux-shortcut\n          アプリケーションのショートカットを作成します。\n
MSG_Help_mac_linux_install_dir=アプリケーションのインストール・ディレクトリの絶対パス\n
MSG_Help_default_install_dir=OS XまたはLinux上のアプリケーションのインストール・ディレクトリの絶対パス。\n          "プログラム・ファイル"や"AppData"など、Windows上のアプリケーションの\n          インストール場所の相対サブパス。\n
MSG_Help_no_args=使用方法: jpackage <options>\n利用可能なオプションのリストについては、jpackage --help (or -h)を使用します
MSG_Help_default_app_image=インストール可能なパッケージの作成に使用する、事前定義済み\n          アプリケーション・イメージの場所\n
MSG_Help_mac_app_image=インストール可能なパッケージの作成または事前定義済みアプリケーション・\n          イメージへの署名に使用する、事前定義済みアプリケーション・\n          イメージの場所\n
MSG_Help_mac_sign_sample_usage=\    事前定義済みアプリケーション・イメージへの署名:\n        jpackage --type app-image --app-image <app-image> \\\n            --mac-sign [<additional signing options>...]\n        ノート: このモードで許可される唯一の追加オプション:\n              追加のmac署名オプションのセットおよび--verbose\n
