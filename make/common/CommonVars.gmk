#
# Copyright (c) 2011, 2025, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

include MakeIncludeStart.gmk
ifeq ($(INCLUDE), true)

################################################################################
# CommonVars include common variables and definitions used in multiple
# makefiles.
################################################################################

# Make sure all shell commands are executed with a proper locale
export LC_ALL := $(LOCALE_USED)

# Make sure we override any local CLASSPATH variable
export CLASSPATH := $(CLASSPATH)

# The default make arguments
MAKE_ARGS = $(MAKE_LOG_FLAGS) -r -R -I $(TOPDIR)/make/common SPEC=$(SPEC) \
    MAKE_LOG_FLAGS="$(MAKE_LOG_FLAGS)" $(MAKE_LOG_VARS)

SHELL := $(BASH) $(BASH_ARGS)

ifneq ($(SOURCE_DATE), updated)
  # For "updated" source date value, these are set in InitSupport.gmk
  export SOURCE_DATE_EPOCH := $(SOURCE_DATE)
  SOURCE_DATE_ISO_8601 := $(SOURCE_DATE_ISO_8601_FIXED)
endif

ifneq ($(findstring windows.wsl, $(OPENJDK_BUILD_OS_ENV)), )
  # Tell WSL to convert PATH between linux and windows
  export WSLENV := PATH/l
else ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys2)
  # Prohibit msys2 from attempting any path wrangling
  export MSYS2_ARG_CONV_EXCL := "*"
endif

ifeq ($(TOOLCHAIN_TYPE), microsoft)
  # The Visual Studio toolchain needs the PATH to be adjusted to include
  # Visual Studio tools.
  export PATH := $(TOOLCHAIN_PATH):$(PATH)
endif

# The Java specification version. It usually equals the feature version number.
VERSION_SPECIFICATION := $(VERSION_FEATURE)

# Convenience CFLAGS settings for passing version information into native programs.
VERSION_CFLAGS = \
    -DVERSION_FEATURE=$(VERSION_FEATURE) \
    -DVERSION_INTERIM=$(VERSION_INTERIM) \
    -DVERSION_UPDATE=$(VERSION_UPDATE) \
    -DVERSION_PATCH=$(VERSION_PATCH) \
    -DVERSION_EXTRA1=$(VERSION_EXTRA1) \
    -DVERSION_EXTRA2=$(VERSION_EXTRA2) \
    -DVERSION_EXTRA3=$(VERSION_EXTRA3) \
    -DVERSION_PRE='"$(VERSION_PRE)"' \
    -DVERSION_BUILD=$(VERSION_BUILD) \
    -DVERSION_OPT='"$(VERSION_OPT)"' \
    -DVERSION_NUMBER='"$(VERSION_NUMBER)"' \
    -DVERSION_STRING='"$(VERSION_STRING)"' \
    -DVERSION_SHORT='"$(VERSION_SHORT)"' \
    -DVERSION_SPECIFICATION='"$(VERSION_SPECIFICATION)"' \
    -DVERSION_DATE='"$(VERSION_DATE)"' \
    -DVENDOR_VERSION_STRING='"$(VENDOR_VERSION_STRING)"' \
    -DVERSION_CLASSFILE_MAJOR=$(VERSION_CLASSFILE_MAJOR) \
    -DVERSION_CLASSFILE_MINOR=$(VERSION_CLASSFILE_MINOR) \
    #

ifneq ($(COMPANY_NAME), )
  # COMPANY_NAME is set to "N/A" in make/conf/branding.conf by default,
  # but can be customized with the '--with-vendor-name' configure option.
  # Only export "VENDOR" to the build if COMPANY_NAME contains a real value.
  # Otherwise the default value for VENDOR, which is used to set the "java.vendor"
  # and "java.vm.vendor" properties is hard-coded into the source code (i.e. in
  # VersionProps.java.template in the jdk for "java.vendor" and
  # vm_version.cpp in the VM for "java.vm.vendor")
  ifneq ($(COMPANY_NAME), N/A)
    VERSION_CFLAGS += -DVENDOR='"$(COMPANY_NAME)"'
  endif
endif

# Only export VENDOR_URL, VENDOR_URL_BUG and VENDOR_VM_URL_BUG to the build if
# they are not empty. Otherwise, default values which are defined in the sources
# will be used.
ifneq ($(VENDOR_URL), )
  VERSION_CFLAGS += -DVENDOR_URL='"$(VENDOR_URL)"'
endif
ifneq ($(VENDOR_URL_BUG), )
  VERSION_CFLAGS += -DVENDOR_URL_BUG='"$(VENDOR_URL_BUG)"'
endif
ifneq ($(VENDOR_URL_VM_BUG), )
  VERSION_CFLAGS += -DVENDOR_URL_VM_BUG='"$(VENDOR_URL_VM_BUG)"'
endif

# Different naming strings generated from the above information.
RUNTIME_NAME = $(PRODUCT_NAME) $(PRODUCT_SUFFIX)

# Colon left out to be able to override IMAGES_OUTPUTDIR for bootcycle-images
SUPPORT_OUTPUTDIR = $(OUTPUTDIR)/support
BUILDTOOLS_OUTPUTDIR = $(OUTPUTDIR)/buildtools

HOTSPOT_OUTPUTDIR = $(OUTPUTDIR)/hotspot
JDK_OUTPUTDIR = $(OUTPUTDIR)/jdk
IMAGES_OUTPUTDIR = $(OUTPUTDIR)/images
BUNDLES_OUTPUTDIR = $(OUTPUTDIR)/bundles
TESTMAKE_OUTPUTDIR = $(OUTPUTDIR)/test-make
MAKESUPPORT_OUTPUTDIR = $(OUTPUTDIR)/make-support

JAVA_TMP_DIR = $(SUPPORT_OUTPUTDIR)/javatmp

BUILDJDK_OUTPUTDIR = $(OUTPUTDIR)/buildjdk

ifneq ($(EXTERNAL_BUILDJDK_PATH), )
  EXTERNAL_BUILDJDK := true
  CREATE_BUILDJDK := false
  BUILD_JDK := $(EXTERNAL_BUILDJDK_PATH)
else
  EXTERNAL_BUILDJDK := false
  ifeq ($(COMPILE_TYPE), cross)
    CREATE_BUILDJDK := true
    BUILD_JDK := $(BUILDJDK_OUTPUTDIR)/jdk
  else
    CREATE_BUILDJDK := false
    BUILD_JDK := $(JDK_OUTPUTDIR)
  endif
endif

# Store javac server synchronization files here, and
# the javac server log files.
JAVAC_SERVER_DIR = $(MAKESUPPORT_OUTPUTDIR)/javacservers

# Number of parallel jobs to use for compilation
JOBS ?= $(CONF_JOBS)
TEST_JOBS ?= $(CONF_TEST_JOBS)

# Tools that potentially need to be cross compilation aware.
CC := $(CCACHE) $(ICECC) $(CC)

CXX := $(CCACHE) $(ICECC) $(CXX)

# BUILD_CC/BUILD_LD is a compiler/linker that generates code that is runnable on the
# build platform.
BUILD_CC := $(BUILD_ICECC) $(BUILD_CC)
BUILD_CXX := $(BUILD_ICECC) $(BUILD_CXX)

JAVA_FLAGS_TMPDIR := -Djava.io.tmpdir=$(JAVA_TMP_DIR)
JAVA_FLAGS := $(JAVA_FLAGS) $(JAVA_FLAGS_TMPDIR)

JLINK_CMD := $(FIXPATH) $(BUILD_JDK)/bin/jlink
JMOD_CMD := $(FIXPATH) $(BUILD_JDK)/bin/jmod

# These variables are meant to be used. They are defined with = instead of := to make
# it possible to override only the *_CMD variables.
JAVA = $(JAVA_CMD) $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)
JAVA_SMALL = $(JAVA_CMD) $(JAVA_FLAGS_SMALL) $(JAVA_FLAGS)
JAVAC = $(JAVAC_CMD)
JAVADOC = $(JAVADOC_CMD)
JAR = $(JAR_CMD)
JLINK = $(JLINK_CMD)
JMOD = $(JMOD_CMD)

JTREG_JAVA = $(FIXPATH) $(JTREG_JDK)/bin/java $(JAVA_FLAGS_BIG) $(JAVA_FLAGS)

BUILD_JAVA_FLAGS := $(BOOTCYCLE_JVM_ARGS_BIG)
BUILD_JAVA = $(FIXPATH) $(BUILD_JDK)/bin/java $(BUILD_JAVA_FLAGS)
BUILD_JAVA_SMALL = $(FIXPATH) $(BUILD_JDK)/bin/java $(BUILD_JAVA_FLAGS_SMALL)
BUILD_JAVAC = $(FIXPATH) $(BUILD_JDK)/bin/javac
BUILD_JAR = $(FIXPATH) $(BUILD_JDK)/bin/jar

# A file containing a way to uniquely identify the source code revision that
# the build was created from
SOURCE_REVISION_TRACKER := $(SUPPORT_OUTPUTDIR)/src-rev/source-revision-tracker

# Interim langtools modules and arguments
INTERIM_LANGTOOLS_BASE_MODULES := java.compiler jdk.compiler jdk.internal.md jdk.javadoc
INTERIM_LANGTOOLS_MODULES := $(addsuffix .interim, $(INTERIM_LANGTOOLS_BASE_MODULES))
INTERIM_LANGTOOLS_ADD_EXPORTS := \
    --add-exports java.base/sun.reflect.annotation=jdk.compiler.interim \
    --add-exports java.base/jdk.internal.jmod=jdk.compiler.interim \
    --add-exports java.base/jdk.internal.misc=jdk.compiler.interim \
    --add-exports java.base/sun.invoke.util=jdk.compiler.interim \
    --add-exports java.base/jdk.internal.javac=java.compiler.interim \
    --add-exports java.base/jdk.internal.javac=jdk.compiler.interim \
    --add-exports jdk.internal.opt/jdk.internal.opt=jdk.compiler.interim \
    --add-exports jdk.internal.opt/jdk.internal.opt=jdk.javadoc.interim \
    #
INTERIM_LANGTOOLS_MODULES_COMMA := $(strip $(subst $(SPACE),$(COMMA),$(strip \
    $(INTERIM_LANGTOOLS_MODULES))))
INTERIM_LANGTOOLS_ARGS := \
    --limit-modules java.base,jdk.zipfs,$(INTERIM_LANGTOOLS_MODULES_COMMA) \
    --add-modules $(INTERIM_LANGTOOLS_MODULES_COMMA) \
    --module-path $(BUILDTOOLS_OUTPUTDIR)/interim_langtools_modules \
    --patch-module java.base=$(BUILDTOOLS_OUTPUTDIR)/gensrc/java.base.interim \
    $(INTERIM_LANGTOOLS_ADD_EXPORTS) \
    #

JAVADOC_MAIN_CLASS := -m jdk.javadoc.interim/jdk.javadoc.internal.tool.Main
# Use = assignment to pick up overridden INTERIM_LANGTOOLS_ARGS in bootcycle builds
NEW_JAVADOC = $(INTERIM_LANGTOOLS_ARGS) $(JAVADOC_MAIN_CLASS)

# CD is going away, but remains to cater for legacy makefiles.
CD := cd

# Images directory definitions
JDK_IMAGE_SUBDIR := jdk
JRE_IMAGE_SUBDIR := jre
JCOV_IMAGE_SUBDIR := jdk-jcov
STATIC_JDK_IMAGE_SUBDIR := static-jdk

# Colon left out to be able to override output dir for bootcycle-images
ifeq ($(JDK_IMAGE_DIR), )
  JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(JDK_IMAGE_SUBDIR)
endif
JRE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(JRE_IMAGE_SUBDIR)
STATIC_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(STATIC_JDK_IMAGE_SUBDIR)
ifeq ($(JCOV_IMAGE_DIR), )
  JCOV_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(JCOV_IMAGE_SUBDIR)
endif
# Test image, as above
TEST_IMAGE_SUBDIR := test
ifeq ($(TEST_IMAGE_DIR), )
  TEST_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(TEST_IMAGE_SUBDIR)
endif

# Symbols image
SYMBOLS_IMAGE_SUBDIR := symbols
ifeq ($(SYMBOLS_IMAGE_DIR), )
  SYMBOLS_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(SYMBOLS_IMAGE_SUBDIR)
endif

# Interim image
INTERIM_JMODS_DIR := $(SUPPORT_OUTPUTDIR)/interim-jmods
INTERIM_IMAGE_DIR := $(SUPPORT_OUTPUTDIR)/interim-image

# Docs image
DOCS_JDK_IMAGE_SUBDIR := docs
DOCS_JDK_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(DOCS_JDK_IMAGE_SUBDIR)
DOCS_JAVASE_IMAGE_SUBDIR := docs-javase
DOCS_JAVASE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(DOCS_JAVASE_IMAGE_SUBDIR)
DOCS_REFERENCE_IMAGE_SUBDIR := docs-reference
DOCS_REFERENCE_IMAGE_DIR = $(IMAGES_OUTPUTDIR)/$(DOCS_REFERENCE_IMAGE_SUBDIR)
# Output docs directly into image
DOCS_OUTPUTDIR := $(DOCS_JDK_IMAGE_DIR)

# Static libs image
STATIC_LIBS_IMAGE_SUBDIR := static-libs
STATIC_LIBS_IMAGE_DIR := $(IMAGES_OUTPUTDIR)/$(STATIC_LIBS_IMAGE_SUBDIR)

# Graal static libs image
STATIC_LIBS_GRAAL_IMAGE_SUBDIR := static-libs-graal
STATIC_LIBS_GRAAL_IMAGE_DIR := $(IMAGES_OUTPUTDIR)/$(STATIC_LIBS_GRAAL_IMAGE_SUBDIR)

# Graal builder image
GRAAL_BUILDER_IMAGE_SUBDIR := graal-builder-jdk
GRAAL_BUILDER_IMAGE_DIR := $(IMAGES_OUTPUTDIR)/$(GRAAL_BUILDER_IMAGE_SUBDIR)

# Macosx bundles directory definitions
JDK_MACOSX_BUNDLE_SUBDIR := jdk-bundle
JRE_MACOSX_BUNDLE_SUBDIR := jre-bundle
JDK_MACOSX_BUNDLE_SUBDIR_SIGNED := jdk-bundle-signed
JRE_MACOSX_BUNDLE_SUBDIR_SIGNED := jre-bundle-signed
JDK_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)/$(JDK_MACOSX_BUNDLE_SUBDIR)
JRE_MACOSX_BUNDLE_DIR = $(IMAGES_OUTPUTDIR)/$(JRE_MACOSX_BUNDLE_SUBDIR)
JDK_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)/$(JDK_MACOSX_BUNDLE_SUBDIR_SIGNED)
JRE_MACOSX_BUNDLE_DIR_SIGNED = $(IMAGES_OUTPUTDIR)/$(JRE_MACOSX_BUNDLE_SUBDIR_SIGNED)
JDK_MACOSX_BUNDLE_TOP_SUBDIR = jdk-$(VERSION_NUMBER).jdk
JRE_MACOSX_BUNDLE_TOP_SUBDIR = jre-$(VERSION_NUMBER).jre
JDK_MACOSX_CONTENTS_SUBDIR = $(JDK_MACOSX_BUNDLE_TOP_SUBDIR)/Contents
JRE_MACOSX_CONTENTS_SUBDIR = $(JRE_MACOSX_BUNDLE_TOP_SUBDIR)/Contents
JDK_MACOSX_CONTENTS_DIR = $(JDK_MACOSX_BUNDLE_DIR)/$(JDK_MACOSX_CONTENTS_SUBDIR)
JRE_MACOSX_CONTENTS_DIR = $(JRE_MACOSX_BUNDLE_DIR)/$(JRE_MACOSX_CONTENTS_SUBDIR)
JDK_MACOSX_BUNDLE_TOP_DIR = $(JDK_MACOSX_BUNDLE_DIR)/$(JDK_MACOSX_BUNDLE_TOP_SUBDIR)
JRE_MACOSX_BUNDLE_TOP_DIR = $(JRE_MACOSX_BUNDLE_DIR)/$(JRE_MACOSX_BUNDLE_TOP_SUBDIR)

# Bundle names
ifneq ($(VERSION_BUILD), )
  BASE_NAME := $(VERSION_SHORT)+$(VERSION_BUILD)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)
else
  BASE_NAME := $(VERSION_SHORT)_$(OPENJDK_TARGET_BUNDLE_PLATFORM)
endif

ifeq ($(DEBUG_LEVEL), fastdebug)
  DEBUG_PART := -debug
else ifneq ($(DEBUG_LEVEL), release)
  DEBUG_PART := -$(DEBUG_LEVEL)
endif
ifeq ($(OPENJDK_TARGET_OS), windows)
  JDK_BUNDLE_EXTENSION := zip
else
  JDK_BUNDLE_EXTENSION := tar.gz
endif
JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)
JRE_BUNDLE_NAME := jre-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)
JDK_SYMBOLS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin$(DEBUG_PART)-symbols.tar.gz
TEST_DEMOS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests-demos$(DEBUG_PART).tar.gz
TEST_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-tests$(DEBUG_PART).tar.gz
DOCS_JDK_BUNDLE_NAME := jdk-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz
DOCS_JAVASE_BUNDLE_NAME := javase-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz
DOCS_REFERENCE_BUNDLE_NAME := jdk-reference-$(BASE_NAME)_doc-api-spec$(DEBUG_PART).tar.gz
STATIC_LIBS_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs$(DEBUG_PART).tar.gz
STATIC_LIBS_GRAAL_BUNDLE_NAME := jdk-$(BASE_NAME)_bin-static-libs-graal$(DEBUG_PART).tar.gz
STATIC_JDK_BUNDLE_NAME := static-jdk-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)
JCOV_BUNDLE_NAME := jdk-jcov-$(BASE_NAME)_bin$(DEBUG_PART).$(JDK_BUNDLE_EXTENSION)

JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(JDK_BUNDLE_NAME)
JRE_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(JRE_BUNDLE_NAME)
JDK_SYMBOLS_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(JDK_SYMBOLS_BUNDLE_NAME)
TEST_DEMOS_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(TEST_DEMOS_BUNDLE_NAME)
TEST_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(TEST_BUNDLE_NAME)
DOCS_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(DOCS_JDK_BUNDLE_NAME)
DOCS_JAVASE_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(DOCS_JAVASE_BUNDLE_NAME)
DOCS_REFERENCE_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(DOCS_REFERENCE_BUNDLE_NAME)
STATIC_JDK_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(STATIC_JDK_BUNDLE_NAME)
JCOV_BUNDLE := $(BUNDLES_OUTPUTDIR)/$(JCOV_BUNDLE_NAME)

ifeq ($(IS_BUILD_JDK_SPEC), true)
  CC := $(BUILD_CC)
  CXX := $(BUILD_CXX)
  # Ideally this should be probed by configure but that is tricky to implement,
  # and this should work in most cases.
  CPP := $(BUILD_CC) -E
  LD := $(BUILD_LD)
  LDCXX := $(BUILD_LDCXX)
  AS := $(BUILD_AS)
  NM := $(BUILD_NM)
  AR := $(BUILD_AR)
  LIB := $(BUILD_LIB)
  OBJCOPY := $(BUILD_OBJCOPY)
  STRIP := $(BUILD_STRIP)
  SYSROOT_CFLAGS := $(BUILD_SYSROOT_CFLAGS)
  SYSROOT_LDFLAGS := $(BUILD_SYSROOT_LDFLAGS)

  # These directories should not be moved to BUILDJDK_OUTPUTDIR
  HOTSPOT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(HOTSPOT_OUTPUTDIR))
  BUILDTOOLS_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(BUILDTOOLS_OUTPUTDIR))
  SUPPORT_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(SUPPORT_OUTPUTDIR))
  JDK_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(JDK_OUTPUTDIR))
  IMAGES_OUTPUTDIR := $(patsubst $(OUTPUTDIR)%,$(BUILDJDK_OUTPUTDIR)%,$(IMAGES_OUTPUTDIR))

  OPENJDK_TARGET_CPU := $(OPENJDK_BUILD_CPU)
  OPENJDK_TARGET_CPU_ARCH := $(OPENJDK_BUILD_CPU_ARCH)
  OPENJDK_TARGET_CPU_BITS := $(OPENJDK_BUILD_CPU_BITS)
  OPENJDK_TARGET_CPU_ENDIAN := $(OPENJDK_BUILD_CPU_ENDIAN)
  OPENJDK_TARGET_CPU_LEGACY := $(OPENJDK_BUILD_CPU_LEGACY)
  OPENJDK_TARGET_LIBC := $(OPENJDK_BUILD_LIBC)
  OPENJDK_TARGET_OS_INCLUDE_SUBDIR := $(OPENJDK_BUILD_OS_INCLUDE_SUBDIR)

  HOTSPOT_TARGET_OS := $(HOTSPOT_BUILD_OS)
  HOTSPOT_TARGET_OS_TYPE := $(HOTSPOT_BUILD_OS_TYPE)
  HOTSPOT_TARGET_CPU := $(HOTSPOT_BUILD_CPU)
  HOTSPOT_TARGET_CPU_ARCH := $(HOTSPOT_BUILD_CPU_ARCH)
  HOTSPOT_TARGET_CPU_DEFINE := $(HOTSPOT_BUILD_CPU_DEFINE)
  HOTSPOT_TARGET_LIBC := $(HOTSPOT_BUILD_LIBC)

  CFLAGS_JDKLIB := $(OPENJDK_BUILD_CFLAGS_JDKLIB)
  CXXFLAGS_JDKLIB := $(OPENJDK_BUILD_CXXFLAGS_JDKLIB)
  LDFLAGS_JDKLIB := $(OPENJDK_BUILD_LDFLAGS_JDKLIB)
  CFLAGS_JDKEXE := $(OPENJDK_BUILD_CFLAGS_JDKEXE)
  CXXFLAGS_JDKEXE := $(OPENJDK_BUILD_CXXFLAGS_JDKEXE)
  LDFLAGS_JDKEXE := $(OPENJDK_BUILD_LDFLAGS_JDKEXE)

  JVM_CFLAGS := $(OPENJDK_BUILD_JVM_CFLAGS)
  JVM_LDFLAGS := $(OPENJDK_BUILD_JVM_LDFLAGS)
  JVM_ASFLAGS := $(OPENJDK_BUILD_JVM_ASFLAGS)
  JVM_LIBS := $(OPENJDK_BUILD_JVM_LIBS)

  FDLIBM_CFLAGS := $(OPENJDK_BUILD_FDLIBM_CFLAGS)

  INTERIM_LANGTOOLS_ARGS := $(subst $(OUTPUTDIR),$(BUILDJDK_OUTPUTDIR),$(INTERIM_LANGTOOLS_ARGS))

  # The compiler for the build platform is likely not warning compatible with the official
  # compiler.
  WARNINGS_AS_ERRORS := false
  DISABLE_WARNING_PREFIX := $(BUILD_CC_DISABLE_WARNING_PREFIX)

  # Save speed and disk space by not enabling debug symbols for the buildjdk
  ENABLE_DEBUG_SYMBOLS := false

  JVM_VARIANTS := server
  JVM_VARIANT_MAIN := server
  JVM_FEATURES_server := cds compiler1 compiler2 g1gc serialgc

  # Some users still set EXTRA_*FLAGS on the make command line. Must
  # make sure to override that when building buildjdk.
  override EXTRA_CFLAGS :=
  override EXTRA_CXXFLAGS :=
  override EXTRA_LDFLAGS :=

  # hsdis is not needed
  HSDIS_BACKEND := none
  ENABLE_HSDIS_BUNDLING := false
endif

ifeq ($(IS_BOOTCYCLE_JDK_SPEC), true)
  # Override specific values to do a boot cycle build

  # Use a different Boot JDK
  BOOT_JDK := $(JDK_IMAGE_DIR)

  # The bootcycle build has a different output directory
  OLD_OUTPUTDIR := $(OUTPUTDIR)
  OUTPUTDIR := $(OLD_OUTPUTDIR)/bootcycle-build
  # No spaces in patsubst to avoid leading space in variable
  JAVAC_SERVER_DIR := $(patsubst $(OLD_OUTPUTDIR)%,$(OUTPUTDIR)%,$(JAVAC_SERVER_DIR))

  JAVA_CMD := $(FIXPATH) $(BOOT_JDK)/bin/java
  JAVAC_CMD := $(FIXPATH) $(BOOT_JDK)/bin/javac
  JAR_CMD := $(FIXPATH) $(BOOT_JDK)/bin/jar
  # The bootcycle JVM arguments may differ from the original boot jdk.
  JAVA_FLAGS_BIG := $(BOOTCYCLE_JVM_ARGS_BIG)
  # Any CDS settings generated for the bootjdk are invalid in the bootcycle build.
  # By filtering out those JVM args, the bootcycle JVM will use its default
  # settings for CDS.
  JAVA_FLAGS := $(filter-out -XX:SharedArchiveFile% -Xshare%, $(JAVA_FLAGS))
endif

################################################################################

include MakeIncludeEnd.gmk
endif # include guard
