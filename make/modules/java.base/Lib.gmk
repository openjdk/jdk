#
# Copyright (c) 2011, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

include CopyFiles.gmk
include LibCommon.gmk

# Hook to include the corresponding custom file, if present.
$(eval $(call IncludeCustomExtension, modules/java.base/Lib.gmk))

# Prepare the find cache.
$(call FillFindCache, $(wildcard $(TOPDIR)/src/java.base/*/native))

################################################################################
# Create all the core libraries

include lib/CoreLibraries.gmk

################################################################################
## Build libnet
################################################################################

$(eval $(call SetupJdkLibrary, BUILD_LIBNET, \
    NAME := net, \
    OPTIMIZATION := LOW, \
    DISABLED_WARNINGS_gcc_net_util_md.c := format-nonliteral, \
    DISABLED_WARNINGS_gcc_NetworkInterface.c := unused-function, \
    DISABLED_WARNINGS_clang_net_util_md.c := format-nonliteral, \
    DISABLED_WARNINGS_clang_aix_DefaultProxySelector.c := \
        deprecated-non-prototype, \
    DISABLED_WARNINGS_clang_aix_NetworkInterface.c := gnu-pointer-arith, \
    DISABLED_WARNINGS_microsoft_InetAddress.c := 4244, \
    DISABLED_WARNINGS_microsoft_ResolverConfigurationImpl.c := 4996, \
    LDFLAGS_windows := -delayload:iphlpapi.dll -delayload:secur32.dll \
        -delayload:winhttp.dll, \
    JDK_LIBS := libjava libjvm, \
    LIBS_linux := $(LIBDL), \
    LIBS_aix := $(LIBDL),\
    LIBS_windows := advapi32.lib delayimp.lib iphlpapi.lib secur32.lib \
        winhttp.lib ws2_32.lib, \
    LIBS_macosx := \
        -framework CoreFoundation \
        -framework CoreServices, \
))

TARGETS += $(BUILD_LIBNET)

################################################################################
## Build libnio
################################################################################

$(eval $(call SetupJdkLibrary, BUILD_LIBNIO, \
    NAME := nio, \
    OPTIMIZATION := HIGH, \
    EXTRA_HEADER_DIRS := \
        libnio/ch \
        libnio/fs \
        libjvm, \
    JDK_LIBS := libjava libnet, \
    LIBS_linux := $(LIBDL) -lpthread, \
    LIBS_aix := $(LIBDL), \
    LIBS_macosx := \
        -framework CoreFoundation \
        -framework CoreServices, \
    LIBS_windows := advapi32.lib mswsock.lib ws2_32.lib, \
))

TARGETS += $(BUILD_LIBNIO)

ifeq ($(call isTargetOs, macosx), true)
  ##############################################################################
  ## Build libosxsecurity
  ##############################################################################

  $(eval $(call SetupJdkLibrary, BUILD_LIBOSXSECURITY, \
      NAME := osxsecurity, \
      OPTIMIZATION := LOW, \
      DISABLED_WARNINGS_clang_KeystoreImpl.m := deprecated-declarations, \
      JDK_LIBS := libjava, \
      LIBS_macosx := -lobjc \
          -framework CoreServices \
          -framework Foundation \
          -framework Security, \
  ))

  TARGETS += $(BUILD_LIBOSXSECURITY)
endif

ifeq ($(call isTargetOsType, unix)+$(STATIC_BUILD), true+false)
  ##############################################################################
  ## Build libjsig
  ##############################################################################

  $(eval $(call SetupJdkLibrary, BUILD_LIBJSIG, \
      NAME := jsig, \
      OPTIMIZATION := LOW, \
      jsig.c_CFLAGS := -DHOTSPOT_VM_DISTRO='"$(HOTSPOT_VM_DISTRO)"', \
      LIBS_linux := $(LIBDL), \
      LIBS_aix := $(LIBDL), \
  ))

  TARGETS += $(BUILD_LIBJSIG)

  ##############################################################################
  # Create symlinks to libjsig in each JVM variant sub dir
  ifneq ($(STATIC_LIBS), true)
    LIB_OUTPUTDIR := $(call FindLibDirForModule, java.base)
    LIBJSIG_NAME := $(LIBRARY_PREFIX)jsig$(SHARED_LIBRARY_SUFFIX)

    # $1 variant subdir
    define CreateSymlinks
      # Always symlink from libdir/variant/libjsig.so -> ../libjsig.so.
      $(LIB_OUTPUTDIR)/$1/$(LIBJSIG_NAME): \
          $(LIB_OUTPUTDIR)/$(LIBJSIG_NAME)
		$$(call MakeDir, $$(@D))
		$(RM) $$@
		$(LN) -s ../$$(@F) $$@

      TARGETS += $(LIB_OUTPUTDIR)/$1/$(LIBJSIG_NAME)
    endef

    # The subdir is the same as the variant
    $(foreach v, $(JVM_VARIANTS), $(eval $(call CreateSymlinks,$v)))
  endif
endif

################################################################################
# Create the symbols file for static builds.
ifeq ($(STATIC_BUILD), true)
  STATIC_SYMBOLS_DIR := $(SUPPORT_OUTPUTDIR)/modules_libs/java.base
  JAVA_BASE_EXPORT_SYMBOLS_SRC := \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)jli.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)java.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)net.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)nio.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)verify.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)zip.symbols \
      $(STATIC_SYMBOLS_DIR)/$(LIBRARY_PREFIX)jimage.symbols \
      $(STATIC_SYMBOLS_DIR)/server/$(LIBRARY_PREFIX)jvm.symbols \
      #

  JAVA_BASE_EXPORT_SYMBOL_FILE := $(STATIC_SYMBOLS_DIR)/java.base.symbols

  $(JAVA_BASE_EXPORT_SYMBOL_FILE): $(JAVA_BASE_EXPORT_SYMBOLS_SRC)
	$(call LogInfo, Generating java.base.symbols file)
	$(CAT) $^ > $@

  # The individual symbol files is generated when the respective lib is built
  $(JAVA_BASE_EXPORT_SYMBOLS_SRC): $(BUILD_LIBJLI) $(BUILD_LIBJAVA) \
      $(BUILD_LIBNET) $(BUILD_LIBNIO) $(BUILD_LIBVERIFY) $(BUILD_LIBZIP) \
      $(BUILD_LIBJIMAGE)

  TARGETS += $(JAVA_BASE_EXPORT_SYMBOL_FILE)
endif

################################################################################
## Build libsyslookup
################################################################################

$(eval $(call SetupJdkLibrary, BUILD_LIBSYSLOOKUP, \
    NAME := syslookup, \
    LD_SET_ORIGIN := false, \
    LDFLAGS_linux := -Wl$(COMMA)--no-as-needed, \
    LDFLAGS_aix := -brtl -bexpfull, \
    LIBS_linux := $(LIBDL) $(LIBM), \
    LIBS_aix := -ldecNumber $(LIBM), \
))

TARGETS += $(BUILD_LIBSYSLOOKUP)

ifeq ($(ENABLE_FALLBACK_LINKER), true)
  ##############################################################################
  ## Build libfallbackLinker
  ##############################################################################

  $(eval $(call SetupJdkLibrary, BUILD_LIBFALLBACKLINKER, \
      NAME := fallbackLinker, \
      EXTRA_HEADER_DIRS := java.base:libjava, \
      CFLAGS := $(LIBFFI_CFLAGS), \
      LIBS := $(LIBFFI_LIBS), \
      LIBS_windows := ws2_32.lib, \
  ))

  TARGETS += $(BUILD_LIBFALLBACKLINKER)
endif

ifeq ($(call isTargetOs, linux)+$(call isTargetCpu, x86_64)+$(INCLUDE_COMPILER2)+$(filter $(TOOLCHAIN_TYPE), gcc), true+true+true+gcc)
  ##############################################################################
  ## Build libsimdsort
  ##############################################################################

  $(eval $(call SetupJdkLibrary, BUILD_LIBSIMD_SORT, \
      NAME := simdsort, \
      LINK_TYPE := C++, \
      OPTIMIZATION := HIGH, \
      CXXFLAGS := -std=c++17, \
      LIBS_linux := $(LIBDL) $(LIBM), \
  ))

  TARGETS += $(BUILD_LIBSIMD_SORT)
endif
